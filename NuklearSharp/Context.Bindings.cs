// Generated by Sichem at 2/4/2018 1:25:45 AM

using System;

namespace NuklearSharp
{
	unsafe partial class Context
	{
		public void InputGlyph(string glyph)
		{
			fixed (char* glyph_ptr = glyph)
			{
				InputGlyph(glyph_ptr);
			}
		}

		public bool PanelBegin(string title, int panel_type)
		{
			fixed (char* title_ptr = title)
			{
				return PanelBegin(title_ptr, panel_type) != 0;
			}
		}

		public Window FindWindow(uint hash, string name)
		{
			fixed (char* name_ptr = name)
			{
				return FindWindow(hash, name_ptr);
			}
		}

		public bool Begin(string title, Rect bounds, uint flags)
		{
			fixed (char* title_ptr = title)
			{
				return Begin(title_ptr, bounds, flags) != 0;
			}
		}

		public bool BeginTitled(string name, string title, Rect bounds, uint flags)
		{
			fixed (char* name_ptr = name)
			{
				fixed (char* title_ptr = title)
				{
					return BeginTitled(name_ptr, title_ptr, bounds, flags) != 0;
				}
			}
		}

		public bool WindowIsCollapsed(string name)
		{
			fixed (char* name_ptr = name)
			{
				return WindowIsCollapsed(name_ptr) != 0;
			}
		}

		public bool WindowIsClosed(string name)
		{
			fixed (char* name_ptr = name)
			{
				return WindowIsClosed(name_ptr) != 0;
			}
		}

		public bool WindowIsHidden(string name)
		{
			fixed (char* name_ptr = name)
			{
				return WindowIsHidden(name_ptr) != 0;
			}
		}

		public bool WindowIsActive(string name)
		{
			fixed (char* name_ptr = name)
			{
				return WindowIsActive(name_ptr) != 0;
			}
		}

		public Window WindowFind(string name)
		{
			fixed (char* name_ptr = name)
			{
				return WindowFind(name_ptr);
			}
		}

		public void WindowClose(string name)
		{
			fixed (char* name_ptr = name)
			{
				WindowClose(name_ptr);
			}
		}

		public void WindowSetBounds(string name, Rect bounds)
		{
			fixed (char* name_ptr = name)
			{
				WindowSetBounds(name_ptr, bounds);
			}
		}

		public void WindowSetPosition(string name, Vec2 pos)
		{
			fixed (char* name_ptr = name)
			{
				WindowSetPosition(name_ptr, pos);
			}
		}

		public void WindowSetSize(string name, Vec2 size)
		{
			fixed (char* name_ptr = name)
			{
				WindowSetSize(name_ptr, size);
			}
		}

		public void WindowCollapse(string name, int c)
		{
			fixed (char* name_ptr = name)
			{
				WindowCollapse(name_ptr, c);
			}
		}

		public void WindowCollapseIf(string name, int c, int cond)
		{
			fixed (char* name_ptr = name)
			{
				WindowCollapseIf(name_ptr, c, cond);
			}
		}

		public void WindowShow(string name, int s)
		{
			fixed (char* name_ptr = name)
			{
				WindowShow(name_ptr, s);
			}
		}

		public void WindowShowIf(string name, int s, int cond)
		{
			fixed (char* name_ptr = name)
			{
				WindowShowIf(name_ptr, s, cond);
			}
		}

		public void WindowSetFocus(string name)
		{
			fixed (char* name_ptr = name)
			{
				WindowSetFocus(name_ptr);
			}
		}

		public void LayoutRow(int fmt, float height, int cols, float[] ratio)
		{
			fixed (float* ptr = ratio)
			{
				LayoutRow(fmt, height, cols, ptr);
			}
		}

		public bool TreeBase(int type, Image img, string title, int initial_state, string hash, int line)
		{
			fixed (char* title_ptr = title)
			{
				fixed (char* hash_ptr = hash)
				{
					return TreeBase(type, img, title_ptr, initial_state, hash_ptr, hash.Length, line) != 0;
				}
			}
		}

		public bool TreePushHashed(int type, string title, int initial_state, string hash, int line)
		{
			fixed (char* title_ptr = title)
			{
				fixed (char* hash_ptr = hash)
				{
					return TreePushHashed(type, title_ptr, initial_state, hash_ptr, hash.Length, line) != 0;
				}
			}
		}

		public bool TreeImagePushHashed(int type, Image img, string title, int initial_state, string hash, int seed)
		{
			fixed (char* title_ptr = title)
			{
				fixed (char* hash_ptr = hash)
				{
					return TreeImagePushHashed(type, img, title_ptr, initial_state, hash_ptr, hash.Length, seed) !=
					       0;
				}
			}
		}

		public void TextColored(string str, uint alignment, Color color)
		{
			fixed (char* str_ptr = str)
			{
				TextColored(str_ptr, str.Length, alignment, color);
			}
		}

		public void TextWrapColored(string str, Color color)
		{
			fixed (char* str_ptr = str)
			{
				TextWrapColored(str_ptr, str.Length, color);
			}
		}

		public void Text(string str, uint alignment)
		{
			fixed (char* str_ptr = str)
			{
				Textz(str_ptr, str.Length, alignment);
			}
		}

		public void TextWrap(string str)
		{
			fixed (char* str_ptr = str)
			{
				TextWrap(str_ptr, str.Length);
			}
		}

		public void Label(string str, uint alignment)
		{
			fixed (char* str_ptr = str)
			{
				Label(str_ptr, alignment);
			}
		}

		public void LabelColored(string str, uint align, Color color)
		{
			fixed (char* str_ptr = str)
			{
				LabelColored(str_ptr, align, color);
			}
		}

		public void LabelWrap(string str)
		{
			fixed (char* str_ptr = str)
			{
				LabelWrap(str_ptr);
			}
		}

		public void LabelColoredWrap(string str, Color color)
		{
			fixed (char* str_ptr = str)
			{
				LabelColoredWrap(str_ptr, color);
			}
		}

		public bool ButtonTextStyled(StyleButton style, string title)
		{
			fixed (char* title_ptr = title)
			{
				return ButtonTextStyled(style, title_ptr, title.Length) != 0;
			}
		}

		public bool ButtonText(string title)
		{
			fixed (char* title_ptr = title)
			{
				return ButtonText(title_ptr, title.Length) != 0;
			}
		}

		public bool ButtonLabelStyled(StyleButton style, string title)
		{
			fixed (char* title_ptr = title)
			{
				return ButtonLabelStyled(style, title_ptr) != 0;
			}
		}

		public bool ButtonLabel(string title)
		{
			fixed (char* title_ptr = title)
			{
				return ButtonLabel(title_ptr) != 0;
			}
		}

		public bool ButtonSymbolTextStyled(StyleButton style, int symbol, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ButtonSymbolTextStyled(style, symbol, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ButtonSymbolText(int symbol, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ButtonSymbolText(symbol, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ButtonSymbolLabel(int symbol, string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return ButtonSymbolLabel(symbol, label_ptr, align) != 0;
			}
		}

		public bool ButtonSymbolLabelStyled(StyleButton style, int symbol, string title, uint align)
		{
			fixed (char* title_ptr = title)
			{
				return ButtonSymbolLabelStyled(style, symbol, title_ptr, align) != 0;
			}
		}

		public bool ButtonImageTextStyled(StyleButton style, Image img, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ButtonImageTextStyled(style, img, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ButtonImageText(Image img, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ButtonImageText(img, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ButtonImageLabel(Image img, string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return ButtonImageLabel(img, label_ptr, align) != 0;
			}
		}

		public bool ButtonImageLabelStyled(StyleButton style, Image img, string label,
			uint text_alignment)
		{
			fixed (char* label_ptr = label)
			{
				return ButtonImageLabelStyled(style, img, label_ptr, text_alignment) != 0;
			}
		}

		public bool SelectableText(string str, uint align, ref int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectableText(str_ptr, str.Length, align, ref value) != 0;
			}
		}

		public bool SelectableImageText(Image img, string str, uint align, ref int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectableImageText(img, str_ptr, str.Length, align, ref value) != 0;
			}
		}

		public bool SelectText(string str, uint align, int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectText(str_ptr, str.Length, align, value) != 0;
			}
		}

		public bool SelectableLabel(string str, uint align, ref int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectableLabel(str_ptr, align, ref value) != 0;
			}
		}

		public bool SelectableImageLabel(Image img, string str, uint align, ref int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectableImageLabel(img, str_ptr, align, ref value) != 0;
			}
		}

		public bool SelectLabel(string str, uint align, int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectLabel(str_ptr, align, value) != 0;
			}
		}

		public bool SelectImageLabel(Image img, string str, uint align, int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectImageLabel(img, str_ptr, align, value) != 0;
			}
		}

		public bool SelectImageText(Image img, string str, uint align, int value)
		{
			fixed (char* str_ptr = str)
			{
				return SelectImageText(img, str_ptr, str.Length, align, value) != 0;
			}
		}

		public bool CheckText(string text, bool active)
		{
			fixed (char* text_ptr = text)
			{
				return CheckText(text_ptr, text.Length, active ? 1 : 0) != 0;
			}
		}

		public uint CheckFlagsText(string text, uint flags, uint value)
		{
			fixed (char* text_ptr = text)
			{
				return CheckFlagsText(text_ptr, text.Length, flags, value);
			}
		}

		public bool CheckboxText(string text, ref bool active)
		{
			fixed (char* text_ptr = text)
			{
				int i;
				var res = CheckboxText(text_ptr, text.Length, &i) != 0;
				active = i != 0;
				return res;
			}
		}

		public bool CheckboxFlagsText(string text, ref uint flags, uint value)
		{
			fixed (char* text_ptr = text)
			{
				uint f;
				var res = CheckboxFlagsText(text_ptr, text.Length, &f, value) != 0;

				flags = f;
				return res;
			}
		}

		public bool CheckLabel(string label, bool active)
		{
			fixed (char* label_ptr = label)
			{
				return CheckLabel(label_ptr, active ? 1 : 0) != 0;
			}
		}

		public uint CheckFlagsLabel(string label, uint flags, uint value)
		{
			fixed (char* label_ptr = label)
			{
				return CheckFlagsLabel(label_ptr, flags, value);
			}
		}

		public bool CheckboxLabel(string label, ref bool active)
		{
			fixed (char* label_ptr = label)
			{
				int i;
				var res = CheckboxLabel(label_ptr, &i) != 0;
				active = i != 0;
				return res;
			}
		}

		public bool CheckboxFlagsLabel(string label, ref uint flags, uint value)
		{
			fixed (char* label_ptr = label)
			{
				uint f;
				var res = CheckboxFlagsLabel(label_ptr, &f, value) != 0;
				flags = f;
				return res;
			}
		}

		public bool OptionText(string text, int is_active)
		{
			fixed (char* text_ptr = text)
			{
				return OptionText(text_ptr, text.Length, is_active) != 0;
			}
		}

		public bool RadioText(string text, ref bool active)
		{
			fixed (char* text_ptr = text)
			{
				int i;
				var res = RadioText(text_ptr, text.Length, &i) != 0;
				active = i != 0;
				return res;
			}
		}

		public bool OptionLabel(string label, bool active)
		{
			fixed (char* label_ptr = label)
			{
				return OptionLabel(label_ptr, active ? 1 : 0) != 0;
			}
		}

		public bool RadioLabel(string label, ref bool active)
		{
			fixed (char* label_ptr = label)
			{
				int i;
				var res = RadioLabel(label_ptr, &i) != 0;
				active = i != 0;
				return res;
			}
		}

		public uint EditString(uint flags, string memory, ref int len, int max, Nuklear.NkPluginFilter filter)
		{
			fixed (char* memory_ptr = memory)
			{
				return EditString(flags, memory_ptr, ref len, max, filter);
			}
		}

		public uint EditStringZeroTerminated(uint flags, string buffer, int max, Nuklear.NkPluginFilter filter)
		{
			fixed (char* buffer_ptr = buffer)
			{
				return EditStringZeroTerminated(flags, buffer_ptr, max, filter);
			}
		}

		public void PropertyInt(string name, int min, ref int val, int max, int step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				PropertyInt(name_ptr, min, ref val, max, step, inc_per_pixel);
			}
		}

		public void PropertyFloat(string name, float min, ref float val, float max, float step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				PropertyFloat(name_ptr, min, ref val, max, step, inc_per_pixel);
			}
		}

		public void PropertyDouble(string name, double min, ref double val, double max, double step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				PropertyDouble(name_ptr, min, ref val, max, step, inc_per_pixel);
			}
		}

		public int Propertyi(string name, int min, int val, int max, int step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				return Propertyi(name_ptr, min, val, max, step, inc_per_pixel);
			}
		}

		public float Propertyf(string name, float min, float val, float max, float step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				return Propertyf(name_ptr, min, val, max, step, inc_per_pixel);
			}
		}

		public double Propertyd(string name, double min, double val, double max, double step, float inc_per_pixel)
		{
			fixed (char* name_ptr = name)
			{
				return Propertyd(name_ptr, min, val, max, step, inc_per_pixel);
			}
		}

		public bool ColorPick(Colorf color, int fmt)
		{
			return ColorPick(&color, fmt) != 0;
		}

		public void Plot(int type, float[] values, int offset)
		{
			fixed (float* ptr = values)
			{
				Plot(type, ptr, values.Length, offset);
			}
		}

		public void PlotFunction(int type, IntPtr userdata, Nuklear.NkFloatValueGetter value_getter, int count, int offset)
		{
			PlotFunction(type, userdata.ToPointer(), value_getter, count, offset);
		}

		public bool GroupScrolledBegin(Scroll Scroll, string title, uint flags)
		{
			fixed (char* title_ptr = title)
			{
				return GroupScrolledBegin(Scroll, title_ptr, flags) != 0;
			}
		}

		public bool GroupBeginTitled(string id, string title, uint flags)
		{
			fixed (char* id_ptr = id)
			{
				fixed (char* title_ptr = title)
				{
					return GroupBeginTitled(id_ptr, title_ptr, flags) != 0;
				}
			}
		}

		public bool GroupBegin(string title, uint flags)
		{
			fixed (char* title_ptr = title)
			{
				return GroupBegin(title_ptr, flags) != 0;
			}
		}

		public bool ListViewBegin(ListView view, string title, uint flags, int row_height, int row_count)
		{
			fixed (char* title_ptr = title)
			{
				return ListViewBegin(view, title_ptr, flags, row_height, row_count) != 0;
			}
		}

		public bool PopupBegin(int type, string title, uint flags, Rect rect)
		{
			fixed (char* title_ptr = title)
			{
				return PopupBegin(type, title_ptr, flags, rect) != 0;
			}
		}

		public void Tooltip(string text)
		{
			fixed (char* text_ptr = text)
			{
				Tooltip(text_ptr);
			}
		}

		public bool ContextualItemText(string text, uint alignment)
		{
			fixed (char* text_ptr = text)
			{
				return ContextualItemText(text_ptr, text.Length, alignment) != 0;
			}
		}

		public bool ContextualItemLabel(string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return ContextualItemLabel(label_ptr, align) != 0;
			}
		}

		public bool ContextualItemImageText(Image img, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ContextualItemImageText(img, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ContextualItemImageLabel(Image img, string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return ContextualItemImageLabel(img, label_ptr, align) != 0;
			}
		}

		public bool ContextualItemSymbolText(int symbol, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ContextualItemSymbolText(symbol, text_ptr, text.Length, align) != 0;
			}
		}

		public bool ContextualItemSymbolLabel(int symbol, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ContextualItemSymbolLabel(symbol, text_ptr, align) != 0;
			}
		}

		public bool ComboBeginText(string Selected, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginText(Selected_ptr, Selected.Length, size) != 0;
			}
		}

		public bool ComboBeginLabel(string Selected, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginLabel(Selected_ptr, size) != 0;
			}
		}

		public bool ComboBeginSymbolText(string Selected, int symbol, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginSymbolText(Selected_ptr, Selected.Length, symbol, size) != 0;
			}
		}

		public bool ComboBeginImageText(string Selected, Image img, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginImageText(Selected_ptr, Selected.Length, img, size) != 0;
			}
		}

		public bool ComboBeginSymbolLabel(string Selected, int type, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginSymbolLabel(Selected_ptr, type, size) != 0;
			}
		}

		public bool ComboBeginImageLabel(string Selected, Image img, Vec2 size)
		{
			fixed (char* Selected_ptr = Selected)
			{
				return ComboBeginImageLabel(Selected_ptr, img, size) != 0;
			}
		}

		public bool ComboItemText(string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return ComboItemText(text_ptr, text.Length, align) != 0;
			}
		}

		public bool ComboItemLabel(string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return ComboItemLabel(label_ptr, align) != 0;
			}
		}

		public bool ComboItemImageText(Image img, string text, uint alignment)
		{
			fixed (char* text_ptr = text)
			{
				return ComboItemImageText(img, text_ptr, text.Length, alignment) != 0;
			}
		}

		public bool ComboItemImageLabel(Image img, string text, uint alignment)
		{
			fixed (char* text_ptr = text)
			{
				return ComboItemImageLabel(img, text_ptr, alignment) != 0;
			}
		}

		public bool ComboItemSymbolText(int sym, string text, uint alignment)
		{
			fixed (char* text_ptr = text)
			{
				return ComboItemSymbolText(sym, text_ptr, text.Length, alignment) != 0;
			}
		}

		public bool ComboItemSymbolLabel(int sym, string label, uint alignment)
		{
			fixed (char* label_ptr = label)
			{
				return ComboItemSymbolLabel(sym, label_ptr, alignment) != 0;
			}
		}

		public bool ComboSeparator(string items_separated_bySeparator, int separator, int Selected, int count,
			int item_height, Vec2 size)
		{
			fixed (char* items_separated_bySeparator_ptr = items_separated_bySeparator)
			{
				return
					ComboSeparator(items_separated_bySeparator_ptr, separator, Selected, count, item_height, size) !=
					0;
			}
		}

		public bool ComboString(string items_separated_byZeros, int Selected, int count, int item_height,
			Vec2 size)
		{
			fixed (char* items_separated_byZeros_ptr = items_separated_byZeros)
			{
				return ComboString(items_separated_byZeros_ptr, Selected, count, item_height, size) != 0;
			}
		}

		public void ComboboxString(string items_separated_byZeros, ref int Selected, int count, int item_height,
			Vec2 size)
		{
			fixed (char* items_separated_byZeros_ptr = items_separated_byZeros)
			{
				int s;
				ComboboxString(items_separated_byZeros_ptr, &s, count, item_height, size);
				Selected = s;
			}
		}

		public void ComboboxSeparator(string items_separated_bySeparator, int separator, ref int Selected, int count,
			int item_height, Vec2 size)
		{
			fixed (char* items_separated_bySeparator_ptr = items_separated_bySeparator)
			{
				int s;
				ComboboxSeparator(items_separated_bySeparator_ptr, separator, &s, count, item_height, size);
				Selected = s;
			}
		}

		public void ComboboxCallback(Nuklear.NkComboCallback item_getter, IntPtr userdata, ref int Selected, int count,
			int item_height, Vec2 size)
		{
			int s;
			ComboboxCallback(item_getter, userdata.ToPointer(), &s, count, item_height, size);
			Selected = s;
		}

		public bool MenuBegin(Window win, string id, int is_clicked, Rect header, Vec2 size)
		{
			fixed (char* id_ptr = id)
			{
				return MenuBegin(win, id_ptr, is_clicked, header, size) != 0;
			}
		}

		public bool MenuBeginText(string title, uint align, Vec2 size)
		{
			fixed (char* title_ptr = title)
			{
				return MenuBeginText(title_ptr, title.Length, align, size) != 0;
			}
		}

		public bool MenuBeginLabel(string text, uint align, Vec2 size)
		{
			fixed (char* text_ptr = text)
			{
				return MenuBeginLabel(text_ptr, align, size) != 0;
			}
		}

		public bool MenuBeginImage(string id, Image img, Vec2 size)
		{
			fixed (char* id_ptr = id)
			{
				return MenuBeginImage(id_ptr, img, size) != 0;
			}
		}

		public bool MenuBeginSymbol(string id, int sym, Vec2 size)
		{
			fixed (char* id_ptr = id)
			{
				return MenuBeginSymbol(id_ptr, sym, size) != 0;
			}
		}

		public bool MenuBeginImageText(string title, uint align, Image img, Vec2 size)
		{
			fixed (char* title_ptr = title)
			{
				return MenuBeginImageText(title_ptr, title.Length, align, img, size) != 0;
			}
		}

		public bool MenuBeginImageLabel(string title, uint align, Image img, Vec2 size)
		{
			fixed (char* title_ptr = title)
			{
				return MenuBeginImageLabel(title_ptr, align, img, size) != 0;
			}
		}

		public bool MenuBeginSymbolText(string title, uint align, int sym, Vec2 size)
		{
			fixed (char* title_ptr = title)
			{
				return MenuBeginSymbolText(title_ptr, title.Length, align, sym, size) != 0;
			}
		}

		public bool MenuBeginSymbolLabel(string title, uint align, int sym, Vec2 size)
		{
			fixed (char* title_ptr = title)
			{
				return MenuBeginSymbolLabel(title_ptr, align, sym, size) != 0;
			}
		}

		public bool MenuItemText(string title, uint align)
		{
			fixed (char* title_ptr = title)
			{
				return MenuItemText(title_ptr, title.Length, align) != 0;
			}
		}

		public bool MenuItemLabel(string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return MenuItemLabel(label_ptr, align) != 0;
			}
		}

		public bool MenuItemImageLabel(Image img, string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return MenuItemImageLabel(img, label_ptr, align) != 0;
			}
		}

		public bool MenuItemImageText(Image img, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return MenuItemImageText(img, text_ptr, text.Length, align) != 0;
			}
		}

		public bool MenuItemSymbolText(int sym, string text, uint align)
		{
			fixed (char* text_ptr = text)
			{
				return MenuItemSymbolText(sym, text_ptr, text.Length, align) != 0;
			}
		}

		public bool MenuItemSymbolLabel(int sym, string label, uint align)
		{
			fixed (char* label_ptr = label)
			{
				return MenuItemSymbolLabel(sym, label_ptr, align) != 0;
			}
		}
	}
}