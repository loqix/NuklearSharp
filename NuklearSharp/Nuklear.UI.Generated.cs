// Generated by Sichem at 2/4/2018 7:49:45 PM

using System;
using System.Runtime.InteropServices;

namespace NuklearSharp
{
	unsafe partial class Nuklear
	{
		public static int nk_draw_vertex_layout_element_is_end_of_layout(nk_draw_vertex_layout_element* element)
		{
			return
				(int) (((element->attribute) == (NK_VERTEX_ATTRIBUTE_COUNT)) || ((element->format) == (NK_FORMAT_COUNT)) ? 1 : 0);
		}

		public static void nk_widget_text(nk_command_buffer o, nk_rect b, char* _string_, int len, nk_text* t, uint a,
			nk_user_font f)
		{
			nk_rect label = new nk_rect();
			float text_width;
			if ((o == null) || (t == null)) return;
			b.h = (float) ((b.h) < (2*t->padding.y) ? (2*t->padding.y) : (b.h));
			label.x = (float) (0);
			label.w = (float) (0);
			label.y = (float) (b.y + t->padding.y);
			label.h = (float) ((f.height) < (b.h - 2*t->padding.y) ? (f.height) : (b.h - 2*t->padding.y));
			text_width = (float) (f.width((nk_handle) (f.userdata), (float) (f.height), _string_, (int) (len)));
			text_width += (float) (2.0f*t->padding.x);
			if ((a & NK_TEXT_ALIGN_LEFT) != 0)
			{
				label.x = (float) (b.x + t->padding.x);
				label.w = (float) ((0) < (b.w - 2*t->padding.x) ? (b.w - 2*t->padding.x) : (0));
			}
			else if ((a & NK_TEXT_ALIGN_CENTERED) != 0)
			{
				label.w = (float) ((1) < (2*t->padding.x + text_width) ? (2*t->padding.x + text_width) : (1));
				label.x = (float) (b.x + t->padding.x + ((b.w - 2*t->padding.x) - label.w)/2);
				label.x = (float) ((b.x + t->padding.x) < (label.x) ? (label.x) : (b.x + t->padding.x));
				label.w = (float) ((b.x + b.w) < (label.x + label.w) ? (b.x + b.w) : (label.x + label.w));
				if ((label.w) >= (label.x)) label.w -= (float) (label.x);
			}
			else if ((a & NK_TEXT_ALIGN_RIGHT) != 0)
			{
				label.x =
					(float)
						((b.x + t->padding.x) < ((b.x + b.w) - (2*t->padding.x + text_width))
							? ((b.x + b.w) - (2*t->padding.x + text_width))
							: (b.x + t->padding.x));
				label.w = (float) (text_width + 2*t->padding.x);
			}
			else return;
			if ((a & NK_TEXT_ALIGN_MIDDLE) != 0)
			{
				label.y = (float) (b.y + b.h/2.0f - f.height/2.0f);
				label.h =
					(float) ((b.h/2.0f) < (b.h - (b.h/2.0f + f.height/2.0f)) ? (b.h - (b.h/2.0f + f.height/2.0f)) : (b.h/2.0f));
			}
			else if ((a & NK_TEXT_ALIGN_BOTTOM) != 0)
			{
				label.y = (float) (b.y + b.h - f.height);
				label.h = (float) (f.height);
			}

			nk_draw_text(o, (nk_rect) (label), _string_, (int) (len), f, (nk_color) (t->background), (nk_color) (t->text));
		}

		public static void nk_widget_text_wrap(nk_command_buffer o, nk_rect b, char* _string_, int len, nk_text* t,
			nk_user_font f)
		{
			float width;
			int glyphs = (int) (0);
			int fitting = (int) (0);
			int done = (int) (0);
			nk_rect line = new nk_rect();
			nk_text text = new nk_text();
			uint* seperator = stackalloc uint[1];
			seperator[0] = (uint) (' ');

			if ((o == null) || (t == null)) return;
			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			text.background = (nk_color) (t->background);
			text.text = (nk_color) (t->text);
			b.w = (float) ((b.w) < (2*t->padding.x) ? (2*t->padding.x) : (b.w));
			b.h = (float) ((b.h) < (2*t->padding.y) ? (2*t->padding.y) : (b.h));
			b.h = (float) (b.h - 2*t->padding.y);
			line.x = (float) (b.x + t->padding.x);
			line.y = (float) (b.y + t->padding.y);
			line.w = (float) (b.w - 2*t->padding.x);
			line.h = (float) (2*t->padding.y + f.height);
			fitting = (int) (nk_text_clamp(f, _string_, (int) (len), (float) (line.w), &glyphs, &width, seperator, 1));
			while ((done) < (len))
			{
				if ((fitting == 0) || ((line.y + line.h) >= (b.y + b.h))) break;
				nk_widget_text(o, (nk_rect) (line), &_string_[done], (int) (fitting), &text, (uint) (NK_TEXT_LEFT), f);
				done += (int) (fitting);
				line.y += (float) (f.height + 2*t->padding.y);
				fitting =
					(int) (nk_text_clamp(f, &_string_[done], (int) (len - done), (float) (line.w), &glyphs, &width, seperator, 1));
			}
		}

		public static int nk_button_behavior(ref uint state, nk_rect r, nk_input i, int behavior)
		{
			int ret = (int) (0);
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if (i == null) return (int) (0);
			if ((nk_input_is_mouse_hovering_rect(i, (nk_rect) (r))) != 0)
			{
				state = (uint) (NK_WIDGET_STATE_HOVERED);
				if ((nk_input_is_mouse_down(i, (int) (NK_BUTTON_LEFT))) != 0) state = (uint) (NK_WIDGET_STATE_ACTIVE);
				if ((nk_input_has_mouse_click_in_rect(i, (int) (NK_BUTTON_LEFT), (nk_rect) (r))) != 0)
				{
					ret =
						(int)
							((behavior != NK_BUTTON_DEFAULT)
								? nk_input_is_mouse_down(i, (int) (NK_BUTTON_LEFT))
								: nk_input_is_mouse_pressed(i, (int) (NK_BUTTON_LEFT)));
				}
			}

			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(i, (nk_rect) (r)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(i, (nk_rect) (r))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (int) (ret);
		}

		public static nk_style_item nk_draw_button(nk_command_buffer _out_, nk_rect* bounds, uint state, nk_style_button style)
		{
			nk_style_item background;
			if ((state & NK_WIDGET_STATE_HOVER) != 0) background = style.hover;
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0) background = style.active;
			else background = style.normal;
			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (float) (style.border),
					(nk_color) (style.border_color));
			}

			return background;
		}

		public static int nk_do_button(ref uint state, nk_command_buffer _out_, nk_rect r, nk_style_button style,
			nk_input _in_, int behavior, nk_rect* content)
		{
			nk_rect bounds = new nk_rect();
			if ((_out_ == null) || (style == null)) return (int) (nk_false);
			content->x = (float) (r.x + style.padding.x + style.border + style.rounding);
			content->y = (float) (r.y + style.padding.y + style.border + style.rounding);
			content->w = (float) (r.w - (2*style.padding.x + style.border + style.rounding*2));
			content->h = (float) (r.h - (2*style.padding.y + style.border + style.rounding*2));
			bounds.x = (float) (r.x - style.touch_padding.x);
			bounds.y = (float) (r.y - style.touch_padding.y);
			bounds.w = (float) (r.w + 2*style.touch_padding.x);
			bounds.h = (float) (r.h + 2*style.touch_padding.y);
			return (int) (nk_button_behavior(ref state, (nk_rect) (bounds), _in_, (int) (behavior)));
		}

		public static void nk_draw_button_text(nk_command_buffer _out_, nk_rect* bounds, nk_rect* content, uint state,
			nk_style_button style, char* txt, int len, uint text_alignment, nk_user_font font)
		{
			nk_text text = new nk_text();
			nk_style_item background;
			background = nk_draw_button(_out_, bounds, (uint) (state), style);
			if ((background.type) == (NK_STYLE_ITEM_COLOR)) text.background = (nk_color) (background.data.color);
			else text.background = (nk_color) (style.text_background);
			if ((state & NK_WIDGET_STATE_HOVER) != 0) text.text = (nk_color) (style.text_hover);
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0) text.text = (nk_color) (style.text_active);
			else text.text = (nk_color) (style.text_normal);
			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_widget_text(_out_, (nk_rect) (*content), txt, (int) (len), &text, (uint) (text_alignment), font);
		}

		public static int nk_do_button_text(ref uint state, nk_command_buffer _out_, nk_rect bounds, char* _string_, int len,
			uint align, int behavior, nk_style_button style, nk_input _in_, nk_user_font font)
		{
			nk_rect content = new nk_rect();
			int ret = (int) (nk_false);
			if ((((_out_ == null) || (style == null)) || (font == null)) || (_string_ == null)) return (int) (nk_false);
			ret = (int) (nk_do_button(ref state, _out_, (nk_rect) (bounds), style, _in_, (int) (behavior), &content));
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_button_text(_out_, &bounds, &content, (uint) (state), style, _string_, (int) (len), (uint) (align), font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (int) (ret);
		}

		public static void nk_draw_button_symbol(nk_command_buffer _out_, nk_rect* bounds, nk_rect* content, uint state,
			nk_style_button style, int type, nk_user_font font)
		{
			nk_color sym = new nk_color();
			nk_color bg = new nk_color();
			nk_style_item background;
			background = nk_draw_button(_out_, bounds, (uint) (state), style);
			if ((background.type) == (NK_STYLE_ITEM_COLOR)) bg = (nk_color) (background.data.color);
			else bg = (nk_color) (style.text_background);
			if ((state & NK_WIDGET_STATE_HOVER) != 0) sym = (nk_color) (style.text_hover);
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0) sym = (nk_color) (style.text_active);
			else sym = (nk_color) (style.text_normal);
			nk_draw_symbol(_out_, (int) (type), (nk_rect) (*content), (nk_color) (bg), (nk_color) (sym), (float) (1), font);
		}

		public static int nk_do_button_symbol(ref uint state, nk_command_buffer _out_, nk_rect bounds, int symbol,
			int behavior, nk_style_button style, nk_input _in_, nk_user_font font)
		{
			int ret;
			nk_rect content = new nk_rect();
			if ((((_out_ == null) || (style == null)) || (font == null)) || (state == null)) return (int) (nk_false);
			ret = (int) (nk_do_button(ref state, _out_, (nk_rect) (bounds), style, _in_, (int) (behavior), &content));
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_button_symbol(_out_, &bounds, &content, (uint) (state), style, (int) (symbol), font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (int) (ret);
		}

		public static void nk_draw_button_image(nk_command_buffer _out_, nk_rect* bounds, nk_rect* content, uint state,
			nk_style_button style, nk_image img)
		{
			nk_draw_button(_out_, bounds, (uint) (state), style);
			nk_draw_image(_out_, (nk_rect) (*content), img, (nk_color) (nk_white));
		}

		public static int nk_do_button_image(ref uint state, nk_command_buffer _out_, nk_rect bounds, nk_image img, int b,
			nk_style_button style, nk_input _in_)
		{
			int ret;
			nk_rect content = new nk_rect();
			if (((_out_ == null) || (style == null)) || (state == null)) return (int) (nk_false);
			ret = (int) (nk_do_button(ref state, _out_, (nk_rect) (bounds), style, _in_, (int) (b), &content));
			content.x += (float) (style.image_padding.x);
			content.y += (float) (style.image_padding.y);
			content.w -= (float) (2*style.image_padding.x);
			content.h -= (float) (2*style.image_padding.y);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_button_image(_out_, &bounds, &content, (uint) (state), style, img);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (int) (ret);
		}

		public static void nk_draw_button_text_symbol(nk_command_buffer _out_, nk_rect* bounds, nk_rect* label,
			nk_rect* symbol, uint state, nk_style_button style, char* str, int len, int type, nk_user_font font)
		{
			nk_color sym = new nk_color();
			nk_text text = new nk_text();
			nk_style_item background;
			background = nk_draw_button(_out_, bounds, (uint) (state), style);
			if ((background.type) == (NK_STYLE_ITEM_COLOR)) text.background = (nk_color) (background.data.color);
			else text.background = (nk_color) (style.text_background);
			if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				sym = (nk_color) (style.text_hover);
				text.text = (nk_color) (style.text_hover);
			}
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				sym = (nk_color) (style.text_active);
				text.text = (nk_color) (style.text_active);
			}
			else
			{
				sym = (nk_color) (style.text_normal);
				text.text = (nk_color) (style.text_normal);
			}

			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_draw_symbol(_out_, (int) (type), (nk_rect) (*symbol), (nk_color) (style.text_background), (nk_color) (sym),
				(float) (0), font);
			nk_widget_text(_out_, (nk_rect) (*label), str, (int) (len), &text, (uint) (NK_TEXT_CENTERED), font);
		}

		public static int nk_do_button_text_symbol(ref uint state, nk_command_buffer _out_, nk_rect bounds, int symbol,
			char* str, int len, uint align, int behavior, nk_style_button style, nk_user_font font, nk_input _in_)
		{
			int ret;
			nk_rect tri = new nk_rect();
			nk_rect content = new nk_rect();
			if (((_out_ == null) || (style == null)) || (font == null)) return (int) (nk_false);
			ret = (int) (nk_do_button(ref state, _out_, (nk_rect) (bounds), style, _in_, (int) (behavior), &content));
			tri.y = (float) (content.y + (content.h/2) - font.height/2);
			tri.w = (float) (font.height);
			tri.h = (float) (font.height);
			if ((align & NK_TEXT_ALIGN_LEFT) != 0)
			{
				tri.x = (float) ((content.x + content.w) - (2*style.padding.x + tri.w));
				tri.x = (float) ((tri.x) < (0) ? (0) : (tri.x));
			}
			else tri.x = (float) (content.x + 2*style.padding.x);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_button_text_symbol(_out_, &bounds, &content, &tri, (uint) (state), style, str, (int) (len), (int) (symbol),
				font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (int) (ret);
		}

		public static void nk_draw_button_text_image(nk_command_buffer _out_, nk_rect* bounds, nk_rect* label, nk_rect* image,
			uint state, nk_style_button style, char* str, int len, nk_user_font font, nk_image img)
		{
			nk_text text = new nk_text();
			nk_style_item background;
			background = nk_draw_button(_out_, bounds, (uint) (state), style);
			if ((background.type) == (NK_STYLE_ITEM_COLOR)) text.background = (nk_color) (background.data.color);
			else text.background = (nk_color) (style.text_background);
			if ((state & NK_WIDGET_STATE_HOVER) != 0) text.text = (nk_color) (style.text_hover);
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0) text.text = (nk_color) (style.text_active);
			else text.text = (nk_color) (style.text_normal);
			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_widget_text(_out_, (nk_rect) (*label), str, (int) (len), &text, (uint) (NK_TEXT_CENTERED), font);
			nk_draw_image(_out_, (nk_rect) (*image), img, (nk_color) (nk_white));
		}

		public static int nk_do_button_text_image(ref uint state, nk_command_buffer _out_, nk_rect bounds, nk_image img,
			char* str, int len, uint align, int behavior, nk_style_button style, nk_user_font font, nk_input _in_)
		{
			int ret;
			nk_rect icon = new nk_rect();
			nk_rect content = new nk_rect();
			if ((((_out_ == null) || (font == null)) || (style == null)) || (str == null)) return (int) (nk_false);
			ret = (int) (nk_do_button(ref state, _out_, (nk_rect) (bounds), style, _in_, (int) (behavior), &content));
			icon.y = (float) (bounds.y + style.padding.y);
			icon.w = (float) (icon.h = (float) (bounds.h - 2*style.padding.y));
			if ((align & NK_TEXT_ALIGN_LEFT) != 0)
			{
				icon.x = (float) ((bounds.x + bounds.w) - (2*style.padding.x + icon.w));
				icon.x = (float) ((icon.x) < (0) ? (0) : (icon.x));
			}
			else icon.x = (float) (bounds.x + 2*style.padding.x);
			icon.x += (float) (style.image_padding.x);
			icon.y += (float) (style.image_padding.y);
			icon.w -= (float) (2*style.image_padding.x);
			icon.h -= (float) (2*style.image_padding.y);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_button_text_image(_out_, &bounds, &content, &icon, (uint) (state), style, str, (int) (len), font, img);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (int) (ret);
		}

		public static int nk_toggle_behavior(nk_input _in_, nk_rect select, ref uint state, int active)
		{
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if ((nk_button_behavior(ref state, (nk_rect) (select), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
			{
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
				active = active != 0 ? 0 : 1;
			}

			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (select)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (select))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (int) (active);
		}

		public static void nk_draw_checkbox(nk_command_buffer _out_, uint state, nk_style_toggle style, int active,
			nk_rect* label, nk_rect* selector, nk_rect* cursors, char* _string_, int len, nk_user_font font)
		{
			nk_style_item background;
			nk_style_item cursor;
			nk_text text = new nk_text();
			if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
				text.text = (nk_color) (style.text_hover);
			}
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
				text.text = (nk_color) (style.text_active);
			}
			else
			{
				background = style.normal;
				cursor = style.cursor_normal;
				text.text = (nk_color) (style.text_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_rect(_out_, (nk_rect) (*selector), (float) (0), (nk_color) (style.border_color));
				nk_fill_rect(_out_, (nk_rect) (nk_shrink_rect_((nk_rect) (*selector), (float) (style.border))), (float) (0),
					(nk_color) (background.data.color));
			}
			else nk_draw_image(_out_, (nk_rect) (*selector), background.data.image, (nk_color) (nk_white));
			if ((active) != 0)
			{
				if ((cursor.type) == (NK_STYLE_ITEM_IMAGE))
					nk_draw_image(_out_, (nk_rect) (*cursors), cursor.data.image, (nk_color) (nk_white));
				else nk_fill_rect(_out_, (nk_rect) (*cursors), (float) (0), (nk_color) (cursor.data.color));
			}

			text.padding.x = (float) (0);
			text.padding.y = (float) (0);
			text.background = (nk_color) (style.text_background);
			nk_widget_text(_out_, (nk_rect) (*label), _string_, (int) (len), &text, (uint) (NK_TEXT_LEFT), font);
		}

		public static void nk_draw_option(nk_command_buffer _out_, uint state, nk_style_toggle style, int active,
			nk_rect* label, nk_rect* selector, nk_rect* cursors, char* _string_, int len, nk_user_font font)
		{
			nk_style_item background;
			nk_style_item cursor;
			nk_text text = new nk_text();
			if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
				text.text = (nk_color) (style.text_hover);
			}
			else if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
				text.text = (nk_color) (style.text_active);
			}
			else
			{
				background = style.normal;
				cursor = style.cursor_normal;
				text.text = (nk_color) (style.text_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_circle(_out_, (nk_rect) (*selector), (nk_color) (style.border_color));
				nk_fill_circle(_out_, (nk_rect) (nk_shrink_rect_((nk_rect) (*selector), (float) (style.border))),
					(nk_color) (background.data.color));
			}
			else nk_draw_image(_out_, (nk_rect) (*selector), background.data.image, (nk_color) (nk_white));
			if ((active) != 0)
			{
				if ((cursor.type) == (NK_STYLE_ITEM_IMAGE))
					nk_draw_image(_out_, (nk_rect) (*cursors), cursor.data.image, (nk_color) (nk_white));
				else nk_fill_circle(_out_, (nk_rect) (*cursors), (nk_color) (cursor.data.color));
			}

			text.padding.x = (float) (0);
			text.padding.y = (float) (0);
			text.background = (nk_color) (style.text_background);
			nk_widget_text(_out_, (nk_rect) (*label), _string_, (int) (len), &text, (uint) (NK_TEXT_LEFT), font);
		}

		public static int nk_do_toggle(ref uint state, nk_command_buffer _out_, nk_rect r, int* active, char* str, int len,
			int type, nk_style_toggle style, nk_input _in_, nk_user_font font)
		{
			int was_active;
			nk_rect bounds = new nk_rect();
			nk_rect select = new nk_rect();
			nk_rect cursor = new nk_rect();
			nk_rect label = new nk_rect();
			if ((((_out_ == null) || (style == null)) || (font == null)) || (active == null)) return (int) (0);
			r.w = (float) ((r.w) < (font.height + 2*style.padding.x) ? (font.height + 2*style.padding.x) : (r.w));
			r.h = (float) ((r.h) < (font.height + 2*style.padding.y) ? (font.height + 2*style.padding.y) : (r.h));
			bounds.x = (float) (r.x - style.touch_padding.x);
			bounds.y = (float) (r.y - style.touch_padding.y);
			bounds.w = (float) (r.w + 2*style.touch_padding.x);
			bounds.h = (float) (r.h + 2*style.touch_padding.y);
			select.w = (float) (font.height);
			select.h = (float) (select.w);
			select.y = (float) (r.y + r.h/2.0f - select.h/2.0f);
			select.x = (float) (r.x);
			cursor.x = (float) (select.x + style.padding.x + style.border);
			cursor.y = (float) (select.y + style.padding.y + style.border);
			cursor.w = (float) (select.w - (2*style.padding.x + 2*style.border));
			cursor.h = (float) (select.h - (2*style.padding.y + 2*style.border));
			label.x = (float) (select.x + select.w + style.spacing);
			label.y = (float) (select.y);
			label.w = (float) (((r.x + r.w) < (label.x) ? (label.x) : (r.x + r.w)) - label.x);
			label.h = (float) (select.w);
			was_active = (int) (*active);
			*active = (int) (nk_toggle_behavior(_in_, (nk_rect) (bounds), ref state, (int) (*active)));
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			if ((type) == (NK_TOGGLE_CHECK))
			{
				nk_draw_checkbox(_out_, (uint) (state), style, (int) (*active), &label, &select, &cursor, str, (int) (len), font);
			}
			else
			{
				nk_draw_option(_out_, (uint) (state), style, (int) (*active), &label, &select, &cursor, str, (int) (len), font);
			}

			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return was_active != *active ? 1 : 0;
		}

		public static void nk_draw_selectable(nk_command_buffer _out_, uint state, nk_style_selectable style, int active,
			nk_rect* bounds, nk_rect* icon, nk_image img, char* _string_, int len, uint align, nk_user_font font)
		{
			nk_style_item background;
			nk_text text = new nk_text();
			text.padding = (nk_vec2) (style.padding);
			if (active == 0)
			{
				if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
				{
					background = style.pressed;
					text.text = (nk_color) (style.text_pressed);
				}
				else if ((state & NK_WIDGET_STATE_HOVER) != 0)
				{
					background = style.hover;
					text.text = (nk_color) (style.text_hover);
				}
				else
				{
					background = style.normal;
					text.text = (nk_color) (style.text_normal);
				}
			}
			else
			{
				if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
				{
					background = style.pressed_active;
					text.text = (nk_color) (style.text_pressed_active);
				}
				else if ((state & NK_WIDGET_STATE_HOVER) != 0)
				{
					background = style.hover_active;
					text.text = (nk_color) (style.text_hover_active);
				}
				else
				{
					background = style.normal_active;
					text.text = (nk_color) (style.text_normal_active);
				}
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
				text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			}
			else
			{
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				text.background = (nk_color) (background.data.color);
			}

			if (((img) != null) && ((icon) != null)) nk_draw_image(_out_, (nk_rect) (*icon), img, (nk_color) (nk_white));
			nk_widget_text(_out_, (nk_rect) (*bounds), _string_, (int) (len), &text, (uint) (align), font);
		}

		public static int nk_do_selectable(ref uint state, nk_command_buffer _out_, nk_rect bounds, char* str, int len,
			uint align, ref int value, nk_style_selectable style, nk_input _in_, nk_user_font font)
		{
			int old_value;
			nk_rect touch = new nk_rect();
			if (((((((state == null) || (_out_ == null)) || (str == null)) || (len == 0)) || (value == null)) || (style == null)) ||
			    (font == null)) return (int) (0);
			old_value = (int) (value);
			touch.x = (float) (bounds.x - style.touch_padding.x);
			touch.y = (float) (bounds.y - style.touch_padding.y);
			touch.w = (float) (bounds.w + style.touch_padding.x*2);
			touch.h = (float) (bounds.h + style.touch_padding.y*2);
			if ((nk_button_behavior(ref state, (nk_rect) (touch), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				value = value != 0 ? 0 : 1;
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_selectable(_out_, (uint) (state), style, (int) (value), &bounds, null, null, str, (int) (len), (uint) (align),
				font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return old_value != value ? 1 : 0;
		}

		public static int nk_do_selectable_image(ref uint state, nk_command_buffer _out_, nk_rect bounds, char* str, int len,
			uint align, ref int value, nk_image img, nk_style_selectable style, nk_input _in_, nk_user_font font)
		{
			int old_value;
			nk_rect touch = new nk_rect();
			nk_rect icon = new nk_rect();
			if (((((((state == null) || (_out_ == null)) || (str == null)) || (len == 0)) || (value == null)) || (style == null)) ||
			    (font == null)) return (int) (0);
			old_value = (int) (value);
			touch.x = (float) (bounds.x - style.touch_padding.x);
			touch.y = (float) (bounds.y - style.touch_padding.y);
			touch.w = (float) (bounds.w + style.touch_padding.x*2);
			touch.h = (float) (bounds.h + style.touch_padding.y*2);
			if ((nk_button_behavior(ref state, (nk_rect) (touch), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				value = value != 0 ? 0 : 1;
			icon.y = (float) (bounds.y + style.padding.y);
			icon.w = (float) (icon.h = (float) (bounds.h - 2*style.padding.y));
			if ((align & NK_TEXT_ALIGN_LEFT) != 0)
			{
				icon.x = (float) ((bounds.x + bounds.w) - (2*style.padding.x + icon.w));
				icon.x = (float) ((icon.x) < (0) ? (0) : (icon.x));
			}
			else icon.x = (float) (bounds.x + 2*style.padding.x);
			icon.x += (float) (style.image_padding.x);
			icon.y += (float) (style.image_padding.y);
			icon.w -= (float) (2*style.image_padding.x);
			icon.h -= (float) (2*style.image_padding.y);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_selectable(_out_, (uint) (state), style, (int) (value), &bounds, &icon, img, str, (int) (len), (uint) (align),
				font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return old_value != value ? 1 : 0;
		}

		public static float nk_slider_behavior(ref uint state, nk_rect* logical_cursor, nk_rect* visual_cursor, nk_input _in_,
			nk_rect bounds, float slider_min, float slider_max, float slider_value, float slider_step, float slider_steps)
		{
			int left_mouse_down;
			int left_mouse_click_in_cursor;
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			left_mouse_down =
				(int) (((_in_) != null) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0) ? 1 : 0);
			left_mouse_click_in_cursor =
				(int)
					(((_in_) != null) &&
					 ((nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (*visual_cursor), (int) (nk_true))) !=
					  0)
						? 1
						: 0);
			if (((left_mouse_down) != 0) && ((left_mouse_click_in_cursor) != 0))
			{
				float ratio = (float) (0);
				float d = (float) (_in_.mouse.pos.x - (visual_cursor->x + visual_cursor->w*0.5f));
				float pxstep = (float) (bounds.w/slider_steps);
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
				if ((((d) < (0)) ? -(d) : (d)) >= (pxstep))
				{
					float steps = (float) ((int) ((((d) < (0)) ? -(d) : (d))/pxstep));
					slider_value += (float) (((d) > (0)) ? (slider_step*steps) : -(slider_step*steps));
					slider_value =
						(float)
							(((slider_value) < (slider_max) ? (slider_value) : (slider_max)) < (slider_min)
								? (slider_min)
								: ((slider_value) < (slider_max) ? (slider_value) : (slider_max)));
					ratio = (float) ((slider_value - slider_min)/slider_step);
					logical_cursor->x = (float) (bounds.x + (logical_cursor->w*ratio));
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.x = (float) (logical_cursor->x);
				}
			}

			if ((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (bounds))) != 0) state = (uint) (NK_WIDGET_STATE_HOVERED);
			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (bounds)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (bounds))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (float) (slider_value);
		}

		public static void nk_draw_slider(nk_command_buffer _out_, uint state, nk_style_slider style, nk_rect* bounds,
			nk_rect* visual_cursor, float min, float value, float max)
		{
			nk_rect fill = new nk_rect();
			nk_rect bar = new nk_rect();
			nk_style_item background;
			nk_color bar_color = new nk_color();
			nk_style_item cursor;
			if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.active;
				bar_color = (nk_color) (style.bar_active);
				cursor = style.cursor_active;
			}
			else if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				bar_color = (nk_color) (style.bar_hover);
				cursor = style.cursor_hover;
			}
			else
			{
				background = style.normal;
				bar_color = (nk_color) (style.bar_normal);
				cursor = style.cursor_normal;
			}

			bar.x = (float) (bounds->x);
			bar.y = (float) ((visual_cursor->y + visual_cursor->h/2) - bounds->h/12);
			bar.w = (float) (bounds->w);
			bar.h = (float) (bounds->h/6);
			fill.w = (float) ((visual_cursor->x + (visual_cursor->w/2.0f)) - bar.x);
			fill.x = (float) (bar.x);
			fill.y = (float) (bar.y);
			fill.h = (float) (bar.h);
			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (float) (style.border),
					(nk_color) (style.border_color));
			}

			nk_fill_rect(_out_, (nk_rect) (bar), (float) (style.rounding), (nk_color) (bar_color));
			nk_fill_rect(_out_, (nk_rect) (fill), (float) (style.rounding), (nk_color) (style.bar_filled));
			if ((cursor.type) == (NK_STYLE_ITEM_IMAGE))
				nk_draw_image(_out_, (nk_rect) (*visual_cursor), cursor.data.image, (nk_color) (nk_white));
			else nk_fill_circle(_out_, (nk_rect) (*visual_cursor), (nk_color) (cursor.data.color));
		}

		public static float nk_do_slider(ref uint state, nk_command_buffer _out_, nk_rect bounds, float min, float val,
			float max, float step, nk_style_slider style, nk_input _in_, nk_user_font font)
		{
			float slider_range;
			float slider_min;
			float slider_max;
			float slider_value;
			float slider_steps;
			float cursor_offset;
			nk_rect visual_cursor = new nk_rect();
			nk_rect logical_cursor = new nk_rect();
			if ((_out_ == null) || (style == null)) return (float) (0);
			bounds.x = (float) (bounds.x + style.padding.x);
			bounds.y = (float) (bounds.y + style.padding.y);
			bounds.h = (float) ((bounds.h) < (2*style.padding.y) ? (2*style.padding.y) : (bounds.h));
			bounds.w =
				(float)
					((bounds.w) < (2*style.padding.x + style.cursor_size.x) ? (2*style.padding.x + style.cursor_size.x) : (bounds.w));
			bounds.w -= (float) (2*style.padding.x);
			bounds.h -= (float) (2*style.padding.y);
			if ((style.show_buttons) != 0)
			{
				uint ws = 0;
				nk_rect button = new nk_rect();
				button.y = (float) (bounds.y);
				button.w = (float) (bounds.h);
				button.h = (float) (bounds.h);
				button.x = (float) (bounds.x);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.dec_symbol), (int) (NK_BUTTON_DEFAULT),
						style.dec_button, _in_, font)) != 0) val -= (float) (step);
				button.x = (float) ((bounds.x + bounds.w) - button.w);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.inc_symbol), (int) (NK_BUTTON_DEFAULT),
						style.inc_button, _in_, font)) != 0) val += (float) (step);
				bounds.x = (float) (bounds.x + button.w + style.spacing.x);
				bounds.w = (float) (bounds.w - (2*button.w + 2*style.spacing.x));
			}

			bounds.x += (float) (style.cursor_size.x*0.5f);
			bounds.w -= (float) (style.cursor_size.x);
			slider_max = (float) ((min) < (max) ? (max) : (min));
			slider_min = (float) ((min) < (max) ? (min) : (max));
			slider_value =
				(float)
					(((val) < (slider_max) ? (val) : (slider_max)) < (slider_min)
						? (slider_min)
						: ((val) < (slider_max) ? (val) : (slider_max)));
			slider_range = (float) (slider_max - slider_min);
			slider_steps = (float) (slider_range/step);
			cursor_offset = (float) ((slider_value - slider_min)/step);
			logical_cursor.h = (float) (bounds.h);
			logical_cursor.w = (float) (bounds.w/slider_steps);
			logical_cursor.x = (float) (bounds.x + (logical_cursor.w*cursor_offset));
			logical_cursor.y = (float) (bounds.y);
			visual_cursor.h = (float) (style.cursor_size.y);
			visual_cursor.w = (float) (style.cursor_size.x);
			visual_cursor.y = (float) ((bounds.y + bounds.h*0.5f) - visual_cursor.h*0.5f);
			visual_cursor.x = (float) (logical_cursor.x - visual_cursor.w*0.5f);
			slider_value =
				(float)
					(nk_slider_behavior(ref state, &logical_cursor, &visual_cursor, _in_, (nk_rect) (bounds), (float) (slider_min),
						(float) (slider_max), (float) (slider_value), (float) (step), (float) (slider_steps)));
			visual_cursor.x = (float) (logical_cursor.x - visual_cursor.w*0.5f);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_slider(_out_, (uint) (state), style, &bounds, &visual_cursor, (float) (slider_min), (float) (slider_value),
				(float) (slider_max));
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (float) (slider_value);
		}

		public static ulong nk_progress_behavior(ref uint state, nk_input _in_, nk_rect r, nk_rect cursor, ulong max,
			ulong value, int modifiable)
		{
			int left_mouse_down = (int) (0);
			int left_mouse_click_in_cursor = (int) (0);
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if ((_in_ == null) || (modifiable == 0)) return (ulong) (value);
			left_mouse_down =
				(int) (((_in_) != null) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0) ? 1 : 0);
			left_mouse_click_in_cursor =
				(int)
					(((_in_) != null) &&
					 ((nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (cursor), (int) (nk_true))) != 0)
						? 1
						: 0);
			if ((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (r))) != 0) state = (uint) (NK_WIDGET_STATE_HOVERED);
			if ((((_in_) != null) && ((left_mouse_down) != 0)) && ((left_mouse_click_in_cursor) != 0))
			{
				if (((left_mouse_down) != 0) && ((left_mouse_click_in_cursor) != 0))
				{
					float ratio = (float) (((0) < (_in_.mouse.pos.x - cursor.x) ? (_in_.mouse.pos.x - cursor.x) : (0))/cursor.w);
					value =
						((ulong)
							((((float) (max)*ratio) < ((float) (max)) ? ((float) (max)*ratio) : ((float) (max))) < (0)
								? (0)
								: (((float) (max)*ratio) < ((float) (max)) ? ((float) (max)*ratio) : ((float) (max)))));
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.x = (float) (cursor.x + cursor.w/2.0f);
					state |= (uint) (NK_WIDGET_STATE_ACTIVE);
				}
			}

			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (r)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (r))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (ulong) (value);
		}

		public static void nk_draw_progress(nk_command_buffer _out_, uint state, nk_style_progress style, nk_rect* bounds,
			nk_rect* scursor, ulong value, ulong max)
		{
			nk_style_item background;
			nk_style_item cursor;
			if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.active;
				cursor = style.cursor_active;
			}
			else if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
			}
			else
			{
				background = style.normal;
				cursor = style.cursor_normal;
			}

			if ((background.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (float) (style.border),
					(nk_color) (style.border_color));
			}
			else nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
			if ((cursor.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_rect(_out_, (nk_rect) (*scursor), (float) (style.rounding), (nk_color) (cursor.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*scursor), (float) (style.rounding), (float) (style.border),
					(nk_color) (style.border_color));
			}
			else nk_draw_image(_out_, (nk_rect) (*scursor), cursor.data.image, (nk_color) (nk_white));
		}

		public static ulong nk_do_progress(ref uint state, nk_command_buffer _out_, nk_rect bounds, ulong value, ulong max,
			int modifiable, nk_style_progress style, nk_input _in_)
		{
			float prog_scale;
			ulong prog_value;
			nk_rect cursor = new nk_rect();
			if ((_out_ == null) || (style == null)) return (ulong) (0);
			cursor.w =
				(float) ((bounds.w) < (2*style.padding.x + 2*style.border) ? (2*style.padding.x + 2*style.border) : (bounds.w));
			cursor.h =
				(float) ((bounds.h) < (2*style.padding.y + 2*style.border) ? (2*style.padding.y + 2*style.border) : (bounds.h));
			cursor =
				(nk_rect)
					(nk_pad_rect((nk_rect) (bounds),
						(nk_vec2) (nk_vec2_((float) (style.padding.x + style.border), (float) (style.padding.y + style.border)))));
			prog_scale = (float) ((float) (value)/(float) (max));
			prog_value = (ulong) ((value) < (max) ? (value) : (max));
			prog_value =
				(ulong)
					(nk_progress_behavior(ref state, _in_, (nk_rect) (bounds), (nk_rect) (cursor), (ulong) (max), (ulong) (prog_value),
						(int) (modifiable)));
			cursor.w = (float) (cursor.w*prog_scale);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_progress(_out_, (uint) (state), style, &bounds, &cursor, (ulong) (value), (ulong) (max));
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (ulong) (prog_value);
		}

		public static float nk_scrollbar_behavior(ref uint state, nk_input _in_, int has_scrolling, nk_rect* scroll,
			ref nk_rect cursor, nk_rect* empty0, nk_rect* empty1, float scroll_offset, float target, float scroll_step, int o)
		{
			uint ws = (uint) (0);
			int left_mouse_down;
			int left_mouse_click_in_cursor;
			float scroll_delta;
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if (_in_ == null) return (float) (scroll_offset);
			left_mouse_down = (int) (((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down);
			left_mouse_click_in_cursor =
				(int) (nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (cursor), (int) (nk_true)));
			if ((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (*scroll))) != 0) state = (uint) (NK_WIDGET_STATE_HOVERED);
			scroll_delta = (float) (((o) == (NK_VERTICAL)) ? _in_.mouse.scroll_delta.y : _in_.mouse.scroll_delta.x);
			if (((left_mouse_down) != 0) && ((left_mouse_click_in_cursor) != 0))
			{
				float pixel;
				float delta;
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
				if ((o) == (NK_VERTICAL))
				{
					float cursor_y;
					pixel = (float) (_in_.mouse.delta.y);
					delta = (float) ((pixel/scroll->h)*target);
					scroll_offset =
						(float)
							(((scroll_offset + delta) < (target - scroll->h) ? (scroll_offset + delta) : (target - scroll->h)) < (0)
								? (0)
								: ((scroll_offset + delta) < (target - scroll->h) ? (scroll_offset + delta) : (target - scroll->h)));
					cursor_y = (float) (scroll->y + ((scroll_offset/target)*scroll->h));
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.y = (float) (cursor_y + cursor.h/2.0f);
				}
				else
				{
					float cursor_x;
					pixel = (float) (_in_.mouse.delta.x);
					delta = (float) ((pixel/scroll->w)*target);
					scroll_offset =
						(float)
							(((scroll_offset + delta) < (target - scroll->w) ? (scroll_offset + delta) : (target - scroll->w)) < (0)
								? (0)
								: ((scroll_offset + delta) < (target - scroll->w) ? (scroll_offset + delta) : (target - scroll->w)));
					cursor_x = (float) (scroll->x + ((scroll_offset/target)*scroll->w));
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.x = (float) (cursor_x + cursor.w/2.0f);
				}
			}
			else if (((((nk_input_is_key_pressed(_in_, (int) (NK_KEY_SCROLL_UP))) != 0) && ((o) == (NK_VERTICAL))) &&
			          ((has_scrolling) != 0)) ||
			         ((nk_button_behavior(ref ws, (nk_rect) (*empty0), _in_, (int) (NK_BUTTON_DEFAULT))) != 0))
			{
				if ((o) == (NK_VERTICAL))
					scroll_offset = (float) ((0) < (scroll_offset - scroll->h) ? (scroll_offset - scroll->h) : (0));
				else scroll_offset = (float) ((0) < (scroll_offset - scroll->w) ? (scroll_offset - scroll->w) : (0));
			}
			else if (((((nk_input_is_key_pressed(_in_, (int) (NK_KEY_SCROLL_DOWN))) != 0) && ((o) == (NK_VERTICAL))) &&
			          ((has_scrolling) != 0)) ||
			         ((nk_button_behavior(ref ws, (nk_rect) (*empty1), _in_, (int) (NK_BUTTON_DEFAULT))) != 0))
			{
				if ((o) == (NK_VERTICAL))
					scroll_offset =
						(float)
							((scroll_offset + scroll->h) < (target - scroll->h) ? (scroll_offset + scroll->h) : (target - scroll->h));
				else
					scroll_offset =
						(float)
							((scroll_offset + scroll->w) < (target - scroll->w) ? (scroll_offset + scroll->w) : (target - scroll->w));
			}
			else if ((has_scrolling) != 0)
			{
				if ((((scroll_delta) < (0)) || ((scroll_delta) > (0))))
				{
					scroll_offset = (float) (scroll_offset + scroll_step*(-scroll_delta));
					if ((o) == (NK_VERTICAL))
						scroll_offset =
							(float)
								(((scroll_offset) < (target - scroll->h) ? (scroll_offset) : (target - scroll->h)) < (0)
									? (0)
									: ((scroll_offset) < (target - scroll->h) ? (scroll_offset) : (target - scroll->h)));
					else
						scroll_offset =
							(float)
								(((scroll_offset) < (target - scroll->w) ? (scroll_offset) : (target - scroll->w)) < (0)
									? (0)
									: ((scroll_offset) < (target - scroll->w) ? (scroll_offset) : (target - scroll->w)));
				}
				else if ((nk_input_is_key_pressed(_in_, (int) (NK_KEY_SCROLL_START))) != 0)
				{
					if ((o) == (NK_VERTICAL)) scroll_offset = (float) (0);
				}
				else if ((nk_input_is_key_pressed(_in_, (int) (NK_KEY_SCROLL_END))) != 0)
				{
					if ((o) == (NK_VERTICAL)) scroll_offset = (float) (target - scroll->h);
				}
			}

			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (*scroll)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (*scroll))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (float) (scroll_offset);
		}

		public static void nk_draw_scrollbar(nk_command_buffer _out_, uint state, nk_style_scrollbar style, nk_rect* bounds,
			nk_rect* scroll)
		{
			nk_style_item background;
			nk_style_item cursor;
			if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.active;
				cursor = style.cursor_active;
			}
			else if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				cursor = style.cursor_hover;
			}
			else
			{
				background = style.normal;
				cursor = style.cursor_normal;
			}

			if ((background.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (float) (style.border),
					(nk_color) (style.border_color));
			}
			else
			{
				nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
			}

			if ((background.type) == (NK_STYLE_ITEM_COLOR))
			{
				nk_fill_rect(_out_, (nk_rect) (*scroll), (float) (style.rounding_cursor), (nk_color) (cursor.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*scroll), (float) (style.rounding_cursor), (float) (style.border_cursor),
					(nk_color) (style.cursor_border_color));
			}
			else nk_draw_image(_out_, (nk_rect) (*scroll), cursor.data.image, (nk_color) (nk_white));
		}

		public static float nk_do_scrollbarv(ref uint state, nk_command_buffer _out_, nk_rect scroll, int has_scrolling,
			float offset, float target, float step, float button_pixel_inc, nk_style_scrollbar style, nk_input _in_,
			nk_user_font font)
		{
			nk_rect empty_north = new nk_rect();
			nk_rect empty_south = new nk_rect();
			nk_rect cursor = new nk_rect();
			float scroll_step;
			float scroll_offset;
			float scroll_off;
			float scroll_ratio;
			if ((_out_ == null) || (style == null)) return (float) (0);
			scroll.w = (float) ((scroll.w) < (1) ? (1) : (scroll.w));
			scroll.h = (float) ((scroll.h) < (0) ? (0) : (scroll.h));
			if (target <= scroll.h) return (float) (0);
			if ((style.show_buttons) != 0)
			{
				uint ws = 0;
				float scroll_h;
				nk_rect button = new nk_rect();
				button.x = (float) (scroll.x);
				button.w = (float) (scroll.w);
				button.h = (float) (scroll.w);
				scroll_h = (float) ((scroll.h - 2*button.h) < (0) ? (0) : (scroll.h - 2*button.h));
				scroll_step = (float) ((step) < (button_pixel_inc) ? (step) : (button_pixel_inc));
				button.y = (float) (scroll.y);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.dec_symbol), (int) (NK_BUTTON_REPEATER),
						style.dec_button, _in_, font)) != 0) offset = (float) (offset - scroll_step);
				button.y = (float) (scroll.y + scroll.h - button.h);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.inc_symbol), (int) (NK_BUTTON_REPEATER),
						style.inc_button, _in_, font)) != 0) offset = (float) (offset + scroll_step);
				scroll.y = (float) (scroll.y + button.h);
				scroll.h = (float) (scroll_h);
			}

			scroll_step = (float) ((step) < (scroll.h) ? (step) : (scroll.h));
			scroll_offset =
				(float)
					(((offset) < (target - scroll.h) ? (offset) : (target - scroll.h)) < (0)
						? (0)
						: ((offset) < (target - scroll.h) ? (offset) : (target - scroll.h)));
			scroll_ratio = (float) (scroll.h/target);
			scroll_off = (float) (scroll_offset/target);
			cursor.h =
				(float)
					(((scroll_ratio*scroll.h) - (2*style.border + 2*style.padding.y)) < (0)
						? (0)
						: ((scroll_ratio*scroll.h) - (2*style.border + 2*style.padding.y)));
			cursor.y = (float) (scroll.y + (scroll_off*scroll.h) + style.border + style.padding.y);
			cursor.w = (float) (scroll.w - (2*style.border + 2*style.padding.x));
			cursor.x = (float) (scroll.x + style.border + style.padding.x);
			empty_north.x = (float) (scroll.x);
			empty_north.y = (float) (scroll.y);
			empty_north.w = (float) (scroll.w);
			empty_north.h = (float) ((cursor.y - scroll.y) < (0) ? (0) : (cursor.y - scroll.y));
			empty_south.x = (float) (scroll.x);
			empty_south.y = (float) (cursor.y + cursor.h);
			empty_south.w = (float) (scroll.w);
			empty_south.h =
				(float)
					(((scroll.y + scroll.h) - (cursor.y + cursor.h)) < (0) ? (0) : ((scroll.y + scroll.h) - (cursor.y + cursor.h)));
			scroll_offset =
				(float)
					(nk_scrollbar_behavior(ref state, _in_, (int) (has_scrolling), &scroll, ref cursor, &empty_north, &empty_south,
						(float) (scroll_offset), (float) (target), (float) (scroll_step), (int) (NK_VERTICAL)));
			scroll_off = (float) (scroll_offset/target);
			cursor.y = (float) (scroll.y + (scroll_off*scroll.h) + style.border_cursor + style.padding.y);
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_scrollbar(_out_, (uint) (state), style, &scroll, &cursor);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (float) (scroll_offset);
		}

		public static float nk_do_scrollbarh(ref uint state, nk_command_buffer _out_, nk_rect scroll, int has_scrolling,
			float offset, float target, float step, float button_pixel_inc, nk_style_scrollbar style, nk_input _in_,
			nk_user_font font)
		{
			nk_rect cursor = new nk_rect();
			nk_rect empty_west = new nk_rect();
			nk_rect empty_east = new nk_rect();
			float scroll_step;
			float scroll_offset;
			float scroll_off;
			float scroll_ratio;
			if ((_out_ == null) || (style == null)) return (float) (0);
			scroll.h = (float) ((scroll.h) < (1) ? (1) : (scroll.h));
			scroll.w = (float) ((scroll.w) < (2*scroll.h) ? (2*scroll.h) : (scroll.w));
			if (target <= scroll.w) return (float) (0);
			if ((style.show_buttons) != 0)
			{
				uint ws = 0;
				float scroll_w;
				nk_rect button = new nk_rect();
				button.y = (float) (scroll.y);
				button.w = (float) (scroll.h);
				button.h = (float) (scroll.h);
				scroll_w = (float) (scroll.w - 2*button.w);
				scroll_step = (float) ((step) < (button_pixel_inc) ? (step) : (button_pixel_inc));
				button.x = (float) (scroll.x);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.dec_symbol), (int) (NK_BUTTON_REPEATER),
						style.dec_button, _in_, font)) != 0) offset = (float) (offset - scroll_step);
				button.x = (float) (scroll.x + scroll.w - button.w);
				if (
					(nk_do_button_symbol(ref ws, _out_, (nk_rect) (button), (int) (style.inc_symbol), (int) (NK_BUTTON_REPEATER),
						style.inc_button, _in_, font)) != 0) offset = (float) (offset + scroll_step);
				scroll.x = (float) (scroll.x + button.w);
				scroll.w = (float) (scroll_w);
			}

			scroll_step = (float) ((step) < (scroll.w) ? (step) : (scroll.w));
			scroll_offset =
				(float)
					(((offset) < (target - scroll.w) ? (offset) : (target - scroll.w)) < (0)
						? (0)
						: ((offset) < (target - scroll.w) ? (offset) : (target - scroll.w)));
			scroll_ratio = (float) (scroll.w/target);
			scroll_off = (float) (scroll_offset/target);
			cursor.w = (float) ((scroll_ratio*scroll.w) - (2*style.border + 2*style.padding.x));
			cursor.x = (float) (scroll.x + (scroll_off*scroll.w) + style.border + style.padding.x);
			cursor.h = (float) (scroll.h - (2*style.border + 2*style.padding.y));
			cursor.y = (float) (scroll.y + style.border + style.padding.y);
			empty_west.x = (float) (scroll.x);
			empty_west.y = (float) (scroll.y);
			empty_west.w = (float) (cursor.x - scroll.x);
			empty_west.h = (float) (scroll.h);
			empty_east.x = (float) (cursor.x + cursor.w);
			empty_east.y = (float) (scroll.y);
			empty_east.w = (float) ((scroll.x + scroll.w) - (cursor.x + cursor.w));
			empty_east.h = (float) (scroll.h);
			scroll_offset =
				(float)
					(nk_scrollbar_behavior(ref state, _in_, (int) (has_scrolling), &scroll, ref cursor, &empty_west, &empty_east,
						(float) (scroll_offset), (float) (target), (float) (scroll_step), (int) (NK_HORIZONTAL)));
			scroll_off = (float) (scroll_offset/target);
			cursor.x = (float) (scroll.x + (scroll_off*scroll.w));
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_scrollbar(_out_, (uint) (state), style, &scroll, &cursor);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			return (float) (scroll_offset);
		}

		public static int nk_filter_default(nk_text_edit box, char unicode)
		{
			return (int) (nk_true);
		}

		public static int nk_filter_ascii(nk_text_edit box, char unicode)
		{
			if ((unicode) > (128)) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static int nk_filter_float(nk_text_edit box, char unicode)
		{
			if (((((unicode) < ('0')) || ((unicode) > ('9'))) && (unicode != '.')) && (unicode != '-')) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static int nk_filter_decimal(nk_text_edit box, char unicode)
		{
			if ((((unicode) < ('0')) || ((unicode) > ('9'))) && (unicode != '-')) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static int nk_filter_hex(nk_text_edit box, char unicode)
		{
			if (((((unicode) < ('0')) || ((unicode) > ('9'))) && (((unicode) < ('a')) || ((unicode) > ('f')))) &&
			    (((unicode) < ('A')) || ((unicode) > ('F')))) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static int nk_filter_oct(nk_text_edit box, char unicode)
		{
			if (((unicode) < ('0')) || ((unicode) > ('7'))) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static int nk_filter_binary(nk_text_edit box, char unicode)
		{
			if ((unicode != '0') && (unicode != '1')) return (int) (nk_false);
			else return (int) (nk_true);
		}

		public static void nk_edit_draw_text(nk_command_buffer _out_, nk_style_edit style, float pos_x, float pos_y,
			float x_offset, char* text, int byte_len, float row_height, nk_user_font font, nk_color background,
			nk_color foreground, int is_selected)
		{
			if ((((text == null) || (byte_len == 0)) || (_out_ == null)) || (style == null)) return;
			{
				int glyph_len = (int) (0);
				char unicode = (char) 0;
				int text_len = (int) (0);
				float line_width = (float) (0);
				float glyph_width;
				char* line = text;
				float line_offset = (float) (0);
				int line_count = (int) (0);
				nk_text txt = new nk_text();
				txt.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
				txt.background = (nk_color) (background);
				txt.text = (nk_color) (foreground);
				glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (byte_len - text_len)));
				if (glyph_len == 0) return;
				while (((text_len) < (byte_len)) && ((glyph_len) != 0))
				{
					if ((unicode) == ('\n'))
					{
						nk_rect label = new nk_rect();
						label.y = (float) (pos_y + line_offset);
						label.h = (float) (row_height);
						label.w = (float) (line_width);
						label.x = (float) (pos_x);
						if (line_count == 0) label.x += (float) (x_offset);
						if ((is_selected) != 0) nk_fill_rect(_out_, (nk_rect) (label), (float) (0), (nk_color) (background));
						nk_widget_text(_out_, (nk_rect) (label), line, (int) ((text + text_len) - line), &txt, (uint) (NK_TEXT_CENTERED),
							font);
						text_len++;
						line_count++;
						line_width = (float) (0);
						line = text + text_len;
						line_offset += (float) (row_height);
						glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (byte_len - text_len)));
						continue;
					}
					if ((unicode) == ('\r'))
					{
						text_len++;
						glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (byte_len - text_len)));
						continue;
					}
					glyph_width =
						(float) (font.width((nk_handle) (font.userdata), (float) (font.height), text + text_len, (int) (glyph_len)));
					line_width += (float) (glyph_width);
					text_len += (int) (glyph_len);
					glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (byte_len - text_len)));
					continue;
				}
				if ((line_width) > (0))
				{
					nk_rect label = new nk_rect();
					label.y = (float) (pos_y + line_offset);
					label.h = (float) (row_height);
					label.w = (float) (line_width);
					label.x = (float) (pos_x);
					if (line_count == 0) label.x += (float) (x_offset);
					if ((is_selected) != 0) nk_fill_rect(_out_, (nk_rect) (label), (float) (0), (nk_color) (background));
					nk_widget_text(_out_, (nk_rect) (label), line, (int) ((text + text_len) - line), &txt, (uint) (NK_TEXT_LEFT), font);
				}
			}

		}

		public static uint nk_do_edit(ref uint state, nk_command_buffer _out_, nk_rect bounds, uint flags,
			NkPluginFilter filter, nk_text_edit edit, nk_style_edit style, nk_input _in_, nk_user_font font)
		{
			nk_rect area = new nk_rect();
			uint ret = (uint) (0);
			float row_height;
			sbyte prev_state = (sbyte) (0);
			sbyte is_hovered = (sbyte) (0);
			sbyte select_all = (sbyte) (0);
			sbyte cursor_follow = (sbyte) (0);
			nk_rect old_clip = new nk_rect();
			nk_rect clip = new nk_rect();
			if (((state == null) || (_out_ == null)) || (style == null)) return (uint) (ret);
			area.x = (float) (bounds.x + style.padding.x + style.border);
			area.y = (float) (bounds.y + style.padding.y + style.border);
			area.w = (float) (bounds.w - (2.0f*style.padding.x + 2*style.border));
			area.h = (float) (bounds.h - (2.0f*style.padding.y + 2*style.border));
			if ((flags & NK_EDIT_MULTILINE) != 0)
				area.w = (float) ((0) < (area.w - style.scrollbar_size.x) ? (area.w - style.scrollbar_size.x) : (0));
			row_height = (float) ((flags & NK_EDIT_MULTILINE) != 0 ? font.height + style.row_padding : area.h);
			old_clip = (nk_rect) (_out_.clip);
			nk_unify(ref clip, ref old_clip, (float) (area.x), (float) (area.y), (float) (area.x + area.w),
				(float) (area.y + area.h));
			prev_state = ((sbyte) (edit.active));
			is_hovered = ((sbyte) (nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (bounds))));
			if ((((_in_) != null) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked) != 0)) &&
			    ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0))
			{
				edit.active =
					(byte)
						((((bounds.x) <= (_in_.mouse.pos.x)) && ((_in_.mouse.pos.x) < (bounds.x + bounds.w))) &&
						 (((bounds.y) <= (_in_.mouse.pos.y)) && ((_in_.mouse.pos.y) < (bounds.y + bounds.h)))
							? 1
							: 0);
			}

			if ((prev_state == 0) && ((edit.active) != 0))
			{
				int type = (int) ((flags & NK_EDIT_MULTILINE) != 0 ? NK_TEXT_EDIT_MULTI_LINE : NK_TEXT_EDIT_SINGLE_LINE);
				nk_textedit_clear_state(edit, (int) (type), filter);
				if ((flags & NK_EDIT_AUTO_SELECT) != 0) select_all = (sbyte) (nk_true);
				if ((flags & NK_EDIT_GOTO_END_ON_ACTIVATE) != 0)
				{
					edit.cursor = (int) (edit._string_.len);
					_in_ = null;
				}
			}
			else if (edit.active == 0) edit.mode = (byte) (NK_TEXT_EDIT_MODE_VIEW);
			if ((flags & NK_EDIT_READ_ONLY) != 0) edit.mode = (byte) (NK_TEXT_EDIT_MODE_VIEW);
			else if ((flags & NK_EDIT_ALWAYS_INSERT_MODE) != 0) edit.mode = (byte) (NK_TEXT_EDIT_MODE_INSERT);
			ret = (uint) ((edit.active) != 0 ? NK_EDIT_ACTIVE : NK_EDIT_INACTIVE);
			if (prev_state != edit.active) ret |= (uint) ((edit.active) != 0 ? NK_EDIT_ACTIVATED : NK_EDIT_DEACTIVATED);
			if (((edit.active) != 0) && ((_in_) != null))
			{
				int shift_mod = (int) (_in_.keyboard.keys[NK_KEY_SHIFT].down);
				float mouse_x = (float) ((_in_.mouse.pos.x - area.x) + edit.scrollbar.x);
				float mouse_y = (float) ((_in_.mouse.pos.y - area.y) + edit.scrollbar.y);
				is_hovered = ((sbyte) (nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (area))));
				if ((select_all) != 0)
				{
					nk_textedit_select_all(edit);
				}
				else if ((((is_hovered) != 0) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0)) &&
				         ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked) != 0))
				{
					nk_textedit_click(edit, (float) (mouse_x), (float) (mouse_y), font, (float) (row_height));
				}
				else if ((((is_hovered) != 0) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0)) &&
				         ((_in_.mouse.delta.x != 0.0f) || (_in_.mouse.delta.y != 0.0f)))
				{
					nk_textedit_drag(edit, (float) (mouse_x), (float) (mouse_y), font, (float) (row_height));
					cursor_follow = (sbyte) (nk_true);
				}
				else if ((((is_hovered) != 0) && ((_in_.mouse.buttons[NK_BUTTON_RIGHT].clicked) != 0)) &&
				         ((_in_.mouse.buttons[NK_BUTTON_RIGHT].down) != 0))
				{
					nk_textedit_key(edit, (int) (NK_KEY_TEXT_WORD_LEFT), (int) (nk_false), font, (float) (row_height));
					nk_textedit_key(edit, (int) (NK_KEY_TEXT_WORD_RIGHT), (int) (nk_true), font, (float) (row_height));
					cursor_follow = (sbyte) (nk_true);
				}
				{
					int i;
					int old_mode = (int) (edit.mode);
					for (i = (int) (0); (i) < (NK_KEY_MAX); ++i)
					{
						if (((i) == (NK_KEY_ENTER)) || ((i) == (NK_KEY_TAB))) continue;
						if ((nk_input_is_key_pressed(_in_, (int) (i))) != 0)
						{
							nk_textedit_key(edit, (int) (i), (int) (shift_mod), font, (float) (row_height));
							cursor_follow = (sbyte) (nk_true);
						}
					}
					if (old_mode != edit.mode)
					{
						_in_.keyboard.text_len = (int) (0);
					}
				}
				edit.filter = filter;
				if ((_in_.keyboard.text_len) != 0)
				{
					nk_textedit_text(edit, _in_.keyboard.text, (int) (_in_.keyboard.text_len));
					cursor_follow = (sbyte) (nk_true);
					_in_.keyboard.text_len = (int) (0);
				}
				if ((nk_input_is_key_pressed(_in_, (int) (NK_KEY_ENTER))) != 0)
				{
					cursor_follow = (sbyte) (nk_true);
					if (((flags & NK_EDIT_CTRL_ENTER_NEWLINE) != 0) && ((shift_mod) != 0)) nk_textedit_text(edit, "\n", (int) (1));
					else if ((flags & NK_EDIT_SIG_ENTER) != 0) ret |= (uint) (NK_EDIT_COMMITED);
					else nk_textedit_text(edit, "\n", (int) (1));
				}
				{
					int copy = (int) (nk_input_is_key_pressed(_in_, (int) (NK_KEY_COPY)));
					int cut = (int) (nk_input_is_key_pressed(_in_, (int) (NK_KEY_CUT)));
					if ((((copy) != 0) || ((cut) != 0)) && ((flags & NK_EDIT_CLIPBOARD) != 0))
					{
						int glyph_len = 0;
						char unicode;
						char* text;
						int b = (int) (edit.select_start);
						int e = (int) (edit.select_end);
						int begin = (int) ((b) < (e) ? (b) : (e));
						int end = (int) ((b) < (e) ? (e) : (b));
						text = nk_str_at_const(edit._string_, (int) (begin), &unicode, ref glyph_len);
						if ((edit.clip.copy) != null) edit.clip.copy((nk_handle) (edit.clip.userdata), text, (int) (end - begin));
						if (((cut) != 0) && ((flags & NK_EDIT_READ_ONLY) == 0))
						{
							nk_textedit_cut(edit);
							cursor_follow = (sbyte) (nk_true);
						}
					}
				}
				{
					int paste = (int) (nk_input_is_key_pressed(_in_, (int) (NK_KEY_PASTE)));
					if ((((paste) != 0) && ((flags & NK_EDIT_CLIPBOARD) != 0)) && ((edit.clip.paste) != null))
					{
						edit.clip.paste((nk_handle) (edit.clip.userdata), edit);
						cursor_follow = (sbyte) (nk_true);
					}
				}
				{
					int tab = (int) (nk_input_is_key_pressed(_in_, (int) (NK_KEY_TAB)));
					if (((tab) != 0) && ((flags & NK_EDIT_ALLOW_TAB) != 0))
					{
						nk_textedit_text(edit, "    ", (int) (4));
						cursor_follow = (sbyte) (nk_true);
					}
				}
			}

			if ((edit.active) != 0) state = (uint) (NK_WIDGET_STATE_ACTIVE);
			else if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if ((is_hovered) != 0) state |= (uint) (NK_WIDGET_STATE_HOVERED);
			{
				char* text = nk_str_get_const(edit._string_);
				int len = (int) (nk_str_len_char(edit._string_));
				{
					nk_style_item background;
					if ((state & NK_WIDGET_STATE_ACTIVED) != 0) background = style.active;
					else if ((state & NK_WIDGET_STATE_HOVER) != 0) background = style.hover;
					else background = style.normal;
					if ((background.type) == (NK_STYLE_ITEM_COLOR))
					{
						nk_stroke_rect(_out_, (nk_rect) (bounds), (float) (style.rounding), (float) (style.border),
							(nk_color) (style.border_color));
						nk_fill_rect(_out_, (nk_rect) (bounds), (float) (style.rounding), (nk_color) (background.data.color));
					}
					else nk_draw_image(_out_, (nk_rect) (bounds), background.data.image, (nk_color) (nk_white));
				}
				area.w = (float) ((0) < (area.w - style.cursor_size) ? (area.w - style.cursor_size) : (0));
				if ((edit.active) != 0)
				{
					int total_lines = (int) (1);
					nk_vec2 text_size = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
					char* cursor_ptr = null;
					char* select_begin_ptr = null;
					char* select_end_ptr = null;
					nk_vec2 cursor_pos = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
					nk_vec2 selection_offset_start = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
					nk_vec2 selection_offset_end = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
					int selection_begin = (int) ((edit.select_start) < (edit.select_end) ? (edit.select_start) : (edit.select_end));
					int selection_end = (int) ((edit.select_start) < (edit.select_end) ? (edit.select_end) : (edit.select_start));
					float line_width = (float) (0.0f);
					if (((text) != null) && ((len) != 0))
					{
						float glyph_width;
						int glyph_len = (int) (0);
						char unicode = (char) 0;
						int text_len = (int) (0);
						int glyphs = (int) (0);
						int row_begin = (int) (0);
						glyph_len = (int) (nk_utf_decode(text, &unicode, (int) (len)));
						glyph_width = (float) (font.width((nk_handle) (font.userdata), (float) (font.height), text, (int) (glyph_len)));
						line_width = (float) (0);
						while (((text_len) < (len)) && ((glyph_len) != 0))
						{
							if ((cursor_ptr == null) && ((glyphs) == (edit.cursor)))
							{
								int glyph_offset;
								nk_vec2 out_offset = new nk_vec2();
								nk_vec2 row_size = new nk_vec2();
								char* remaining;
								cursor_pos.y = (float) ((float) (total_lines - 1)*row_height);
								row_size =
									(nk_vec2)
										(nk_text_calculate_text_bounds(font, text + row_begin, (int) (text_len - row_begin), (float) (row_height),
											&remaining, &out_offset, &glyph_offset, (int) (NK_STOP_ON_NEW_LINE)));
								cursor_pos.x = (float) (row_size.x);
								cursor_ptr = text + text_len;
							}
							if (((select_begin_ptr == null) && (edit.select_start != edit.select_end)) && ((glyphs) == (selection_begin)))
							{
								int glyph_offset;
								nk_vec2 out_offset = new nk_vec2();
								nk_vec2 row_size = new nk_vec2();
								char* remaining;
								selection_offset_start.y = (float) ((float) ((total_lines - 1) < (0) ? (0) : (total_lines - 1))*row_height);
								row_size =
									(nk_vec2)
										(nk_text_calculate_text_bounds(font, text + row_begin, (int) (text_len - row_begin), (float) (row_height),
											&remaining, &out_offset, &glyph_offset, (int) (NK_STOP_ON_NEW_LINE)));
								selection_offset_start.x = (float) (row_size.x);
								select_begin_ptr = text + text_len;
							}
							if (((select_end_ptr == null) && (edit.select_start != edit.select_end)) && ((glyphs) == (selection_end)))
							{
								int glyph_offset;
								nk_vec2 out_offset = new nk_vec2();
								nk_vec2 row_size = new nk_vec2();
								char* remaining;
								selection_offset_end.y = (float) ((float) (total_lines - 1)*row_height);
								row_size =
									(nk_vec2)
										(nk_text_calculate_text_bounds(font, text + row_begin, (int) (text_len - row_begin), (float) (row_height),
											&remaining, &out_offset, &glyph_offset, (int) (NK_STOP_ON_NEW_LINE)));
								selection_offset_end.x = (float) (row_size.x);
								select_end_ptr = text + text_len;
							}
							if ((unicode) == ('\n'))
							{
								text_size.x = (float) ((text_size.x) < (line_width) ? (line_width) : (text_size.x));
								total_lines++;
								line_width = (float) (0);
								text_len++;
								glyphs++;
								row_begin = (int) (text_len);
								glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (len - text_len)));
								glyph_width =
									(float) (font.width((nk_handle) (font.userdata), (float) (font.height), text + text_len, (int) (glyph_len)));
								continue;
							}
							glyphs++;
							text_len += (int) (glyph_len);
							line_width += (float) (glyph_width);
							glyph_len = (int) (nk_utf_decode(text + text_len, &unicode, (int) (len - text_len)));
							glyph_width =
								(float) (font.width((nk_handle) (font.userdata), (float) (font.height), text + text_len, (int) (glyph_len)));
							continue;
						}
						text_size.y = (float) ((float) (total_lines)*row_height);
						if ((cursor_ptr == null) && ((edit.cursor) == (edit._string_.len)))
						{
							cursor_pos.x = (float) (line_width);
							cursor_pos.y = (float) (text_size.y - row_height);
						}
					}
					{
						if ((cursor_follow) != 0)
						{
							if ((flags & NK_EDIT_NO_HORIZONTAL_SCROLL) == 0)
							{
								float scroll_increment = (float) (area.w*0.25f);
								if ((cursor_pos.x) < (edit.scrollbar.x))
									edit.scrollbar.x =
										((float) ((int) ((0.0f) < (cursor_pos.x - scroll_increment) ? (cursor_pos.x - scroll_increment) : (0.0f))));
								if ((cursor_pos.x) >= (edit.scrollbar.x + area.w))
									edit.scrollbar.x = ((float) ((int) ((0.0f) < (cursor_pos.x) ? (cursor_pos.x) : (0.0f))));
							}
							else edit.scrollbar.x = (float) (0);
							if ((flags & NK_EDIT_MULTILINE) != 0)
							{
								if ((cursor_pos.y) < (edit.scrollbar.y))
									edit.scrollbar.y = (float) ((0.0f) < (cursor_pos.y - row_height) ? (cursor_pos.y - row_height) : (0.0f));
								if ((cursor_pos.y) >= (edit.scrollbar.y + area.h)) edit.scrollbar.y = (float) (edit.scrollbar.y + row_height);
							}
							else edit.scrollbar.y = (float) (0);
						}
						if ((flags & NK_EDIT_MULTILINE) != 0)
						{
							uint ws = 0;
							nk_rect scroll = new nk_rect();
							float scroll_target;
							float scroll_offset;
							float scroll_step;
							float scroll_inc;
							scroll = (nk_rect) (area);
							scroll.x = (float) ((bounds.x + bounds.w - style.border) - style.scrollbar_size.x);
							scroll.w = (float) (style.scrollbar_size.x);
							scroll_offset = (float) (edit.scrollbar.y);
							scroll_step = (float) (scroll.h*0.10f);
							scroll_inc = (float) (scroll.h*0.01f);
							scroll_target = (float) (text_size.y);
							edit.scrollbar.y =
								(float)
									(nk_do_scrollbarv(ref ws, _out_, (nk_rect) (scroll), (int) (0), (float) (scroll_offset),
										(float) (scroll_target), (float) (scroll_step), (float) (scroll_inc), style.scrollbar, _in_, font));
						}
					}
					{
						nk_color background_color = new nk_color();
						nk_color text_color = new nk_color();
						nk_color sel_background_color = new nk_color();
						nk_color sel_text_color = new nk_color();
						nk_color cursor_color = new nk_color();
						nk_color cursor_text_color = new nk_color();
						nk_style_item background;
						nk_push_scissor(_out_, (nk_rect) (clip));
						if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
						{
							background = style.active;
							text_color = (nk_color) (style.text_active);
							sel_text_color = (nk_color) (style.selected_text_hover);
							sel_background_color = (nk_color) (style.selected_hover);
							cursor_color = (nk_color) (style.cursor_hover);
							cursor_text_color = (nk_color) (style.cursor_text_hover);
						}
						else if ((state & NK_WIDGET_STATE_HOVER) != 0)
						{
							background = style.hover;
							text_color = (nk_color) (style.text_hover);
							sel_text_color = (nk_color) (style.selected_text_hover);
							sel_background_color = (nk_color) (style.selected_hover);
							cursor_text_color = (nk_color) (style.cursor_text_hover);
							cursor_color = (nk_color) (style.cursor_hover);
						}
						else
						{
							background = style.normal;
							text_color = (nk_color) (style.text_normal);
							sel_text_color = (nk_color) (style.selected_text_normal);
							sel_background_color = (nk_color) (style.selected_normal);
							cursor_color = (nk_color) (style.cursor_normal);
							cursor_text_color = (nk_color) (style.cursor_text_normal);
						}
						if ((background.type) == (NK_STYLE_ITEM_IMAGE))
							background_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
						else background_color = (nk_color) (background.data.color);
						if ((edit.select_start) == (edit.select_end))
						{
							char* begin = nk_str_get_const(edit._string_);
							int l = (int) (nk_str_len_char(edit._string_));
							nk_edit_draw_text(_out_, style, (float) (area.x - edit.scrollbar.x), (float) (area.y - edit.scrollbar.y),
								(float) (0), begin, (int) (l), (float) (row_height), font, (nk_color) (background_color),
								(nk_color) (text_color), (int) (nk_false));
						}
						else
						{
							if ((edit.select_start != edit.select_end) && ((selection_begin) > (0)))
							{
								char* begin = nk_str_get_const(edit._string_);
								nk_edit_draw_text(_out_, style, (float) (area.x - edit.scrollbar.x), (float) (area.y - edit.scrollbar.y),
									(float) (0), begin, (int) (select_begin_ptr - begin), (float) (row_height), font, (nk_color) (background_color),
									(nk_color) (text_color), (int) (nk_false));
							}
							if (edit.select_start != edit.select_end)
							{
								if (select_end_ptr == null)
								{
									char* begin = nk_str_get_const(edit._string_);
									select_end_ptr = begin + nk_str_len_char(edit._string_);
								}
								nk_edit_draw_text(_out_, style, (float) (area.x - edit.scrollbar.x),
									(float) (area.y + selection_offset_start.y - edit.scrollbar.y), (float) (selection_offset_start.x),
									select_begin_ptr, (int) (select_end_ptr - select_begin_ptr), (float) (row_height), font,
									(nk_color) (sel_background_color), (nk_color) (sel_text_color), (int) (nk_true));
							}
							if (((edit.select_start != edit.select_end) && ((selection_end) < (edit._string_.len))))
							{
								char* begin = select_end_ptr;
								char* end = nk_str_get_const(edit._string_) + nk_str_len_char(edit._string_);
								nk_edit_draw_text(_out_, style, (float) (area.x - edit.scrollbar.x),
									(float) (area.y + selection_offset_end.y - edit.scrollbar.y), (float) (selection_offset_end.x), begin,
									(int) (end - begin), (float) (row_height), font, (nk_color) (background_color), (nk_color) (text_color),
									(int) (nk_true));
							}
						}
						if ((edit.select_start) == (edit.select_end))
						{
							if (((edit.cursor) >= (nk_str_len(edit._string_))) || (((cursor_ptr) != null) && ((*cursor_ptr) == ('\n'))))
							{
								nk_rect cursor = new nk_rect();
								cursor.w = (float) (style.cursor_size);
								cursor.h = (float) (font.height);
								cursor.x = (float) (area.x + cursor_pos.x - edit.scrollbar.x);
								cursor.y = (float) (area.y + cursor_pos.y + row_height/2.0f - cursor.h/2.0f);
								cursor.y -= (float) (edit.scrollbar.y);
								nk_fill_rect(_out_, (nk_rect) (cursor), (float) (0), (nk_color) (cursor_color));
							}
							else
							{
								int glyph_len;
								nk_rect label = new nk_rect();
								nk_text txt = new nk_text();
								char unicode;
								glyph_len = (int) (nk_utf_decode(cursor_ptr, &unicode, (int) (4)));
								label.x = (float) (area.x + cursor_pos.x - edit.scrollbar.x);
								label.y = (float) (area.y + cursor_pos.y - edit.scrollbar.y);
								label.w =
									(float) (font.width((nk_handle) (font.userdata), (float) (font.height), cursor_ptr, (int) (glyph_len)));
								label.h = (float) (row_height);
								txt.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
								txt.background = (nk_color) (cursor_color);
								txt.text = (nk_color) (cursor_text_color);
								nk_fill_rect(_out_, (nk_rect) (label), (float) (0), (nk_color) (cursor_color));
								nk_widget_text(_out_, (nk_rect) (label), cursor_ptr, (int) (glyph_len), &txt, (uint) (NK_TEXT_LEFT), font);
							}
						}
					}
				}
				else
				{
					int l = (int) (nk_str_len_char(edit._string_));
					char* begin = nk_str_get_const(edit._string_);
					nk_style_item background;
					nk_color background_color = new nk_color();
					nk_color text_color = new nk_color();
					nk_push_scissor(_out_, (nk_rect) (clip));
					if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
					{
						background = style.active;
						text_color = (nk_color) (style.text_active);
					}
					else if ((state & NK_WIDGET_STATE_HOVER) != 0)
					{
						background = style.hover;
						text_color = (nk_color) (style.text_hover);
					}
					else
					{
						background = style.normal;
						text_color = (nk_color) (style.text_normal);
					}
					if ((background.type) == (NK_STYLE_ITEM_IMAGE))
						background_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
					else background_color = (nk_color) (background.data.color);
					nk_edit_draw_text(_out_, style, (float) (area.x - edit.scrollbar.x), (float) (area.y - edit.scrollbar.y),
						(float) (0), begin, (int) (l), (float) (row_height), font, (nk_color) (background_color), (nk_color) (text_color),
						(int) (nk_false));
				}
				nk_push_scissor(_out_, (nk_rect) (old_clip));
			}

			return (uint) (ret);
		}

		public static void nk_drag_behavior(ref uint state, nk_input _in_, nk_rect drag, nk_property_variant* variant,
			float inc_per_pixel)
		{
			int left_mouse_down =
				(int) (((_in_) != null) && ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down) != 0) ? 1 : 0);
			int left_mouse_click_in_cursor =
				(int)
					(((_in_) != null) &&
					 ((nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (drag), (int) (nk_true))) != 0)
						? 1
						: 0);
			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if ((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (drag))) != 0) state = (uint) (NK_WIDGET_STATE_HOVERED);
			if (((left_mouse_down) != 0) && ((left_mouse_click_in_cursor) != 0))
			{
				float delta;
				float pixels;
				pixels = (float) (_in_.mouse.delta.x);
				delta = (float) (pixels*inc_per_pixel);
				switch (variant->kind)
				{
					default:
						break;
					case NK_PROPERTY_INT:
						variant->value.i = (int) (variant->value.i + (int) (delta));
						variant->value.i =
							(int)
								(((variant->value.i) < (variant->max_value.i) ? (variant->value.i) : (variant->max_value.i)) <
								 (variant->min_value.i)
									? (variant->min_value.i)
									: ((variant->value.i) < (variant->max_value.i) ? (variant->value.i) : (variant->max_value.i)));
						break;
					case NK_PROPERTY_FLOAT:
						variant->value.f = (float) (variant->value.f + delta);
						variant->value.f =
							(float)
								(((variant->value.f) < (variant->max_value.f) ? (variant->value.f) : (variant->max_value.f)) <
								 (variant->min_value.f)
									? (variant->min_value.f)
									: ((variant->value.f) < (variant->max_value.f) ? (variant->value.f) : (variant->max_value.f)));
						break;
					case NK_PROPERTY_DOUBLE:
						variant->value.d = (double) (variant->value.d + (double) (delta));
						variant->value.d =
							(double)
								(((variant->value.d) < (variant->max_value.d) ? (variant->value.d) : (variant->max_value.d)) <
								 (variant->min_value.d)
									? (variant->min_value.d)
									: ((variant->value.d) < (variant->max_value.d) ? (variant->value.d) : (variant->max_value.d)));
						break;
				}
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
			}

			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (drag)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (drag))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
		}

		public static void nk_property_behavior(ref uint ws, nk_input _in_, nk_rect property, nk_rect label, nk_rect edit,
			nk_rect empty, ref int state, nk_property_variant* variant, float inc_per_pixel)
		{
			if (((_in_) != null) && ((state) == (NK_PROPERTY_DEFAULT)))
			{
				if ((nk_button_behavior(ref ws, (nk_rect) (edit), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
					state = (int) (NK_PROPERTY_EDIT);
				else if ((nk_input_is_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (label), (int) (nk_true))) != 0)
					state = (int) (NK_PROPERTY_DRAG);
				else if ((nk_input_is_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (empty), (int) (nk_true))) != 0)
					state = (int) (NK_PROPERTY_DRAG);
			}

			if ((state) == (NK_PROPERTY_DRAG))
			{
				nk_drag_behavior(ref ws, _in_, (nk_rect) (property), variant, (float) (inc_per_pixel));
				if ((ws & NK_WIDGET_STATE_ACTIVED) == 0) state = (int) (NK_PROPERTY_DEFAULT);
			}

		}

		public static void nk_draw_property(nk_command_buffer _out_, nk_style_property style, nk_rect* bounds, nk_rect* label,
			uint state, char* name, int len, nk_user_font font)
		{
			nk_text text = new nk_text();
			nk_style_item background;
			if ((state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.active;
				text.text = (nk_color) (style.label_active);
			}
			else if ((state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.hover;
				text.text = (nk_color) (style.label_hover);
			}
			else
			{
				background = style.normal;
				text.text = (nk_color) (style.label_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(_out_, (nk_rect) (*bounds), background.data.image, (nk_color) (nk_white));
				text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			}
			else
			{
				text.background = (nk_color) (background.data.color);
				nk_fill_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(_out_, (nk_rect) (*bounds), (float) (style.rounding), (float) (style.border),
					(nk_color) (background.data.color));
			}

			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_widget_text(_out_, (nk_rect) (*label), name, (int) (len), &text, (uint) (NK_TEXT_CENTERED), font);
		}

		public static void nk_do_property(ref uint ws, nk_command_buffer _out_, nk_rect property, char* name,
			nk_property_variant* variant, float inc_per_pixel, char* buffer, ref int len, ref int state, ref int cursor,
			ref int select_begin, ref int select_end, nk_style_property style, int filter, nk_input _in_, nk_user_font font,
			nk_text_edit text_edit, int behavior)
		{
			NkPluginFilter[] filters = new NkPluginFilter[2];
			filters[0] = nk_filter_decimal;
			filters[1] = nk_filter_float;

			int active;
			int old;
			int num_len = 0;
			int name_len;
			char* _string_ = stackalloc char[64];
			float size;
			char* dst = null;
			bool length_is_len = false;
			int length;
			nk_rect left = new nk_rect();
			nk_rect right = new nk_rect();
			nk_rect label = new nk_rect();
			nk_rect edit = new nk_rect();
			nk_rect empty = new nk_rect();
			left.h = (float) (font.height/2);
			left.w = (float) (left.h);
			left.x = (float) (property.x + style.border + style.padding.x);
			left.y = (float) (property.y + style.border + property.h/2.0f - left.h/2);
			name_len = (int) (nk_strlen(name));
			size = (float) (font.width((nk_handle) (font.userdata), (float) (font.height), name, (int) (name_len)));
			label.x = (float) (left.x + left.w + style.padding.x);
			label.w = (float) (size + 2*style.padding.x);
			label.y = (float) (property.y + style.border + style.padding.y);
			label.h = (float) (property.h - (2*style.border + 2*style.padding.y));
			right.y = (float) (left.y);
			right.w = (float) (left.w);
			right.h = (float) (left.h);
			right.x = (float) (property.x + property.w - (right.w + style.padding.x));
			if ((state) == (NK_PROPERTY_EDIT))
			{
				size = (float) (font.width((nk_handle) (font.userdata), (float) (font.height), buffer, (int) (len)));
				size += (float) (style.edit.cursor_size);
				length = len;
				length_is_len = true;
				dst = buffer;
			}
			else
			{
				switch (variant->kind)
				{
					default:
						break;
					case NK_PROPERTY_INT:
						nk_itoa(_string_, (int) (variant->value.i));
						num_len = (int) (nk_strlen(_string_));
						break;
					case NK_PROPERTY_FLOAT:
						nk_dtoa(_string_, (double) (variant->value.f));
						num_len = (int) (nk_string_float_limit(_string_, (int) (2)));
						break;
					case NK_PROPERTY_DOUBLE:
						nk_dtoa(_string_, (double) (variant->value.d));
						num_len = (int) (nk_string_float_limit(_string_, (int) (2)));
						break;
				}
				size = (float) (font.width((nk_handle) (font.userdata), (float) (font.height), _string_, (int) (num_len)));
				dst = _string_;
				length = num_len;
			}

			edit.w = (float) (size + 2*style.padding.x);
			edit.w = (float) ((edit.w) < (right.x - (label.x + label.w)) ? (edit.w) : (right.x - (label.x + label.w)));
			edit.x = (float) (right.x - (edit.w + style.padding.x));
			edit.y = (float) (property.y + style.border);
			edit.h = (float) (property.h - (2*style.border));
			empty.w = (float) (edit.x - (label.x + label.w));
			empty.x = (float) (label.x + label.w);
			empty.y = (float) (property.y);
			empty.h = (float) (property.h);
			old = (int) ((state) == (NK_PROPERTY_EDIT) ? 1 : 0);
			nk_property_behavior(ref ws, _in_, (nk_rect) (property), (nk_rect) (label), (nk_rect) (edit), (nk_rect) (empty),
				ref state, variant, (float) (inc_per_pixel));
			if ((style.draw_begin) != null) style.draw_begin(_out_, (nk_handle) (style.userdata));
			nk_draw_property(_out_, style, &property, &label, (uint) (ws), name, (int) (name_len), font);
			if ((style.draw_end) != null) style.draw_end(_out_, (nk_handle) (style.userdata));
			if (
				(nk_do_button_symbol(ref ws, _out_, (nk_rect) (left), (int) (style.sym_left), (int) (behavior), style.dec_button,
					_in_, font)) != 0)
			{
				switch (variant->kind)
				{
					default:
						break;
					case NK_PROPERTY_INT:
						variant->value.i =
							(int)
								(((variant->value.i - variant->step.i) < (variant->max_value.i)
									? (variant->value.i - variant->step.i)
									: (variant->max_value.i)) < (variant->min_value.i)
									? (variant->min_value.i)
									: ((variant->value.i - variant->step.i) < (variant->max_value.i)
										? (variant->value.i - variant->step.i)
										: (variant->max_value.i)));
						break;
					case NK_PROPERTY_FLOAT:
						variant->value.f =
							(float)
								(((variant->value.f - variant->step.f) < (variant->max_value.f)
									? (variant->value.f - variant->step.f)
									: (variant->max_value.f)) < (variant->min_value.f)
									? (variant->min_value.f)
									: ((variant->value.f - variant->step.f) < (variant->max_value.f)
										? (variant->value.f - variant->step.f)
										: (variant->max_value.f)));
						break;
					case NK_PROPERTY_DOUBLE:
						variant->value.d =
							(double)
								(((variant->value.d - variant->step.d) < (variant->max_value.d)
									? (variant->value.d - variant->step.d)
									: (variant->max_value.d)) < (variant->min_value.d)
									? (variant->min_value.d)
									: ((variant->value.d - variant->step.d) < (variant->max_value.d)
										? (variant->value.d - variant->step.d)
										: (variant->max_value.d)));
						break;
				}
			}

			if (
				(nk_do_button_symbol(ref ws, _out_, (nk_rect) (right), (int) (style.sym_right), (int) (behavior), style.inc_button,
					_in_, font)) != 0)
			{
				switch (variant->kind)
				{
					default:
						break;
					case NK_PROPERTY_INT:
						variant->value.i =
							(int)
								(((variant->value.i + variant->step.i) < (variant->max_value.i)
									? (variant->value.i + variant->step.i)
									: (variant->max_value.i)) < (variant->min_value.i)
									? (variant->min_value.i)
									: ((variant->value.i + variant->step.i) < (variant->max_value.i)
										? (variant->value.i + variant->step.i)
										: (variant->max_value.i)));
						break;
					case NK_PROPERTY_FLOAT:
						variant->value.f =
							(float)
								(((variant->value.f + variant->step.f) < (variant->max_value.f)
									? (variant->value.f + variant->step.f)
									: (variant->max_value.f)) < (variant->min_value.f)
									? (variant->min_value.f)
									: ((variant->value.f + variant->step.f) < (variant->max_value.f)
										? (variant->value.f + variant->step.f)
										: (variant->max_value.f)));
						break;
					case NK_PROPERTY_DOUBLE:
						variant->value.d =
							(double)
								(((variant->value.d + variant->step.d) < (variant->max_value.d)
									? (variant->value.d + variant->step.d)
									: (variant->max_value.d)) < (variant->min_value.d)
									? (variant->min_value.d)
									: ((variant->value.d + variant->step.d) < (variant->max_value.d)
										? (variant->value.d + variant->step.d)
										: (variant->max_value.d)));
						break;
				}
			}

			if ((old != NK_PROPERTY_EDIT) && ((state) == (NK_PROPERTY_EDIT)))
			{
				nk_memcopy(buffer, dst, (ulong) (length));
				cursor = (int) (nk_utf_len(buffer, (int) (length)));
				len = (int) (length);
				length = len;
				dst = buffer;
				active = (int) (0);
			}
			else active = (int) ((state) == (NK_PROPERTY_EDIT) ? 1 : 0);
			nk_textedit_clear_state(text_edit, (int) (NK_TEXT_EDIT_SINGLE_LINE), filters[filter]);
			text_edit.active = ((byte) (active));
			text_edit._string_.len = (int) (length);
			text_edit.cursor =
				(int) (((cursor) < (length) ? (cursor) : (length)) < (0) ? (0) : ((cursor) < (length) ? (cursor) : (length)));
			text_edit.select_start =
				(int)
					(((select_begin) < (length) ? (select_begin) : (length)) < (0)
						? (0)
						: ((select_begin) < (length) ? (select_begin) : (length)));
			text_edit.select_end =
				(int)
					(((select_end) < (length) ? (select_end) : (length)) < (0)
						? (0)
						: ((select_end) < (length) ? (select_end) : (length)));
			text_edit._string_.buffer.allocated = ((ulong) (length));
			text_edit._string_.buffer.memory.size = (ulong) (64);
			text_edit._string_.buffer.memory.ptr = dst;
			text_edit._string_.buffer.size = (ulong) (64);
			text_edit.mode = (byte) (NK_TEXT_EDIT_MODE_INSERT);
			nk_do_edit(ref ws, _out_, (nk_rect) (edit), (uint) (NK_EDIT_FIELD | NK_EDIT_AUTO_SELECT), filters[filter], text_edit,
				style.edit, ((state) == (NK_PROPERTY_EDIT)) ? _in_ : null, font);
			if (length_is_len)
			{
				len = (int) (text_edit._string_.len);
			}
			cursor = (int) (text_edit.cursor);
			select_begin = (int) (text_edit.select_start);
			select_end = (int) (text_edit.select_end);
			if (((text_edit.active) != 0) && ((nk_input_is_key_pressed(_in_, (int) (NK_KEY_ENTER))) != 0))
				text_edit.active = (byte) (nk_false);
			if (((active) != 0) && (text_edit.active == 0))
			{
				state = (int) (NK_PROPERTY_DEFAULT);
				buffer[len] = ('\0');
				switch (variant->kind)
				{
					default:
						break;
					case NK_PROPERTY_INT:
						variant->value.i = (int) (nk_strtoi(buffer, null));
						variant->value.i =
							(int)
								(((variant->value.i) < (variant->max_value.i) ? (variant->value.i) : (variant->max_value.i)) <
								 (variant->min_value.i)
									? (variant->min_value.i)
									: ((variant->value.i) < (variant->max_value.i) ? (variant->value.i) : (variant->max_value.i)));
						break;
					case NK_PROPERTY_FLOAT:
						nk_string_float_limit(buffer, (int) (2));
						variant->value.f = (float) (nk_strtof(buffer, null));
						variant->value.f =
							(float)
								(((variant->value.f) < (variant->max_value.f) ? (variant->value.f) : (variant->max_value.f)) <
								 (variant->min_value.f)
									? (variant->min_value.f)
									: ((variant->value.f) < (variant->max_value.f) ? (variant->value.f) : (variant->max_value.f)));
						break;
					case NK_PROPERTY_DOUBLE:
						nk_string_float_limit(buffer, (int) (2));
						variant->value.d = (double) (nk_strtod(buffer, null));
						variant->value.d =
							(double)
								(((variant->value.d) < (variant->max_value.d) ? (variant->value.d) : (variant->max_value.d)) <
								 (variant->min_value.d)
									? (variant->min_value.d)
									: ((variant->value.d) < (variant->max_value.d) ? (variant->value.d) : (variant->max_value.d)));
						break;
				}
			}

		}

		public static int nk_color_picker_behavior(ref uint state, nk_rect* bounds, nk_rect* matrix, nk_rect* hue_bar,
			nk_rect* alpha_bar, nk_colorf* color, nk_input _in_)
		{
			float* hsva = stackalloc float[4];
			int value_changed = (int) (0);
			int hsv_changed = (int) (0);
			nk_colorf_hsva_fv(hsva, (nk_colorf) (*color));
			if ((nk_button_behavior(ref state, (nk_rect) (*matrix), _in_, (int) (NK_BUTTON_REPEATER))) != 0)
			{
				hsva[1] =
					(float)
						((0) <
						 ((1.0f) < ((_in_.mouse.pos.x - matrix->x)/(matrix->w - 1))
							 ? (1.0f)
							 : ((_in_.mouse.pos.x - matrix->x)/(matrix->w - 1)))
							? ((1.0f) < ((_in_.mouse.pos.x - matrix->x)/(matrix->w - 1))
								? (1.0f)
								: ((_in_.mouse.pos.x - matrix->x)/(matrix->w - 1)))
							: (0));
				hsva[2] =
					(float)
						(1.0f -
						 ((0) <
						  ((1.0f) < ((_in_.mouse.pos.y - matrix->y)/(matrix->h - 1))
							  ? (1.0f)
							  : ((_in_.mouse.pos.y - matrix->y)/(matrix->h - 1)))
							 ? ((1.0f) < ((_in_.mouse.pos.y - matrix->y)/(matrix->h - 1))
								 ? (1.0f)
								 : ((_in_.mouse.pos.y - matrix->y)/(matrix->h - 1)))
							 : (0)));
				value_changed = (int) (hsv_changed = (int) (1));
			}

			if ((nk_button_behavior(ref state, (nk_rect) (*hue_bar), _in_, (int) (NK_BUTTON_REPEATER))) != 0)
			{
				hsva[0] =
					(float)
						((0) <
						 ((1.0f) < ((_in_.mouse.pos.y - hue_bar->y)/(hue_bar->h - 1))
							 ? (1.0f)
							 : ((_in_.mouse.pos.y - hue_bar->y)/(hue_bar->h - 1)))
							? ((1.0f) < ((_in_.mouse.pos.y - hue_bar->y)/(hue_bar->h - 1))
								? (1.0f)
								: ((_in_.mouse.pos.y - hue_bar->y)/(hue_bar->h - 1)))
							: (0));
				value_changed = (int) (hsv_changed = (int) (1));
			}

			if ((alpha_bar) != null)
			{
				if ((nk_button_behavior(ref state, (nk_rect) (*alpha_bar), _in_, (int) (NK_BUTTON_REPEATER))) != 0)
				{
					hsva[3] =
						(float)
							(1.0f -
							 ((0) <
							  ((1.0f) < ((_in_.mouse.pos.y - alpha_bar->y)/(alpha_bar->h - 1))
								  ? (1.0f)
								  : ((_in_.mouse.pos.y - alpha_bar->y)/(alpha_bar->h - 1)))
								 ? ((1.0f) < ((_in_.mouse.pos.y - alpha_bar->y)/(alpha_bar->h - 1))
									 ? (1.0f)
									 : ((_in_.mouse.pos.y - alpha_bar->y)/(alpha_bar->h - 1)))
								 : (0)));
					value_changed = (int) (1);
				}
			}

			if (((state) & NK_WIDGET_STATE_MODIFIED) != 0)
				(state) = (uint) (NK_WIDGET_STATE_INACTIVE | NK_WIDGET_STATE_MODIFIED);
			else (state) = (uint) (NK_WIDGET_STATE_INACTIVE);
			if ((hsv_changed) != 0)
			{
				*color = (nk_colorf) (nk_hsva_colorfv(hsva));
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
			}

			if ((value_changed) != 0)
			{
				color->a = (float) (hsva[3]);
				state = (uint) (NK_WIDGET_STATE_ACTIVE);
			}

			if ((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (*bounds))) != 0) state = (uint) (NK_WIDGET_STATE_HOVERED);
			if (((state & NK_WIDGET_STATE_HOVER) != 0) && (nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (*bounds)) == 0))
				state |= (uint) (NK_WIDGET_STATE_ENTERED);
			else if ((nk_input_is_mouse_prev_hovering_rect(_in_, (nk_rect) (*bounds))) != 0) state |= (uint) (NK_WIDGET_STATE_LEFT);
			return (int) (value_changed);
		}

		public static void nk_draw_color_picker(nk_command_buffer o, nk_rect* matrix, nk_rect* hue_bar, nk_rect* alpha_bar,
			nk_colorf col)
		{
			nk_color black = (nk_color) (nk_black);
			nk_color white = (nk_color) (nk_white);
			nk_color black_trans = new nk_color();
			float crosshair_size = (float) (7.0f);
			nk_color temp = new nk_color();
			float* hsva = stackalloc float[4];
			float line_y;
			int i;
			nk_colorf_hsva_fv(hsva, (nk_colorf) (col));
			for (i = (int) (0); (i) < (6); ++i)
			{
				nk_fill_rect_multi_color(o,
					(nk_rect)
						(nk_rect_((float) (hue_bar->x), (float) (hue_bar->y + (float) (i)*(hue_bar->h/6.0f) + 0.5f), (float) (hue_bar->w),
							(float) ((hue_bar->h/6.0f) + 0.5f))), (nk_color) (hue_colors[i]), (nk_color) (hue_colors[i]),
					(nk_color) (hue_colors[i + 1]), (nk_color) (hue_colors[i + 1]));
			}
			line_y = ((float) ((int) (hue_bar->y + hsva[0]*matrix->h + 0.5f)));
			nk_stroke_line(o, (float) (hue_bar->x - 1), (float) (line_y), (float) (hue_bar->x + hue_bar->w + 2), (float) (line_y),
				(float) (1), (nk_color) (nk_rgb((int) (255), (int) (255), (int) (255))));
			if ((alpha_bar) != null)
			{
				float alpha = (float) ((0) < ((1.0f) < (col.a) ? (1.0f) : (col.a)) ? ((1.0f) < (col.a) ? (1.0f) : (col.a)) : (0));
				line_y = ((float) ((int) (alpha_bar->y + (1.0f - alpha)*matrix->h + 0.5f)));
				nk_fill_rect_multi_color(o, (nk_rect) (*alpha_bar), (nk_color) (white), (nk_color) (white), (nk_color) (black),
					(nk_color) (black));
				nk_stroke_line(o, (float) (alpha_bar->x - 1), (float) (line_y), (float) (alpha_bar->x + alpha_bar->w + 2),
					(float) (line_y), (float) (1), (nk_color) (nk_rgb((int) (255), (int) (255), (int) (255))));
			}

			temp = (nk_color) (nk_hsv_f((float) (hsva[0]), (float) (1.0f), (float) (1.0f)));
			nk_fill_rect_multi_color(o, (nk_rect) (*matrix), (nk_color) (white), (nk_color) (temp), (nk_color) (temp),
				(nk_color) (white));
			nk_fill_rect_multi_color(o, (nk_rect) (*matrix), (nk_color) (black_trans), (nk_color) (black_trans),
				(nk_color) (black), (nk_color) (black));
			{
				nk_vec2 p = new nk_vec2();
				float S = (float) (hsva[1]);
				float V = (float) (hsva[2]);
				p.x = ((float) ((int) (matrix->x + S*matrix->w)));
				p.y = ((float) ((int) (matrix->y + (1.0f - V)*matrix->h)));
				nk_stroke_line(o, (float) (p.x - crosshair_size), (float) (p.y), (float) (p.x - 2), (float) (p.y), (float) (1.0f),
					(nk_color) (white));
				nk_stroke_line(o, (float) (p.x + crosshair_size + 1), (float) (p.y), (float) (p.x + 3), (float) (p.y),
					(float) (1.0f), (nk_color) (white));
				nk_stroke_line(o, (float) (p.x), (float) (p.y + crosshair_size + 1), (float) (p.x), (float) (p.y + 3),
					(float) (1.0f), (nk_color) (white));
				nk_stroke_line(o, (float) (p.x), (float) (p.y - crosshair_size), (float) (p.x), (float) (p.y - 2), (float) (1.0f),
					(nk_color) (white));
			}

		}

		public static int nk_do_color_picker(ref uint state, nk_command_buffer _out_, nk_colorf* col, int fmt, nk_rect bounds,
			nk_vec2 padding, nk_input _in_, nk_user_font font)
		{
			int ret = (int) (0);
			nk_rect matrix = new nk_rect();
			nk_rect hue_bar = new nk_rect();
			nk_rect alpha_bar = new nk_rect();
			float bar_w;
			if ((((_out_ == null) || (col == null)) || (state == null)) || (font == null)) return (int) (ret);
			bar_w = (float) (font.height);
			bounds.x += (float) (padding.x);
			bounds.y += (float) (padding.x);
			bounds.w -= (float) (2*padding.x);
			bounds.h -= (float) (2*padding.y);
			matrix.x = (float) (bounds.x);
			matrix.y = (float) (bounds.y);
			matrix.h = (float) (bounds.h);
			matrix.w = (float) (bounds.w - (3*padding.x + 2*bar_w));
			hue_bar.w = (float) (bar_w);
			hue_bar.y = (float) (bounds.y);
			hue_bar.h = (float) (matrix.h);
			hue_bar.x = (float) (matrix.x + matrix.w + padding.x);
			alpha_bar.x = (float) (hue_bar.x + hue_bar.w + padding.x);
			alpha_bar.y = (float) (bounds.y);
			alpha_bar.w = (float) (bar_w);
			alpha_bar.h = (float) (matrix.h);
			ret =
				(int)
					(nk_color_picker_behavior(ref state, &bounds, &matrix, &hue_bar, ((fmt) == (NK_RGBA)) ? &alpha_bar : null, col,
						_in_));
			nk_draw_color_picker(_out_, &matrix, &hue_bar, ((fmt) == (NK_RGBA)) ? &alpha_bar : null, (nk_colorf) (*col));
			return (int) (ret);
		}

		public static void nk_style_default(nk_context ctx)
		{
			nk_style_from_table(ctx, null);
		}

		public static nk_style_item nk_style_item_image(nk_image img)
		{
			nk_style_item i = new nk_style_item();
			i.type = (int) (NK_STYLE_ITEM_IMAGE);
			i.data.image = (nk_image) (img);
			return (nk_style_item) (i);
		}

		public static nk_style_item nk_style_item_color(nk_color col)
		{
			nk_style_item i = new nk_style_item();
			i.type = (int) (NK_STYLE_ITEM_COLOR);
			i.data.color = (nk_color) (col);
			return (nk_style_item) (i);
		}

		public static nk_style_item nk_style_item_hide()
		{
			nk_style_item i = new nk_style_item();
			i.type = (int) (NK_STYLE_ITEM_COLOR);
			i.data.color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			return (nk_style_item) (i);
		}

		public static void nk_style_from_table(nk_context ctx, nk_color[] table)
		{
			nk_style style;
			nk_style_text text;
			nk_style_button button;
			nk_style_toggle toggle;
			nk_style_selectable select;
			nk_style_slider slider;
			nk_style_progress prog;
			nk_style_scrollbar scroll;
			nk_style_edit edit;
			nk_style_property property;
			nk_style_combo combo;
			nk_style_chart chart;
			nk_style_tab tab;
			nk_style_window win;
			if (ctx == null) return;
			style = ctx.style;
			table = (table == null) ? nk_default_color_style : table;
			text = style.text;
			text.color = (nk_color) (table[NK_COLOR_TEXT]);
			text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			button = style.button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_BUTTON])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_BUTTON_HOVER])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_BUTTON_ACTIVE])));
			button.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			button.text_background = (nk_color) (table[NK_COLOR_BUTTON]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.image_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (1.0f);
			button.rounding = (float) (4.0f);
			button.draw_begin = null;
			button.draw_end = null;
			button = style.contextual_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_BUTTON_HOVER])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_BUTTON_ACTIVE])));
			button.border_color = (nk_color) (table[NK_COLOR_WINDOW]);
			button.text_background = (nk_color) (table[NK_COLOR_WINDOW]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			button = style.menu_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.border_color = (nk_color) (table[NK_COLOR_WINDOW]);
			button.text_background = (nk_color) (table[NK_COLOR_WINDOW]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (1.0f);
			button.draw_begin = null;
			button.draw_end = null;
			toggle = style.checkbox;

			toggle.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE])));
			toggle.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_HOVER])));
			toggle.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_HOVER])));
			toggle.cursor_normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_CURSOR])));
			toggle.cursor_hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_CURSOR])));
			toggle.userdata = (nk_handle) (nk_handle_ptr(null));
			toggle.text_background = (nk_color) (table[NK_COLOR_WINDOW]);
			toggle.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			toggle.touch_padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			toggle.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			toggle.border = (float) (0.0f);
			toggle.spacing = (float) (4);
			toggle = style.option;

			toggle.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE])));
			toggle.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_HOVER])));
			toggle.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_HOVER])));
			toggle.cursor_normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_CURSOR])));
			toggle.cursor_hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TOGGLE_CURSOR])));
			toggle.userdata = (nk_handle) (nk_handle_ptr(null));
			toggle.text_background = (nk_color) (table[NK_COLOR_WINDOW]);
			toggle.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			toggle.padding = (nk_vec2) (nk_vec2_((float) (3.0f), (float) (3.0f)));
			toggle.touch_padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			toggle.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			toggle.border = (float) (0.0f);
			toggle.spacing = (float) (4);
			select = style.selectable;

			select.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT])));
			select.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT])));
			select.pressed = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT])));
			select.normal_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT_ACTIVE])));
			select.hover_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT_ACTIVE])));
			select.pressed_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SELECT_ACTIVE])));
			select.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			select.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			select.text_pressed = (nk_color) (table[NK_COLOR_TEXT]);
			select.text_normal_active = (nk_color) (table[NK_COLOR_TEXT]);
			select.text_hover_active = (nk_color) (table[NK_COLOR_TEXT]);
			select.text_pressed_active = (nk_color) (table[NK_COLOR_TEXT]);
			select.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			select.touch_padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			select.userdata = (nk_handle) (nk_handle_ptr(null));
			select.rounding = (float) (0.0f);
			select.draw_begin = null;
			select.draw_end = null;
			slider = style.slider;

			slider.normal = (nk_style_item) (nk_style_item_hide());
			slider.hover = (nk_style_item) (nk_style_item_hide());
			slider.active = (nk_style_item) (nk_style_item_hide());
			slider.bar_normal = (nk_color) (table[NK_COLOR_SLIDER]);
			slider.bar_hover = (nk_color) (table[NK_COLOR_SLIDER]);
			slider.bar_active = (nk_color) (table[NK_COLOR_SLIDER]);
			slider.bar_filled = (nk_color) (table[NK_COLOR_SLIDER_CURSOR]);
			slider.cursor_normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR])));
			slider.cursor_hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR_HOVER])));
			slider.cursor_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR_ACTIVE])));
			slider.inc_symbol = (int) (NK_SYMBOL_TRIANGLE_RIGHT);
			slider.dec_symbol = (int) (NK_SYMBOL_TRIANGLE_LEFT);
			slider.cursor_size = (nk_vec2) (nk_vec2_((float) (16), (float) (16)));
			slider.padding = (nk_vec2) (nk_vec2_((float) (2), (float) (2)));
			slider.spacing = (nk_vec2) (nk_vec2_((float) (2), (float) (2)));
			slider.userdata = (nk_handle) (nk_handle_ptr(null));
			slider.show_buttons = (int) (nk_false);
			slider.bar_height = (float) (8);
			slider.rounding = (float) (0);
			slider.draw_begin = null;
			slider.draw_end = null;
			button = style.slider.inc_button;
			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (40), (int) (40), (int) (40)))));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (42), (int) (42), (int) (42)))));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (44), (int) (44), (int) (44)))));
			button.border_color = (nk_color) (nk_rgb((int) (65), (int) (65), (int) (65)));
			button.text_background = (nk_color) (nk_rgb((int) (40), (int) (40), (int) (40)));
			button.text_normal = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.text_hover = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.text_active = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.padding = (nk_vec2) (nk_vec2_((float) (8.0f), (float) (8.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (1.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			style.slider.dec_button = (nk_style_button) (style.slider.inc_button);
			prog = style.progress;

			prog.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER])));
			prog.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER])));
			prog.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER])));
			prog.cursor_normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR])));
			prog.cursor_hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR_HOVER])));
			prog.cursor_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SLIDER_CURSOR_ACTIVE])));
			prog.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			prog.cursor_border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			prog.userdata = (nk_handle) (nk_handle_ptr(null));
			prog.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			prog.rounding = (float) (0);
			prog.border = (float) (0);
			prog.cursor_rounding = (float) (0);
			prog.cursor_border = (float) (0);
			prog.draw_begin = null;
			prog.draw_end = null;
			scroll = style.scrollh;

			scroll.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR])));
			scroll.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR])));
			scroll.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR])));
			scroll.cursor_normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR_CURSOR])));
			scroll.cursor_hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR_CURSOR_HOVER])));
			scroll.cursor_active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE])));
			scroll.dec_symbol = (int) (NK_SYMBOL_CIRCLE_SOLID);
			scroll.inc_symbol = (int) (NK_SYMBOL_CIRCLE_SOLID);
			scroll.userdata = (nk_handle) (nk_handle_ptr(null));
			scroll.border_color = (nk_color) (table[NK_COLOR_SCROLLBAR]);
			scroll.cursor_border_color = (nk_color) (table[NK_COLOR_SCROLLBAR]);
			scroll.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			scroll.show_buttons = (int) (nk_false);
			scroll.border = (float) (0);
			scroll.rounding = (float) (0);
			scroll.border_cursor = (float) (0);
			scroll.rounding_cursor = (float) (0);
			scroll.draw_begin = null;
			scroll.draw_end = null;
			style.scrollv = (nk_style_scrollbar) (style.scrollh);
			button = style.scrollh.inc_button;
			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (40), (int) (40), (int) (40)))));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (42), (int) (42), (int) (42)))));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (nk_rgb((int) (44), (int) (44), (int) (44)))));
			button.border_color = (nk_color) (nk_rgb((int) (65), (int) (65), (int) (65)));
			button.text_background = (nk_color) (nk_rgb((int) (40), (int) (40), (int) (40)));
			button.text_normal = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.text_hover = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.text_active = (nk_color) (nk_rgb((int) (175), (int) (175), (int) (175)));
			button.padding = (nk_vec2) (nk_vec2_((float) (4.0f), (float) (4.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (1.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			style.scrollh.dec_button = (nk_style_button) (style.scrollh.inc_button);
			style.scrollv.inc_button = (nk_style_button) (style.scrollh.inc_button);
			style.scrollv.dec_button = (nk_style_button) (style.scrollh.inc_button);
			edit = style.edit;

			edit.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_EDIT])));
			edit.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_EDIT])));
			edit.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_EDIT])));
			edit.cursor_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.cursor_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.cursor_text_normal = (nk_color) (table[NK_COLOR_EDIT]);
			edit.cursor_text_hover = (nk_color) (table[NK_COLOR_EDIT]);
			edit.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			edit.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_text_normal = (nk_color) (table[NK_COLOR_EDIT]);
			edit.selected_text_hover = (nk_color) (table[NK_COLOR_EDIT]);
			edit.scrollbar_size = (nk_vec2) (nk_vec2_((float) (10), (float) (10)));
			edit.scrollbar = (nk_style_scrollbar) (style.scrollv);
			edit.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			edit.row_padding = (float) (2);
			edit.cursor_size = (float) (4);
			edit.border = (float) (1);
			edit.rounding = (float) (0);
			property = style.property;

			property.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			property.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			property.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			property.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			property.label_normal = (nk_color) (table[NK_COLOR_TEXT]);
			property.label_hover = (nk_color) (table[NK_COLOR_TEXT]);
			property.label_active = (nk_color) (table[NK_COLOR_TEXT]);
			property.sym_left = (int) (NK_SYMBOL_TRIANGLE_LEFT);
			property.sym_right = (int) (NK_SYMBOL_TRIANGLE_RIGHT);
			property.userdata = (nk_handle) (nk_handle_ptr(null));
			property.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			property.border = (float) (1);
			property.rounding = (float) (10);
			property.draw_begin = null;
			property.draw_end = null;
			button = style.property.dec_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_PROPERTY]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			style.property.inc_button = (nk_style_button) (style.property.dec_button);
			edit = style.property.edit;

			edit.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			edit.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			edit.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_PROPERTY])));
			edit.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			edit.cursor_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.cursor_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.cursor_text_normal = (nk_color) (table[NK_COLOR_EDIT]);
			edit.cursor_text_hover = (nk_color) (table[NK_COLOR_EDIT]);
			edit.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_normal = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_hover = (nk_color) (table[NK_COLOR_TEXT]);
			edit.selected_text_normal = (nk_color) (table[NK_COLOR_EDIT]);
			edit.selected_text_hover = (nk_color) (table[NK_COLOR_EDIT]);
			edit.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			edit.cursor_size = (float) (8);
			edit.border = (float) (0);
			edit.rounding = (float) (0);
			chart = style.chart;

			chart.background = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_CHART])));
			chart.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			chart.selected_color = (nk_color) (table[NK_COLOR_CHART_COLOR_HIGHLIGHT]);
			chart.color = (nk_color) (table[NK_COLOR_CHART_COLOR]);
			chart.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			chart.border = (float) (0);
			chart.rounding = (float) (0);
			combo = style.combo;
			combo.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			combo.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			combo.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			combo.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			combo.label_normal = (nk_color) (table[NK_COLOR_TEXT]);
			combo.label_hover = (nk_color) (table[NK_COLOR_TEXT]);
			combo.label_active = (nk_color) (table[NK_COLOR_TEXT]);
			combo.sym_normal = (int) (NK_SYMBOL_TRIANGLE_DOWN);
			combo.sym_hover = (int) (NK_SYMBOL_TRIANGLE_DOWN);
			combo.sym_active = (int) (NK_SYMBOL_TRIANGLE_DOWN);
			combo.content_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			combo.button_padding = (nk_vec2) (nk_vec2_((float) (0), (float) (4)));
			combo.spacing = (nk_vec2) (nk_vec2_((float) (4), (float) (0)));
			combo.border = (float) (1);
			combo.rounding = (float) (0);
			button = style.combo.button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_COMBO])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_COMBO]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			tab = style.tab;
			tab.background = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TAB_HEADER])));
			tab.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			tab.text = (nk_color) (table[NK_COLOR_TEXT]);
			tab.sym_minimize = (int) (NK_SYMBOL_TRIANGLE_RIGHT);
			tab.sym_maximize = (int) (NK_SYMBOL_TRIANGLE_DOWN);
			tab.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			tab.spacing = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			tab.indent = (float) (10.0f);
			tab.border = (float) (1);
			tab.rounding = (float) (0);
			button = style.tab.tab_minimize_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TAB_HEADER])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TAB_HEADER])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TAB_HEADER])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_TAB_HEADER]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			style.tab.tab_maximize_button = (nk_style_button) (button);
			button = style.tab.node_minimize_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_TAB_HEADER]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (2.0f), (float) (2.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			style.tab.node_maximize_button = (nk_style_button) (button);
			win = style.window;
			win.header.align = (int) (NK_HEADER_RIGHT);
			win.header.close_symbol = (int) (NK_SYMBOL_X);
			win.header.minimize_symbol = (int) (NK_SYMBOL_MINUS);
			win.header.maximize_symbol = (int) (NK_SYMBOL_PLUS);
			win.header.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			win.header.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			win.header.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			win.header.label_normal = (nk_color) (table[NK_COLOR_TEXT]);
			win.header.label_hover = (nk_color) (table[NK_COLOR_TEXT]);
			win.header.label_active = (nk_color) (table[NK_COLOR_TEXT]);
			win.header.label_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.header.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.header.spacing = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			button = style.window.header.close_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_HEADER]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			button = style.window.header.minimize_button;

			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_HEADER])));
			button.border_color = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
			button.text_background = (nk_color) (table[NK_COLOR_HEADER]);
			button.text_normal = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_hover = (nk_color) (table[NK_COLOR_TEXT]);
			button.text_active = (nk_color) (table[NK_COLOR_TEXT]);
			button.padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.touch_padding = (nk_vec2) (nk_vec2_((float) (0.0f), (float) (0.0f)));
			button.userdata = (nk_handle) (nk_handle_ptr(null));
			button.text_alignment = (uint) (NK_TEXT_CENTERED);
			button.border = (float) (0.0f);
			button.rounding = (float) (0.0f);
			button.draw_begin = null;
			button.draw_end = null;
			win.background = (nk_color) (table[NK_COLOR_WINDOW]);
			win.fixed_background = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_WINDOW])));
			win.border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.popup_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.combo_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.contextual_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.menu_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.group_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.tooltip_border_color = (nk_color) (table[NK_COLOR_BORDER]);
			win.scaler = (nk_style_item) (nk_style_item_color((nk_color) (table[NK_COLOR_TEXT])));
			win.rounding = (float) (0.0f);
			win.spacing = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.scrollbar_size = (nk_vec2) (nk_vec2_((float) (10), (float) (10)));
			win.min_size = (nk_vec2) (nk_vec2_((float) (64), (float) (64)));
			win.combo_border = (float) (1.0f);
			win.contextual_border = (float) (1.0f);
			win.menu_border = (float) (1.0f);
			win.group_border = (float) (1.0f);
			win.tooltip_border = (float) (1.0f);
			win.popup_border = (float) (1.0f);
			win.border = (float) (2.0f);
			win.min_row_height_padding = (float) (8);
			win.padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.group_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.popup_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.combo_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.contextual_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.menu_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
			win.tooltip_padding = (nk_vec2) (nk_vec2_((float) (4), (float) (4)));
		}

		public static void nk_style_set_font(nk_context ctx, nk_user_font font)
		{
			nk_style style;
			if (ctx == null) return;
			style = ctx.style;
			style.font = font;
			ctx.stacks.fonts.head = (int) (0);
			if ((ctx.current) != null) nk_layout_reset_min_row_height(ctx);
		}

		public static int nk_style_push_font(nk_context ctx, nk_user_font font)
		{
			nk_config_stack_user_font font_stack;
			nk_config_stack_user_font_element element;
			if (ctx == null) return (int) (0);
			font_stack = ctx.stacks.fonts;
			if ((font_stack.head) >= (int) font_stack.elements.Length) return (int) (0);
			element = font_stack.elements[font_stack.head++];
			element.address = ctx.style.font;
			element.old_value = ctx.style.font;
			ctx.style.font = font;
			return (int) (1);
		}

		public static int nk_style_pop_font(nk_context ctx)
		{
			nk_config_stack_user_font font_stack;
			nk_config_stack_user_font_element element;
			if (ctx == null) return (int) (0);
			font_stack = ctx.stacks.fonts;
			if ((font_stack.head) < (1)) return (int) (0);
			element = font_stack.elements[--font_stack.head];
			element.address = element.old_value;
			return (int) (1);
		}

		public static int nk_style_push_style_item(nk_context ctx, nk_style_item address, nk_style_item value)
		{
			nk_config_stack_style_item type_stack;
			nk_config_stack_style_item_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.style_items;
			if ((type_stack.head) >= (int) type_stack.elements.Length) return (int) (0);
			element = (nk_config_stack_style_item_element) (type_stack.elements)[(type_stack.head++)];
			element.address = address;
			element.old_value = (nk_style_item) (address);
			address = (nk_style_item) (value);
			return (int) (1);
		}

		public static int nk_style_push_float(nk_context ctx, float* address, float value)
		{
			nk_config_stack_float type_stack;
			nk_config_stack_float_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.floats;
			if ((type_stack.head) >= (int) type_stack.elements.Length) return (int) (0);
			element = (nk_config_stack_float_element) (type_stack.elements)[(type_stack.head++)];
			element.address = address;
			element.old_value = (float) (*address);
			*address = (float) (value);
			return (int) (1);
		}

		public static int nk_style_push_vec2(nk_context ctx, nk_vec2* address, nk_vec2 value)
		{
			nk_config_stack_vec2 type_stack;
			nk_config_stack_vec2_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.vectors;
			if ((type_stack.head) >= (int) type_stack.elements.Length) return (int) (0);
			element = (nk_config_stack_vec2_element) (type_stack.elements)[(type_stack.head++)];
			element.address = address;
			element.old_value = (nk_vec2) (*address);
			*address = (nk_vec2) (value);
			return (int) (1);
		}

		public static int nk_style_push_flags(nk_context ctx, uint* address, uint value)
		{
			nk_config_stack_flags type_stack;
			nk_config_stack_flags_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.flags;
			if ((type_stack.head) >= (int) type_stack.elements.Length) return (int) (0);
			element = (nk_config_stack_flags_element) (type_stack.elements)[(type_stack.head++)];
			element.address = address;
			element.old_value = (uint) (*address);
			*address = (uint) (value);
			return (int) (1);
		}

		public static int nk_style_push_color(nk_context ctx, nk_color* address, nk_color value)
		{
			nk_config_stack_color type_stack;
			nk_config_stack_color_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.colors;
			if ((type_stack.head) >= (int) type_stack.elements.Length) return (int) (0);
			element = (nk_config_stack_color_element) (type_stack.elements)[(type_stack.head++)];
			element.address = address;
			element.old_value = (nk_color) (*address);
			*address = (nk_color) (value);
			return (int) (1);
		}

		public static int nk_style_pop_style_item(nk_context ctx)
		{
			nk_config_stack_style_item type_stack;
			nk_config_stack_style_item_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.style_items;
			if ((type_stack.head) < (1)) return (int) (0);
			element = (nk_config_stack_style_item_element) (type_stack.elements)[(--type_stack.head)];
			element.address = (nk_style_item) (element.old_value);
			return (int) (1);
		}

		public static int nk_style_pop_float(nk_context ctx)
		{
			nk_config_stack_float type_stack;
			nk_config_stack_float_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.floats;
			if ((type_stack.head) < (1)) return (int) (0);
			element = (nk_config_stack_float_element) (type_stack.elements)[(--type_stack.head)];
			*element.address = (float) (element.old_value);
			return (int) (1);
		}

		public static int nk_style_pop_vec2(nk_context ctx)
		{
			nk_config_stack_vec2 type_stack;
			nk_config_stack_vec2_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.vectors;
			if ((type_stack.head) < (1)) return (int) (0);
			element = (nk_config_stack_vec2_element) (type_stack.elements)[(--type_stack.head)];
			*element.address = (nk_vec2) (element.old_value);
			return (int) (1);
		}

		public static int nk_style_pop_flags(nk_context ctx)
		{
			nk_config_stack_flags type_stack;
			nk_config_stack_flags_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.flags;
			if ((type_stack.head) < (1)) return (int) (0);
			element = (nk_config_stack_flags_element) (type_stack.elements)[(--type_stack.head)];
			*element.address = (uint) (element.old_value);
			return (int) (1);
		}

		public static int nk_style_pop_color(nk_context ctx)
		{
			nk_config_stack_color type_stack;
			nk_config_stack_color_element element;
			if (ctx == null) return (int) (0);
			type_stack = ctx.stacks.colors;
			if ((type_stack.head) < (1)) return (int) (0);
			element = (nk_config_stack_color_element) (type_stack.elements)[(--type_stack.head)];
			*element.address = (nk_color) (element.old_value);
			return (int) (1);
		}

		public static int nk_style_set_cursor(nk_context ctx, int c)
		{
			nk_style style;
			if (ctx == null) return (int) (0);
			style = ctx.style;
			if ((style.cursors[c]) != null)
			{
				style.cursor_active = style.cursors[c];
				return (int) (1);
			}

			return (int) (0);
		}

		public static void nk_style_show_cursor(nk_context ctx)
		{
			ctx.style.cursor_visible = (int) (nk_true);
		}

		public static void nk_style_hide_cursor(nk_context ctx)
		{
			ctx.style.cursor_visible = (int) (nk_false);
		}

		public static void nk_style_load_cursor(nk_context ctx, int cursor, nk_cursor c)
		{
			nk_style style;
			if (ctx == null) return;
			style = ctx.style;
			style.cursors[cursor] = c;
		}

		public static void nk_style_load_all_cursors(nk_context ctx, nk_cursor[] cursors)
		{
			int i = (int) (0);
			nk_style style;
			if (ctx == null) return;
			style = ctx.style;
			for (i = (int) (0); (i) < (NK_CURSOR_COUNT); ++i)
			{
				style.cursors[i] = cursors[i];
			}
			style.cursor_visible = (int) (nk_true);
		}

		public static void nk_start_popup(nk_context ctx, nk_window win)
		{
			nk_popup_buffer buf;
			if ((ctx == null) || (win == null)) return;
			buf = win.popup.buf;
			buf.commands = win.buffer.commands;
			buf.active = (int) (nk_true);
		}

		public static void nk_finish_popup(nk_context ctx, nk_window win)
		{
			nk_popup_buffer buf;
			if ((ctx == null) || (win == null)) return;
			buf = win.popup.buf;
		}

		public static int nk_panel_has_header(uint flags, char* title)
		{
			int active = (int) (0);
			active = (int) (flags & (NK_WINDOW_CLOSABLE | NK_WINDOW_MINIMIZABLE));
			active = (int) (((active) != 0) || ((flags & NK_WINDOW_TITLE) != 0) ? 1 : 0);
			active = (int) ((((active) != 0) && ((flags & NK_WINDOW_HIDDEN) == 0)) && ((title) != null) ? 1 : 0);
			return (int) (active);
		}

		public static nk_vec2 nk_panel_get_padding(nk_style style, int type)
		{
			switch (type)
			{
				default:
				case NK_PANEL_WINDOW:
					return (nk_vec2) (style.window.padding);
				case NK_PANEL_GROUP:
					return (nk_vec2) (style.window.group_padding);
				case NK_PANEL_POPUP:
					return (nk_vec2) (style.window.popup_padding);
				case NK_PANEL_CONTEXTUAL:
					return (nk_vec2) (style.window.contextual_padding);
				case NK_PANEL_COMBO:
					return (nk_vec2) (style.window.combo_padding);
				case NK_PANEL_MENU:
					return (nk_vec2) (style.window.menu_padding);
				case NK_PANEL_TOOLTIP:
					return (nk_vec2) (style.window.menu_padding);
			}

		}

		public static float nk_panel_get_border(nk_style style, uint flags, int type)
		{
			if ((flags & NK_WINDOW_BORDER) != 0)
			{
				switch (type)
				{
					default:
					case NK_PANEL_WINDOW:
						return (float) (style.window.border);
					case NK_PANEL_GROUP:
						return (float) (style.window.group_border);
					case NK_PANEL_POPUP:
						return (float) (style.window.popup_border);
					case NK_PANEL_CONTEXTUAL:
						return (float) (style.window.contextual_border);
					case NK_PANEL_COMBO:
						return (float) (style.window.combo_border);
					case NK_PANEL_MENU:
						return (float) (style.window.menu_border);
					case NK_PANEL_TOOLTIP:
						return (float) (style.window.menu_border);
				}
			}
			else return (float) (0);
		}

		public static nk_color nk_panel_get_border_color(nk_style style, int type)
		{
			switch (type)
			{
				default:
				case NK_PANEL_WINDOW:
					return (nk_color) (style.window.border_color);
				case NK_PANEL_GROUP:
					return (nk_color) (style.window.group_border_color);
				case NK_PANEL_POPUP:
					return (nk_color) (style.window.popup_border_color);
				case NK_PANEL_CONTEXTUAL:
					return (nk_color) (style.window.contextual_border_color);
				case NK_PANEL_COMBO:
					return (nk_color) (style.window.combo_border_color);
				case NK_PANEL_MENU:
					return (nk_color) (style.window.menu_border_color);
				case NK_PANEL_TOOLTIP:
					return (nk_color) (style.window.menu_border_color);
			}

		}

		public static int nk_panel_is_sub(int type)
		{
			return (int) ((type & NK_PANEL_SET_SUB) != 0 ? 1 : 0);
		}

		public static int nk_panel_is_nonblock(int type)
		{
			return (int) ((type & NK_PANEL_SET_NONBLOCK) != 0 ? 1 : 0);
		}

		public static int nk_panel_begin(nk_context ctx, char* title, int panel_type)
		{
			nk_input _in_;
			nk_window win;
			nk_panel layout;
			nk_command_buffer _out_;
			nk_style style;
			nk_user_font font;
			nk_vec2 scrollbar_size = new nk_vec2();
			nk_vec2 panel_padding = new nk_vec2();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);

			if (((ctx.current.flags & NK_WINDOW_HIDDEN) != 0) || ((ctx.current.flags & NK_WINDOW_CLOSED) != 0))
			{
				ctx.current.layout.type = (int) (panel_type);
				return (int) (0);
			}

			style = ctx.style;
			font = style.font;
			win = ctx.current;
			layout = win.layout;
			_out_ = win.buffer;
			_in_ = (win.flags & NK_WINDOW_NO_INPUT) != 0 ? null : ctx.input;
			win.buffer.userdata = (nk_handle) (ctx.userdata);
			scrollbar_size = (nk_vec2) (style.window.scrollbar_size);
			panel_padding = (nk_vec2) (nk_panel_get_padding(style, (int) (panel_type)));
			if (((win.flags & NK_WINDOW_MOVABLE) != 0) && ((win.flags & NK_WINDOW_ROM) == 0))
			{
				int left_mouse_down;
				int left_mouse_click_in_cursor;
				nk_rect header = new nk_rect();
				header.x = (float) (win.bounds.x);
				header.y = (float) (win.bounds.y);
				header.w = (float) (win.bounds.w);
				if ((nk_panel_has_header((uint) (win.flags), title)) != 0)
				{
					header.h = (float) (font.height + 2.0f*style.window.header.padding.y);
					header.h += (float) (2.0f*style.window.header.label_padding.y);
				}
				else header.h = (float) (panel_padding.y);
				left_mouse_down = (int) (((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down);
				left_mouse_click_in_cursor =
					(int) (nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (header), (int) (nk_true)));
				if (((left_mouse_down) != 0) && ((left_mouse_click_in_cursor) != 0))
				{
					win.bounds.x = (float) (win.bounds.x + _in_.mouse.delta.x);
					win.bounds.y = (float) (win.bounds.y + _in_.mouse.delta.y);
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.x += (float) (_in_.mouse.delta.x);
					((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.y += (float) (_in_.mouse.delta.y);
					ctx.style.cursor_active = ctx.style.cursors[NK_CURSOR_MOVE];
				}
			}

			layout.type = (int) (panel_type);
			layout.flags = (uint) (win.flags);
			layout.bounds = (nk_rect) (win.bounds);
			layout.bounds.x += (float) (panel_padding.x);
			layout.bounds.w -= (float) (2*panel_padding.x);
			if ((win.flags & NK_WINDOW_BORDER) != 0)
			{
				layout.border = (float) (nk_panel_get_border(style, (uint) (win.flags), (int) (panel_type)));
				layout.bounds = (nk_rect) (nk_shrink_rect_((nk_rect) (layout.bounds), (float) (layout.border)));
			}
			else layout.border = (float) (0);
			layout.at_y = (float) (layout.bounds.y);
			layout.at_x = (float) (layout.bounds.x);
			layout.max_x = (float) (0);
			layout.header_height = (float) (0);
			layout.footer_height = (float) (0);
			nk_layout_reset_min_row_height(ctx);
			layout.row.index = (int) (0);
			layout.row.columns = (int) (0);
			layout.row.ratio = null;
			layout.row.item_width = (float) (0);
			layout.row.tree_depth = (int) (0);
			layout.row.height = (float) (panel_padding.y);
			layout.has_scrolling = (uint) (nk_true);
			if ((win.flags & NK_WINDOW_NO_SCROLLBAR) == 0) layout.bounds.w -= (float) (scrollbar_size.x);
			if (nk_panel_is_nonblock((int) (panel_type)) == 0)
			{
				layout.footer_height = (float) (0);
				if (((win.flags & NK_WINDOW_NO_SCROLLBAR) == 0) || ((win.flags & NK_WINDOW_SCALABLE) != 0))
					layout.footer_height = (float) (scrollbar_size.y);
				layout.bounds.h -= (float) (layout.footer_height);
			}

			if ((nk_panel_has_header((uint) (win.flags), title)) != 0)
			{
				nk_text text = new nk_text();
				nk_rect header = new nk_rect();
				nk_style_item background = null;
				header.x = (float) (win.bounds.x);
				header.y = (float) (win.bounds.y);
				header.w = (float) (win.bounds.w);
				header.h = (float) (font.height + 2.0f*style.window.header.padding.y);
				header.h += (float) (2.0f*style.window.header.label_padding.y);
				layout.header_height = (float) (header.h);
				layout.bounds.y += (float) (header.h);
				layout.bounds.h -= (float) (header.h);
				layout.at_y += (float) (header.h);
				if ((ctx.active) == (win))
				{
					background = style.window.header.active;
					text.text = (nk_color) (style.window.header.label_active);
				}
				else if ((nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (header))) != 0)
				{
					background = style.window.header.hover;
					text.text = (nk_color) (style.window.header.label_hover);
				}
				else
				{
					background = style.window.header.normal;
					text.text = (nk_color) (style.window.header.label_normal);
				}
				header.h += (float) (1.0f);
				if ((background.type) == (NK_STYLE_ITEM_IMAGE))
				{
					text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
					nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
				}
				else
				{
					text.background = (nk_color) (background.data.color);
					nk_fill_rect(_out_, (nk_rect) (header), (float) (0), (nk_color) (background.data.color));
				}
				{
					nk_rect button = new nk_rect();
					button.y = (float) (header.y + style.window.header.padding.y);
					button.h = (float) (header.h - 2*style.window.header.padding.y);
					button.w = (float) (button.h);
					if ((win.flags & NK_WINDOW_CLOSABLE) != 0)
					{
						uint ws = (uint) (0);
						if ((style.window.header.align) == (NK_HEADER_RIGHT))
						{
							button.x = (float) ((header.w + header.x) - (button.w + style.window.header.padding.x));
							header.w -= (float) (button.w + style.window.header.spacing.x + style.window.header.padding.x);
						}
						else
						{
							button.x = (float) (header.x + style.window.header.padding.x);
							header.x += (float) (button.w + style.window.header.spacing.x + style.window.header.padding.x);
						}
						if (
							((nk_do_button_symbol(ref ws, win.buffer, (nk_rect) (button), (int) (style.window.header.close_symbol),
								(int) (NK_BUTTON_DEFAULT), style.window.header.close_button, _in_, style.font)) != 0) &&
							((win.flags & NK_WINDOW_ROM) == 0))
						{
							layout.flags |= (uint) (NK_WINDOW_HIDDEN);
							layout.flags &= ((uint) (~(uint) NK_WINDOW_MINIMIZED));
						}
					}
					if ((win.flags & NK_WINDOW_MINIMIZABLE) != 0)
					{
						uint ws = (uint) (0);
						if ((style.window.header.align) == (NK_HEADER_RIGHT))
						{
							button.x = (float) ((header.w + header.x) - button.w);
							if ((win.flags & NK_WINDOW_CLOSABLE) == 0)
							{
								button.x -= (float) (style.window.header.padding.x);
								header.w -= (float) (style.window.header.padding.x);
							}
							header.w -= (float) (button.w + style.window.header.spacing.x);
						}
						else
						{
							button.x = (float) (header.x);
							header.x += (float) (button.w + style.window.header.spacing.x + style.window.header.padding.x);
						}
						if (
							((nk_do_button_symbol(ref ws, win.buffer, (nk_rect) (button),
								(int)
									((layout.flags & NK_WINDOW_MINIMIZED) != 0
										? style.window.header.maximize_symbol
										: style.window.header.minimize_symbol), (int) (NK_BUTTON_DEFAULT), style.window.header.minimize_button, _in_,
								style.font)) != 0) && ((win.flags & NK_WINDOW_ROM) == 0))
							layout.flags =
								(uint)
									((layout.flags & NK_WINDOW_MINIMIZED) != 0
										? layout.flags & (uint) (~(uint) NK_WINDOW_MINIMIZED)
										: layout.flags | NK_WINDOW_MINIMIZED);
					}
				}
				{
					int text_len = (int) (nk_strlen(title));
					nk_rect label = new nk_rect();
					float t = (float) (font.width((nk_handle) (font.userdata), (float) (font.height), title, (int) (text_len)));
					text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
					label.x = (float) (header.x + style.window.header.padding.x);
					label.x += (float) (style.window.header.label_padding.x);
					label.y = (float) (header.y + style.window.header.label_padding.y);
					label.h = (float) (font.height + 2*style.window.header.label_padding.y);
					label.w = (float) (t + 2*style.window.header.spacing.x);
					label.w =
						(float)
							(((label.w) < (header.x + header.w - label.x) ? (label.w) : (header.x + header.w - label.x)) < (0)
								? (0)
								: ((label.w) < (header.x + header.w - label.x) ? (label.w) : (header.x + header.w - label.x)));
					nk_widget_text(_out_, (nk_rect) (label), title, (int) (text_len), &text, (uint) (NK_TEXT_LEFT), font);
				}
			}

			if (((layout.flags & NK_WINDOW_MINIMIZED) == 0) && ((layout.flags & NK_WINDOW_DYNAMIC) == 0))
			{
				nk_rect body = new nk_rect();
				body.x = (float) (win.bounds.x);
				body.w = (float) (win.bounds.w);
				body.y = (float) (win.bounds.y + layout.header_height);
				body.h = (float) (win.bounds.h - layout.header_height);
				if ((style.window.fixed_background.type) == (NK_STYLE_ITEM_IMAGE))
					nk_draw_image(_out_, (nk_rect) (body), style.window.fixed_background.data.image, (nk_color) (nk_white));
				else nk_fill_rect(_out_, (nk_rect) (body), (float) (0), (nk_color) (style.window.fixed_background.data.color));
			}

			{
				nk_rect clip = new nk_rect();
				layout.clip = (nk_rect) (layout.bounds);
				nk_unify(ref clip, ref win.buffer.clip, (float) (layout.clip.x), (float) (layout.clip.y),
					(float) (layout.clip.x + layout.clip.w), (float) (layout.clip.y + layout.clip.h));
				nk_push_scissor(_out_, (nk_rect) (clip));
				layout.clip = (nk_rect) (clip);
			}

			return (int) (((layout.flags & NK_WINDOW_HIDDEN) == 0) && ((layout.flags & NK_WINDOW_MINIMIZED) == 0) ? 1 : 0);
		}

		public static void nk_panel_end(nk_context ctx)
		{
			nk_input _in_;
			nk_window window;
			nk_panel layout;
			nk_style style;
			nk_command_buffer _out_;
			nk_vec2 scrollbar_size = new nk_vec2();
			nk_vec2 panel_padding = new nk_vec2();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			window = ctx.current;
			layout = window.layout;
			style = ctx.style;
			_out_ = window.buffer;
			_in_ = (((layout.flags & NK_WINDOW_ROM) != 0) || ((layout.flags & NK_WINDOW_NO_INPUT) != 0)) ? null : ctx.input;
			if (nk_panel_is_sub((int) (layout.type)) == 0) nk_push_scissor(_out_, (nk_rect) (nk_null_rect));
			scrollbar_size = (nk_vec2) (style.window.scrollbar_size);
			panel_padding = (nk_vec2) (nk_panel_get_padding(style, (int) (layout.type)));
			layout.at_y += (float) (layout.row.height);
			if (((layout.flags & NK_WINDOW_DYNAMIC) != 0) && ((layout.flags & NK_WINDOW_MINIMIZED) == 0))
			{
				nk_rect empty_space = new nk_rect();
				if ((layout.at_y) < (layout.bounds.y + layout.bounds.h)) layout.bounds.h = (float) (layout.at_y - layout.bounds.y);
				empty_space.x = (float) (window.bounds.x);
				empty_space.y = (float) (layout.bounds.y);
				empty_space.h = (float) (panel_padding.y);
				empty_space.w = (float) (window.bounds.w);
				nk_fill_rect(_out_, (nk_rect) (empty_space), (float) (0), (nk_color) (style.window.background));
				empty_space.x = (float) (window.bounds.x);
				empty_space.y = (float) (layout.bounds.y);
				empty_space.w = (float) (panel_padding.x + layout.border);
				empty_space.h = (float) (layout.bounds.h);
				nk_fill_rect(_out_, (nk_rect) (empty_space), (float) (0), (nk_color) (style.window.background));
				empty_space.x = (float) (layout.bounds.x + layout.bounds.w - layout.border);
				empty_space.y = (float) (layout.bounds.y);
				empty_space.w = (float) (panel_padding.x + layout.border);
				empty_space.h = (float) (layout.bounds.h);
				if (((layout.offset.y) == (0)) && ((layout.flags & NK_WINDOW_NO_SCROLLBAR) == 0))
					empty_space.w += (float) (scrollbar_size.x);
				nk_fill_rect(_out_, (nk_rect) (empty_space), (float) (0), (nk_color) (style.window.background));
				if ((layout.offset.x != 0) && ((layout.flags & NK_WINDOW_NO_SCROLLBAR) == 0))
				{
					empty_space.x = (float) (window.bounds.x);
					empty_space.y = (float) (layout.bounds.y + layout.bounds.h);
					empty_space.w = (float) (window.bounds.w);
					empty_space.h = (float) (scrollbar_size.y);
					nk_fill_rect(_out_, (nk_rect) (empty_space), (float) (0), (nk_color) (style.window.background));
				}
			}

			if ((((layout.flags & NK_WINDOW_NO_SCROLLBAR) == 0) && ((layout.flags & NK_WINDOW_MINIMIZED) == 0)) &&
			    ((window.scrollbar_hiding_timer) < (4.0f)))
			{
				nk_rect scroll = new nk_rect();
				int scroll_has_scrolling;
				float scroll_target;
				float scroll_offset;
				float scroll_step;
				float scroll_inc;
				if ((nk_panel_is_sub((int) (layout.type))) != 0)
				{
					nk_window root_window = window;
					nk_panel root_panel = window.layout;
					while ((root_panel.parent) != null)
					{
						root_panel = root_panel.parent;
					}
					while ((root_window.parent) != null)
					{
						root_window = root_window.parent;
					}
					scroll_has_scrolling = (int) (0);
					if (((root_window) == (ctx.active)) && ((layout.has_scrolling) != 0))
					{
						if (((nk_input_is_mouse_hovering_rect(_in_, (nk_rect) (layout.bounds))) != 0) &&
						    (!(((((root_panel.clip.x) > (layout.bounds.x + layout.bounds.w)) ||
						         ((root_panel.clip.x + root_panel.clip.w) < (layout.bounds.x))) ||
						        ((root_panel.clip.y) > (layout.bounds.y + layout.bounds.h))) ||
						       ((root_panel.clip.y + root_panel.clip.h) < (layout.bounds.y)))))
						{
							root_panel = window.layout;
							while ((root_panel.parent) != null)
							{
								root_panel.has_scrolling = (uint) (nk_false);
								root_panel = root_panel.parent;
							}
							root_panel.has_scrolling = (uint) (nk_false);
							scroll_has_scrolling = (int) (nk_true);
						}
					}
				}
				else if (nk_panel_is_sub((int) (layout.type)) == 0)
				{
					scroll_has_scrolling = (int) (((window) == (ctx.active)) && ((layout.has_scrolling) != 0) ? 1 : 0);
					if ((((_in_) != null) && (((_in_.mouse.scroll_delta.y) > (0)) || ((_in_.mouse.scroll_delta.x) > (0)))) &&
					    ((scroll_has_scrolling) != 0)) window.scrolled = (uint) (nk_true);
					else window.scrolled = (uint) (nk_false);
				}
				else scroll_has_scrolling = (int) (nk_false);
				{
					uint state = (uint) (0);
					scroll.x = (float) (layout.bounds.x + layout.bounds.w + panel_padding.x);
					scroll.y = (float) (layout.bounds.y);
					scroll.w = (float) (scrollbar_size.x);
					scroll.h = (float) (layout.bounds.h);
					scroll_offset = ((float) (layout.offset.y));
					scroll_step = (float) (scroll.h*0.10f);
					scroll_inc = (float) (scroll.h*0.01f);
					scroll_target = ((float) ((int) (layout.at_y - scroll.y)));
					scroll_offset =
						(float)
							(nk_do_scrollbarv(ref state, _out_, (nk_rect) (scroll), (int) (scroll_has_scrolling), (float) (scroll_offset),
								(float) (scroll_target), (float) (scroll_step), (float) (scroll_inc), ctx.style.scrollv, _in_, style.font));
					layout.offset.y = ((uint) (scroll_offset));
					if (((_in_) != null) && ((scroll_has_scrolling) != 0)) _in_.mouse.scroll_delta.y = (float) (0);
				}
				{
					uint state = (uint) (0);
					scroll.x = (float) (layout.bounds.x);
					scroll.y = (float) (layout.bounds.y + layout.bounds.h);
					scroll.w = (float) (layout.bounds.w);
					scroll.h = (float) (scrollbar_size.y);
					scroll_offset = ((float) (layout.offset.x));
					scroll_target = ((float) ((int) (layout.max_x - scroll.x)));
					scroll_step = (float) (layout.max_x*0.05f);
					scroll_inc = (float) (layout.max_x*0.005f);
					scroll_offset =
						(float)
							(nk_do_scrollbarh(ref state, _out_, (nk_rect) (scroll), (int) (scroll_has_scrolling), (float) (scroll_offset),
								(float) (scroll_target), (float) (scroll_step), (float) (scroll_inc), ctx.style.scrollh, _in_, style.font));
					layout.offset.x = ((uint) (scroll_offset));
				}
			}

			if ((window.flags & NK_WINDOW_SCROLL_AUTO_HIDE) != 0)
			{
				int has_input =
					(int)
						(((ctx.input.mouse.delta.x != 0) || (ctx.input.mouse.delta.y != 0)) || (ctx.input.mouse.scroll_delta.y != 0)
							? 1
							: 0);
				int is_window_hovered = (int) (nk_window_is_hovered(ctx));
				int any_item_active = (int) (ctx.last_widget_state & NK_WIDGET_STATE_MODIFIED);
				if (((has_input == 0) && ((is_window_hovered) != 0)) || ((is_window_hovered == 0) && (any_item_active == 0)))
					window.scrollbar_hiding_timer += (float) (ctx.delta_time_seconds);
				else window.scrollbar_hiding_timer = (float) (0);
			}
			else window.scrollbar_hiding_timer = (float) (0);
			if ((layout.flags & NK_WINDOW_BORDER) != 0)
			{
				nk_color border_color = (nk_color) (nk_panel_get_border_color(style, (int) (layout.type)));
				float padding_y =
					(float)
						((layout.flags & NK_WINDOW_MINIMIZED) != 0
							? style.window.border + window.bounds.y + layout.header_height
							: (layout.flags & NK_WINDOW_DYNAMIC) != 0
								? layout.bounds.y + layout.bounds.h + layout.footer_height
								: window.bounds.y + window.bounds.h);
				nk_stroke_line(_out_, (float) (window.bounds.x), (float) (window.bounds.y),
					(float) (window.bounds.x + window.bounds.w), (float) (window.bounds.y), (float) (layout.border),
					(nk_color) (border_color));
				nk_stroke_line(_out_, (float) (window.bounds.x), (float) (padding_y), (float) (window.bounds.x + window.bounds.w),
					(float) (padding_y), (float) (layout.border), (nk_color) (border_color));
				nk_stroke_line(_out_, (float) (window.bounds.x + layout.border*0.5f), (float) (window.bounds.y),
					(float) (window.bounds.x + layout.border*0.5f), (float) (padding_y), (float) (layout.border),
					(nk_color) (border_color));
				nk_stroke_line(_out_, (float) (window.bounds.x + window.bounds.w - layout.border*0.5f), (float) (window.bounds.y),
					(float) (window.bounds.x + window.bounds.w - layout.border*0.5f), (float) (padding_y), (float) (layout.border),
					(nk_color) (border_color));
			}

			if ((((layout.flags & NK_WINDOW_SCALABLE) != 0) && ((_in_) != null)) && ((layout.flags & NK_WINDOW_MINIMIZED) == 0))
			{
				nk_rect scaler = new nk_rect();
				scaler.w = (float) (scrollbar_size.x);
				scaler.h = (float) (scrollbar_size.y);
				scaler.y = (float) (layout.bounds.y + layout.bounds.h);
				if ((layout.flags & NK_WINDOW_SCALE_LEFT) != 0) scaler.x = (float) (layout.bounds.x - panel_padding.x*0.5f);
				else scaler.x = (float) (layout.bounds.x + layout.bounds.w + panel_padding.x);
				if ((layout.flags & NK_WINDOW_NO_SCROLLBAR) != 0) scaler.x -= (float) (scaler.w);
				{
					nk_style_item item = style.window.scaler;
					if ((item.type) == (NK_STYLE_ITEM_IMAGE))
						nk_draw_image(_out_, (nk_rect) (scaler), item.data.image, (nk_color) (nk_white));
					else
					{
						if ((layout.flags & NK_WINDOW_SCALE_LEFT) != 0)
						{
							nk_fill_triangle(_out_, (float) (scaler.x), (float) (scaler.y), (float) (scaler.x), (float) (scaler.y + scaler.h),
								(float) (scaler.x + scaler.w), (float) (scaler.y + scaler.h), (nk_color) (item.data.color));
						}
						else
						{
							nk_fill_triangle(_out_, (float) (scaler.x + scaler.w), (float) (scaler.y), (float) (scaler.x + scaler.w),
								(float) (scaler.y + scaler.h), (float) (scaler.x), (float) (scaler.y + scaler.h), (nk_color) (item.data.color));
						}
					}
				}
				if ((window.flags & NK_WINDOW_ROM) == 0)
				{
					nk_vec2 window_size = (nk_vec2) (style.window.min_size);
					int left_mouse_down = (int) (((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down);
					int left_mouse_click_in_scaler =
						(int) (nk_input_has_mouse_click_down_in_rect(_in_, (int) (NK_BUTTON_LEFT), (nk_rect) (scaler), (int) (nk_true)));
					if (((left_mouse_down) != 0) && ((left_mouse_click_in_scaler) != 0))
					{
						float delta_x = (float) (_in_.mouse.delta.x);
						if ((layout.flags & NK_WINDOW_SCALE_LEFT) != 0)
						{
							delta_x = (float) (-delta_x);
							window.bounds.x += (float) (_in_.mouse.delta.x);
						}
						if ((window.bounds.w + delta_x) >= (window_size.x))
						{
							if (((delta_x) < (0)) || (((delta_x) > (0)) && ((_in_.mouse.pos.x) >= (scaler.x))))
							{
								window.bounds.w = (float) (window.bounds.w + delta_x);
								scaler.x += (float) (_in_.mouse.delta.x);
							}
						}
						if ((layout.flags & NK_WINDOW_DYNAMIC) == 0)
						{
							if ((window_size.y) < (window.bounds.h + _in_.mouse.delta.y))
							{
								if (((_in_.mouse.delta.y) < (0)) || (((_in_.mouse.delta.y) > (0)) && ((_in_.mouse.pos.y) >= (scaler.y))))
								{
									window.bounds.h = (float) (window.bounds.h + _in_.mouse.delta.y);
									scaler.y += (float) (_in_.mouse.delta.y);
								}
							}
						}
						ctx.style.cursor_active = ctx.style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
						((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.x = (float) (scaler.x + scaler.w/2.0f);
						((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked_pos.y = (float) (scaler.y + scaler.h/2.0f);
					}
				}
			}

			if (nk_panel_is_sub((int) (layout.type)) == 0)
			{
				if ((layout.flags & NK_WINDOW_HIDDEN) != 0) nk_command_buffer_reset(window.buffer);
				else nk_finish(ctx, window);
			}

			if ((layout.flags & NK_WINDOW_REMOVE_ROM) != 0)
			{
				layout.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
				layout.flags &= (uint) (~(uint) (NK_WINDOW_REMOVE_ROM));
			}

			window.flags = (uint) (layout.flags);
			if ((((window.property.active) != 0) && (window.property.old != window.property.seq)) &&
			    ((window.property.active) == (window.property.prev)))
			{
			}
			else
			{
				window.property.old = (uint) (window.property.seq);
				window.property.prev = (int) (window.property.active);
				window.property.seq = (uint) (0);
			}

			if ((((window.edit.active) != 0) && (window.edit.old != window.edit.seq)) &&
			    ((window.edit.active) == (window.edit.prev)))
			{
			}
			else
			{
				window.edit.old = (uint) (window.edit.seq);
				window.edit.prev = (int) (window.edit.active);
				window.edit.seq = (uint) (0);
			}

			if (((window.popup.active_con) != 0) && (window.popup.con_old != window.popup.con_count))
			{
				window.popup.con_count = (uint) (0);
				window.popup.con_old = (uint) (0);
				window.popup.active_con = (uint) (0);
			}
			else
			{
				window.popup.con_old = (uint) (window.popup.con_count);
				window.popup.con_count = (uint) (0);
			}

			window.popup.combo_count = (uint) (0);
		}

		public static void nk_push_table(nk_window win, nk_table tbl)
		{
			if (win.tables == null)
			{
				win.tables = tbl;
				tbl.next = null;
				tbl.prev = null;
				tbl.size = (uint) (0);
				win.table_count = (uint) (1);
				return;
			}

			win.tables.prev = tbl;
			tbl.next = win.tables;
			tbl.prev = null;
			tbl.size = (uint) (0);
			win.tables = tbl;
			win.table_count++;
		}

		public static void nk_remove_table(nk_window win, nk_table tbl)
		{
			if ((win.tables) == (tbl)) win.tables = tbl.next;
			if ((tbl.next) != null) tbl.next.prev = tbl.prev;
			if ((tbl.prev) != null) tbl.prev.next = tbl.next;
			tbl.next = null;
			tbl.prev = null;
		}

		public static uint* nk_add_value(nk_context ctx, nk_window win, uint name, uint value)
		{
			if ((win == null) || (ctx == null)) return null;
			if ((win.tables == null) || ((win.tables.size) >= (51)))
			{
				nk_table tbl = nk_create_table(ctx);
				if (tbl == null) return null;
				nk_push_table(win, tbl);
			}

			win.tables.seq = (uint) (win.seq);
			win.tables.keys[win.tables.size] = (uint) (name);
			win.tables.values[win.tables.size] = (uint) (value);
			return (uint*) win.tables.values + (win.tables.size++);
		}

		public static uint* nk_find_value(nk_window win, uint name)
		{
			nk_table iter = win.tables;
			while ((iter) != null)
			{
				uint i = (uint) (0);
				uint size = (uint) (iter.size);
				for (i = (uint) (0); (i) < (size); ++i)
				{
					if ((iter.keys[i]) == (name))
					{
						iter.seq = (uint) (win.seq);
						return (uint*) iter.values + i;
					}
				}
				size = (uint) (51);
				iter = iter.next;
			}
			return null;
		}

		public static nk_window nk_find_window(nk_context ctx, uint hash, char* name)
		{
			nk_window iter;
			iter = ctx.begin;
			while ((iter) != null)
			{
				if ((iter.name) == (hash))
				{
					int max_len = (int) (nk_strlen(iter.name_string));
					if (nk_stricmpn(iter.name_string, name, (int) (max_len)) == 0) return iter;
				}
				iter = iter.next;
			}
			return null;
		}

		public static void nk_insert_window(nk_context ctx, nk_window win, int loc)
		{
			nk_window iter;
			if ((win == null) || (ctx == null)) return;
			iter = ctx.begin;
			while ((iter) != null)
			{
				if ((iter) == (win)) return;
				iter = iter.next;
			}
			if (ctx.begin == null)
			{
				win.next = null;
				win.prev = null;
				ctx.begin = win;
				ctx.end = win;
				ctx.count = (uint) (1);
				return;
			}

			if ((loc) == (NK_INSERT_BACK))
			{
				nk_window end;
				end = ctx.end;
				end.flags |= (uint) (NK_WINDOW_ROM);
				end.next = win;
				win.prev = ctx.end;
				win.next = null;
				ctx.end = win;
				ctx.active = ctx.end;
				ctx.end.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
			}
			else
			{
				ctx.begin.prev = win;
				win.next = ctx.begin;
				win.prev = null;
				ctx.begin = win;
				ctx.begin.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
			}

			ctx.count++;
		}

		public static void nk_remove_window(nk_context ctx, nk_window win)
		{
			if (((win) == (ctx.begin)) || ((win) == (ctx.end)))
			{
				if ((win) == (ctx.begin))
				{
					ctx.begin = win.next;
					if ((win.next) != null) win.next.prev = null;
				}
				if ((win) == (ctx.end))
				{
					ctx.end = win.prev;
					if ((win.prev) != null) win.prev.next = null;
				}
			}
			else
			{
				if ((win.next) != null) win.next.prev = win.prev;
				if ((win.prev) != null) win.prev.next = win.next;
			}

			if (((win) == (ctx.active)) || (ctx.active == null))
			{
				ctx.active = ctx.end;
				if ((ctx.end) != null) ctx.end.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
			}

			win.next = null;
			win.prev = null;
			ctx.count--;
		}

		public static int nk_begin(nk_context ctx, char* title, nk_rect bounds, uint flags)
		{
			return (int) (nk_begin_titled(ctx, title, title, (nk_rect) (bounds), (uint) (flags)));
		}

		public static int nk_begin_titled(nk_context ctx, char* name, char* title, nk_rect bounds, uint flags)
		{
			nk_window win;
			nk_style style;
			uint title_hash;
			int title_len;
			int ret = (int) (0);
			if ((((ctx == null) || ((ctx.current) != null)) || (title == null)) || (name == null)) return (int) (0);
			style = ctx.style;
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null)
			{
				ulong name_length = (ulong) (nk_strlen(name));
				win = (nk_window) (nk_create_window(ctx));
				if (win == null) return (int) (0);
				if ((flags & NK_WINDOW_BACKGROUND) != 0) nk_insert_window(ctx, win, (int) (NK_INSERT_FRONT));
				else nk_insert_window(ctx, win, (int) (NK_INSERT_BACK));
				nk_command_buffer_init(win.buffer, (int) (NK_CLIPPING_ON));
				win.flags = (uint) (flags);
				win.bounds = (nk_rect) (bounds);
				win.name = (uint) (title_hash);
				name_length = (ulong) ((name_length) < (64 - 1) ? (name_length) : (64 - 1));
				nk_memcopy(win.name_string, name, (ulong) (name_length));
				win.name_string[name_length] = (char) (0);
				win.popup.win = null;
				if (ctx.active == null) ctx.active = win;
			}
			else
			{
				win.flags &= (uint) (~(uint) (NK_WINDOW_PRIVATE - 1));
				win.flags |= (uint) (flags);
				if ((win.flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)) == 0) win.bounds = (nk_rect) (bounds);
				win.seq = (uint) (ctx.seq);
				if ((ctx.active == null) && ((win.flags & NK_WINDOW_HIDDEN) == 0))
				{
					ctx.active = win;
					ctx.end = win;
				}
			}

			if ((win.flags & NK_WINDOW_HIDDEN) != 0)
			{
				ctx.current = win;
				win.layout = null;
				return (int) (0);
			}
			else nk_start(ctx, win);
			if (((win.flags & NK_WINDOW_HIDDEN) == 0) && ((win.flags & NK_WINDOW_NO_INPUT) == 0))
			{
				int inpanel;
				int ishovered;
				nk_window iter = win;
				float h =
					(float) (ctx.style.font.height + 2.0f*style.window.header.padding.y + (2.0f*style.window.header.label_padding.y));
				nk_rect win_bounds =
					(nk_rect)
						(((win.flags & NK_WINDOW_MINIMIZED) == 0)
							? win.bounds
							: nk_rect_((float) (win.bounds.x), (float) (win.bounds.y), (float) (win.bounds.w), (float) (h)));
				inpanel =
					(int)
						(nk_input_has_mouse_click_down_in_rect(ctx.input, (int) (NK_BUTTON_LEFT), (nk_rect) (win_bounds), (int) (nk_true)));
				inpanel = (int) (((inpanel) != 0) && ((ctx.input.mouse.buttons[NK_BUTTON_LEFT].clicked) != 0) ? 1 : 0);
				ishovered = (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (win_bounds)));
				if (((win != ctx.active) && ((ishovered) != 0)) && (ctx.input.mouse.buttons[NK_BUTTON_LEFT].down == 0))
				{
					iter = win.next;
					while ((iter) != null)
					{
						nk_rect iter_bounds =
							(nk_rect)
								(((iter.flags & NK_WINDOW_MINIMIZED) == 0)
									? iter.bounds
									: nk_rect_((float) (iter.bounds.x), (float) (iter.bounds.y), (float) (iter.bounds.w), (float) (h)));
						if (
							(!(((((iter_bounds.x) > (win_bounds.x + win_bounds.w)) || ((iter_bounds.x + iter_bounds.w) < (win_bounds.x))) ||
							    ((iter_bounds.y) > (win_bounds.y + win_bounds.h))) || ((iter_bounds.y + iter_bounds.h) < (win_bounds.y)))) &&
							((iter.flags & NK_WINDOW_HIDDEN) == 0)) break;
						if (((((iter.popup.win) != null) && ((iter.popup.active) != 0)) && ((iter.flags & NK_WINDOW_HIDDEN) == 0)) &&
						    (!(((((iter.popup.win.bounds.x) > (win.bounds.x + win_bounds.w)) ||
						         ((iter.popup.win.bounds.x + iter.popup.win.bounds.w) < (win.bounds.x))) ||
						        ((iter.popup.win.bounds.y) > (win_bounds.y + win_bounds.h))) ||
						       ((iter.popup.win.bounds.y + iter.popup.win.bounds.h) < (win_bounds.y))))) break;
						iter = iter.next;
					}
				}
				if ((((iter) != null) && ((inpanel) != 0)) && (win != ctx.end))
				{
					iter = win.next;
					while ((iter) != null)
					{
						nk_rect iter_bounds =
							(nk_rect)
								(((iter.flags & NK_WINDOW_MINIMIZED) == 0)
									? iter.bounds
									: nk_rect_((float) (iter.bounds.x), (float) (iter.bounds.y), (float) (iter.bounds.w), (float) (h)));
						if (((((iter_bounds.x) <= (ctx.input.mouse.pos.x)) && ((ctx.input.mouse.pos.x) < (iter_bounds.x + iter_bounds.w))) &&
						     (((iter_bounds.y) <= (ctx.input.mouse.pos.y)) && ((ctx.input.mouse.pos.y) < (iter_bounds.y + iter_bounds.h)))) &&
						    ((iter.flags & NK_WINDOW_HIDDEN) == 0)) break;
						if (((((iter.popup.win) != null) && ((iter.popup.active) != 0)) && ((iter.flags & NK_WINDOW_HIDDEN) == 0)) &&
						    (!(((((iter.popup.win.bounds.x) > (win_bounds.x + win_bounds.w)) ||
						         ((iter.popup.win.bounds.x + iter.popup.win.bounds.w) < (win_bounds.x))) ||
						        ((iter.popup.win.bounds.y) > (win_bounds.y + win_bounds.h))) ||
						       ((iter.popup.win.bounds.y + iter.popup.win.bounds.h) < (win_bounds.y))))) break;
						iter = iter.next;
					}
				}
				if ((((iter) != null) && ((win.flags & NK_WINDOW_ROM) == 0)) && ((win.flags & NK_WINDOW_BACKGROUND) != 0))
				{
					win.flags |= ((uint) (NK_WINDOW_ROM));
					iter.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
					ctx.active = iter;
					if ((iter.flags & NK_WINDOW_BACKGROUND) == 0)
					{
						nk_remove_window(ctx, iter);
						nk_insert_window(ctx, iter, (int) (NK_INSERT_BACK));
					}
				}
				else
				{
					if ((iter == null) && (ctx.end != win))
					{
						if ((win.flags & NK_WINDOW_BACKGROUND) == 0)
						{
							nk_remove_window(ctx, win);
							nk_insert_window(ctx, win, (int) (NK_INSERT_BACK));
						}
						win.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
						ctx.active = win;
					}
					if ((ctx.end != win) && ((win.flags & NK_WINDOW_BACKGROUND) == 0)) win.flags |= (uint) (NK_WINDOW_ROM);
				}
			}

			win.layout = (nk_panel) (nk_create_panel(ctx));
			ctx.current = win;
			ret = (int) (nk_panel_begin(ctx, title, (int) (NK_PANEL_WINDOW)));
			win.layout.offset = win.scrollbar;

			return (int) (ret);
		}

		public static void nk_end(nk_context ctx)
		{
			nk_panel layout;
			if ((ctx == null) || (ctx.current == null)) return;
			layout = ctx.current.layout;
			if ((layout == null) || (((layout.type) == (NK_PANEL_WINDOW)) && ((ctx.current.flags & NK_WINDOW_HIDDEN) != 0)))
			{
				ctx.current = null;
				return;
			}

			nk_panel_end(ctx);

			ctx.current = null;
		}

		public static nk_rect nk_window_get_bounds(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null))
				return (nk_rect) (nk_rect_((float) (0), (float) (0), (float) (0), (float) (0)));
			return (nk_rect) (ctx.current.bounds);
		}

		public static nk_vec2 nk_window_get_position(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			return (nk_vec2) (nk_vec2_((float) (ctx.current.bounds.x), (float) (ctx.current.bounds.y)));
		}

		public static nk_vec2 nk_window_get_size(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			return (nk_vec2) (nk_vec2_((float) (ctx.current.bounds.w), (float) (ctx.current.bounds.h)));
		}

		public static float nk_window_get_width(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (float) (0);
			return (float) (ctx.current.bounds.w);
		}

		public static float nk_window_get_height(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (float) (0);
			return (float) (ctx.current.bounds.h);
		}

		public static nk_rect nk_window_get_content_region(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null))
				return (nk_rect) (nk_rect_((float) (0), (float) (0), (float) (0), (float) (0)));
			return (nk_rect) (ctx.current.layout.clip);
		}

		public static nk_vec2 nk_window_get_content_region_min(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			return (nk_vec2) (nk_vec2_((float) (ctx.current.layout.clip.x), (float) (ctx.current.layout.clip.y)));
		}

		public static nk_vec2 nk_window_get_content_region_max(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			return
				(nk_vec2)
					(nk_vec2_((float) (ctx.current.layout.clip.x + ctx.current.layout.clip.w),
						(float) (ctx.current.layout.clip.y + ctx.current.layout.clip.h)));
		}

		public static nk_vec2 nk_window_get_content_region_size(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			return (nk_vec2) (nk_vec2_((float) (ctx.current.layout.clip.w), (float) (ctx.current.layout.clip.h)));
		}

		public static nk_command_buffer nk_window_get_canvas(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return null;
			return ctx.current.buffer;
		}

		public static nk_panel nk_window_get_panel(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return null;
			return ctx.current.layout;
		}

		public static int nk_window_has_focus(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (int) (0);
			return (int) ((ctx.current) == (ctx.active) ? 1 : 0);
		}

		public static int nk_window_is_hovered(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return (int) (0);
			if ((ctx.current.flags & NK_WINDOW_HIDDEN) != 0) return (int) (0);
			return (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (ctx.current.bounds)));
		}

		public static int nk_window_is_any_hovered(nk_context ctx)
		{
			nk_window iter;
			if (ctx == null) return (int) (0);
			iter = ctx.begin;
			while ((iter) != null)
			{
				if ((iter.flags & NK_WINDOW_HIDDEN) == 0)
				{
					if ((((iter.popup.active) != 0) && ((iter.popup.win) != null)) &&
					    ((nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (iter.popup.win.bounds))) != 0)) return (int) (1);
					if ((iter.flags & NK_WINDOW_MINIMIZED) != 0)
					{
						nk_rect header = (nk_rect) (iter.bounds);
						header.h = (float) (ctx.style.font.height + 2*ctx.style.window.header.padding.y);
						if ((nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (header))) != 0) return (int) (1);
					}
					else if ((nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (iter.bounds))) != 0)
					{
						return (int) (1);
					}
				}
				iter = iter.next;
			}
			return (int) (0);
		}

		public static int nk_item_is_any_active(nk_context ctx)
		{
			int any_hovered = (int) (nk_window_is_any_hovered(ctx));
			int any_active = (int) (ctx.last_widget_state & NK_WIDGET_STATE_MODIFIED);
			return (int) (((any_hovered) != 0) || ((any_active) != 0) ? 1 : 0);
		}

		public static int nk_window_is_collapsed(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return (int) (0);
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return (int) (0);
			return (int) (win.flags & NK_WINDOW_MINIMIZED);
		}

		public static int nk_window_is_closed(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return (int) (1);
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return (int) (1);
			return (int) (win.flags & NK_WINDOW_CLOSED);
		}

		public static int nk_window_is_hidden(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return (int) (1);
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return (int) (1);
			return (int) (win.flags & NK_WINDOW_HIDDEN);
		}

		public static int nk_window_is_active(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return (int) (0);
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return (int) (0);
			return (int) ((win) == (ctx.active) ? 1 : 0);
		}

		public static nk_window nk_window_find(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			return nk_find_window(ctx, (uint) (title_hash), name);
		}

		public static void nk_window_close(nk_context ctx, char* name)
		{
			nk_window win;
			if (ctx == null) return;
			win = nk_window_find(ctx, name);
			if (win == null) return;
			if ((ctx.current) == (win)) return;
			win.flags |= (uint) (NK_WINDOW_HIDDEN);
			win.flags |= (uint) (NK_WINDOW_CLOSED);
		}

		public static void nk_window_set_bounds(nk_context ctx, char* name, nk_rect bounds)
		{
			nk_window win;
			if (ctx == null) return;
			win = nk_window_find(ctx, name);
			if (win == null) return;
			win.bounds = (nk_rect) (bounds);
		}

		public static void nk_window_set_position(nk_context ctx, char* name, nk_vec2 pos)
		{
			nk_window win = nk_window_find(ctx, name);
			if (win == null) return;
			win.bounds.x = (float) (pos.x);
			win.bounds.y = (float) (pos.y);
		}

		public static void nk_window_set_size(nk_context ctx, char* name, nk_vec2 size)
		{
			nk_window win = nk_window_find(ctx, name);
			if (win == null) return;
			win.bounds.w = (float) (size.x);
			win.bounds.h = (float) (size.y);
		}

		public static void nk_window_collapse(nk_context ctx, char* name, int c)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return;
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return;
			if ((c) == (NK_MINIMIZED)) win.flags |= (uint) (NK_WINDOW_MINIMIZED);
			else win.flags &= (uint) (~(uint) (NK_WINDOW_MINIMIZED));
		}

		public static void nk_window_collapse_if(nk_context ctx, char* name, int c, int cond)
		{
			if ((ctx == null) || (cond == 0)) return;
			nk_window_collapse(ctx, name, (int) (c));
		}

		public static void nk_window_show(nk_context ctx, char* name, int s)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return;
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (win == null) return;
			if ((s) == (NK_HIDDEN))
			{
				win.flags |= (uint) (NK_WINDOW_HIDDEN);
			}
			else win.flags &= (uint) (~(uint) (NK_WINDOW_HIDDEN));
		}

		public static void nk_window_show_if(nk_context ctx, char* name, int s, int cond)
		{
			if ((ctx == null) || (cond == 0)) return;
			nk_window_show(ctx, name, (int) (s));
		}

		public static void nk_window_set_focus(nk_context ctx, char* name)
		{
			int title_len;
			uint title_hash;
			nk_window win;
			if (ctx == null) return;
			title_len = (int) (nk_strlen(name));
			title_hash = (uint) (nk_murmur_hash(name, (int) (title_len), (uint) (NK_WINDOW_TITLE)));
			win = nk_find_window(ctx, (uint) (title_hash), name);
			if (((win) != null) && (ctx.end != win))
			{
				nk_remove_window(ctx, win);
				nk_insert_window(ctx, win, (int) (NK_INSERT_BACK));
			}

			ctx.active = win;
		}

		public static void nk_menubar_begin(nk_context ctx)
		{
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			layout = ctx.current.layout;
			if (((layout.flags & NK_WINDOW_HIDDEN) != 0) || ((layout.flags & NK_WINDOW_MINIMIZED) != 0)) return;
			layout.menu.x = (float) (layout.at_x);
			layout.menu.y = (float) (layout.at_y + layout.row.height);
			layout.menu.w = (float) (layout.bounds.w);
			layout.menu.offset = layout.offset;

			layout.offset.y = (uint) (0);
		}

		public static void nk_menubar_end(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			nk_command_buffer _out_;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			_out_ = win.buffer;
			layout = win.layout;
			if (((layout.flags & NK_WINDOW_HIDDEN) != 0) || ((layout.flags & NK_WINDOW_MINIMIZED) != 0)) return;
			layout.menu.h = (float) (layout.at_y - layout.menu.y);
			layout.bounds.y += (float) (layout.menu.h + ctx.style.window.spacing.y + layout.row.height);
			layout.bounds.h -= (float) (layout.menu.h + ctx.style.window.spacing.y + layout.row.height);
			layout.offset.x = (uint) (layout.menu.offset.x);
			layout.offset.y = (uint) (layout.menu.offset.y);
			layout.at_y = (float) (layout.bounds.y - layout.row.height);
			layout.clip.y = (float) (layout.bounds.y);
			layout.clip.h = (float) (layout.bounds.h);
			nk_push_scissor(_out_, (nk_rect) (layout.clip));
		}

		public static void nk_layout_set_min_row_height(nk_context ctx, float height)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			layout.row.min_height = (float) (height);
		}

		public static void nk_layout_reset_min_row_height(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			layout.row.min_height = (float) (ctx.style.font.height);
			layout.row.min_height += (float) (ctx.style.text.padding.y*2);
			layout.row.min_height += (float) (ctx.style.window.min_row_height_padding*2);
		}

		public static float nk_layout_row_calculate_usable_space(nk_style style, int type, float total_space, int columns)
		{
			float panel_padding;
			float panel_spacing;
			float panel_space;
			nk_vec2 spacing = new nk_vec2();
			nk_vec2 padding = new nk_vec2();
			spacing = (nk_vec2) (style.window.spacing);
			padding = (nk_vec2) (nk_panel_get_padding(style, (int) (type)));
			panel_padding = (float) (2*padding.x);
			panel_spacing = (float) ((float) ((columns - 1) < (0) ? (0) : (columns - 1))*spacing.x);
			panel_space = (float) (total_space - panel_padding - panel_spacing);
			return (float) (panel_space);
		}

		public static void nk_panel_layout(nk_context ctx, nk_window win, float height, int cols)
		{
			nk_panel layout;
			nk_style style;
			nk_command_buffer _out_;
			nk_vec2 item_spacing = new nk_vec2();
			nk_color color = new nk_color();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			layout = win.layout;
			style = ctx.style;
			_out_ = win.buffer;
			color = (nk_color) (style.window.background);
			item_spacing = (nk_vec2) (style.window.spacing);
			layout.row.index = (int) (0);
			layout.at_y += (float) (layout.row.height);
			layout.row.columns = (int) (cols);
			if ((height) == (0.0f))
				layout.row.height =
					(float) (((height) < (layout.row.min_height) ? (layout.row.min_height) : (height)) + item_spacing.y);
			else layout.row.height = (float) (height + item_spacing.y);
			layout.row.item_offset = (float) (0);
			if ((layout.flags & NK_WINDOW_DYNAMIC) != 0)
			{
				nk_rect background = new nk_rect();
				background.x = (float) (win.bounds.x);
				background.w = (float) (win.bounds.w);
				background.y = (float) (layout.at_y - 1.0f);
				background.h = (float) (layout.row.height + 1.0f);
				nk_fill_rect(_out_, (nk_rect) (background), (float) (0), (nk_color) (color));
			}

		}

		public static void nk_row_layout_(nk_context ctx, int fmt, float height, int cols, int width)
		{
			nk_window win;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			nk_panel_layout(ctx, win, (float) (height), (int) (cols));
			if ((fmt) == (NK_DYNAMIC)) win.layout.row.type = (int) (NK_LAYOUT_DYNAMIC_FIXED);
			else win.layout.row.type = (int) (NK_LAYOUT_STATIC_FIXED);
			win.layout.row.ratio = null;
			win.layout.row.filled = (float) (0);
			win.layout.row.item_offset = (float) (0);
			win.layout.row.item_width = ((float) (width));
		}

		public static float nk_layout_ratio_from_pixel(nk_context ctx, float pixel_width)
		{
			nk_window win;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (float) (0);
			win = ctx.current;
			return
				(float)
					(((pixel_width/win.bounds.x) < (1.0f) ? (pixel_width/win.bounds.x) : (1.0f)) < (0.0f)
						? (0.0f)
						: ((pixel_width/win.bounds.x) < (1.0f) ? (pixel_width/win.bounds.x) : (1.0f)));
		}

		public static void nk_layout_row_dynamic(nk_context ctx, float height, int cols)
		{
			nk_row_layout_(ctx, (int) (NK_DYNAMIC), (float) (height), (int) (cols), (int) (0));
		}

		public static void nk_layout_row_static(nk_context ctx, float height, int item_width, int cols)
		{
			nk_row_layout_(ctx, (int) (NK_STATIC), (float) (height), (int) (cols), (int) (item_width));
		}

		public static void nk_layout_row_begin(nk_context ctx, int fmt, float row_height, int cols)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			nk_panel_layout(ctx, win, (float) (row_height), (int) (cols));
			if ((fmt) == (NK_DYNAMIC)) layout.row.type = (int) (NK_LAYOUT_DYNAMIC_ROW);
			else layout.row.type = (int) (NK_LAYOUT_STATIC_ROW);
			layout.row.ratio = null;
			layout.row.filled = (float) (0);
			layout.row.item_width = (float) (0);
			layout.row.item_offset = (float) (0);
			layout.row.columns = (int) (cols);
		}

		public static void nk_layout_row_push(nk_context ctx, float ratio_or_width)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if ((layout.row.type != NK_LAYOUT_STATIC_ROW) && (layout.row.type != NK_LAYOUT_DYNAMIC_ROW)) return;
			if ((layout.row.type) == (NK_LAYOUT_DYNAMIC_ROW))
			{
				float ratio = (float) (ratio_or_width);
				if ((ratio + layout.row.filled) > (1.0f)) return;
				if ((ratio) > (0.0f))
					layout.row.item_width =
						(float) ((0) < ((1.0f) < (ratio) ? (1.0f) : (ratio)) ? ((1.0f) < (ratio) ? (1.0f) : (ratio)) : (0));
				else layout.row.item_width = (float) (1.0f - layout.row.filled);
			}
			else layout.row.item_width = (float) (ratio_or_width);
		}

		public static void nk_layout_row_end(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if ((layout.row.type != NK_LAYOUT_STATIC_ROW) && (layout.row.type != NK_LAYOUT_DYNAMIC_ROW)) return;
			layout.row.item_width = (float) (0);
			layout.row.item_offset = (float) (0);
		}

		public static void nk_layout_row(nk_context ctx, int fmt, float height, int cols, float* ratio)
		{
			int i;
			int n_undef = (int) (0);
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			nk_panel_layout(ctx, win, (float) (height), (int) (cols));
			if ((fmt) == (NK_DYNAMIC))
			{
				float r = (float) (0);
				layout.row.ratio = ratio;
				for (i = (int) (0); (i) < (cols); ++i)
				{
					if ((ratio[i]) < (0.0f)) n_undef++;
					else r += (float) (ratio[i]);
				}
				r = (float) ((0) < ((1.0f) < (1.0f - r) ? (1.0f) : (1.0f - r)) ? ((1.0f) < (1.0f - r) ? (1.0f) : (1.0f - r)) : (0));
				layout.row.type = (int) (NK_LAYOUT_DYNAMIC);
				layout.row.item_width = (float) ((((r) > (0)) && ((n_undef) > (0))) ? (r/(float) (n_undef)) : 0);
			}
			else
			{
				layout.row.ratio = ratio;
				layout.row.type = (int) (NK_LAYOUT_STATIC);
				layout.row.item_width = (float) (0);
				layout.row.item_offset = (float) (0);
			}

			layout.row.item_offset = (float) (0);
			layout.row.filled = (float) (0);
		}

		public static void nk_layout_row_template_begin(nk_context ctx, float height)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			nk_panel_layout(ctx, win, (float) (height), (int) (1));
			layout.row.type = (int) (NK_LAYOUT_TEMPLATE);
			layout.row.columns = (int) (0);
			layout.row.ratio = null;
			layout.row.item_width = (float) (0);
			layout.row.item_height = (float) (0);
			layout.row.item_offset = (float) (0);
			layout.row.filled = (float) (0);
			layout.row.item.x = (float) (0);
			layout.row.item.y = (float) (0);
			layout.row.item.w = (float) (0);
			layout.row.item.h = (float) (0);
		}

		public static void nk_layout_row_template_push_dynamic(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if (layout.row.type != NK_LAYOUT_TEMPLATE) return;
			if ((layout.row.columns) >= (16)) return;
			layout.row.templates[layout.row.columns++] = (float) (-1.0f);
		}

		public static void nk_layout_row_template_push_variable(nk_context ctx, float min_width)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if (layout.row.type != NK_LAYOUT_TEMPLATE) return;
			if ((layout.row.columns) >= (16)) return;
			layout.row.templates[layout.row.columns++] = (float) (-min_width);
		}

		public static void nk_layout_row_template_push_static(nk_context ctx, float width)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if (layout.row.type != NK_LAYOUT_TEMPLATE) return;
			if ((layout.row.columns) >= (16)) return;
			layout.row.templates[layout.row.columns++] = (float) (width);
		}

		public static void nk_layout_row_template_end(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			int i = (int) (0);
			int variable_count = (int) (0);
			int min_variable_count = (int) (0);
			float min_fixed_width = (float) (0.0f);
			float total_fixed_width = (float) (0.0f);
			float max_variable_width = (float) (0.0f);
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if (layout.row.type != NK_LAYOUT_TEMPLATE) return;
			for (i = (int) (0); (i) < (layout.row.columns); ++i)
			{
				float width = (float) (layout.row.templates[i]);
				if ((width) >= (0.0f))
				{
					total_fixed_width += (float) (width);
					min_fixed_width += (float) (width);
				}
				else if ((width) < (-1.0f))
				{
					width = (float) (-width);
					total_fixed_width += (float) (width);
					max_variable_width = (float) ((max_variable_width) < (width) ? (width) : (max_variable_width));
					variable_count++;
				}
				else
				{
					min_variable_count++;
					variable_count++;
				}
			}
			if ((variable_count) != 0)
			{
				float space =
					(float)
						(nk_layout_row_calculate_usable_space(ctx.style, (int) (layout.type), (float) (layout.bounds.w),
							(int) (layout.row.columns)));
				float var_width =
					(float) (((space - min_fixed_width) < (0.0f) ? (0.0f) : (space - min_fixed_width))/(float) (variable_count));
				int enough_space = (int) ((var_width) >= (max_variable_width) ? 1 : 0);
				if (enough_space == 0)
					var_width =
						(float) (((space - total_fixed_width) < (0) ? (0) : (space - total_fixed_width))/(float) (min_variable_count));
				for (i = (int) (0); (i) < (layout.row.columns); ++i)
				{
					float* width = (float*) layout.row.templates + i;
					*width =
						(float) (((*width) >= (0.0f)) ? *width : (((*width) < (-1.0f)) && (enough_space == 0)) ? -(*width) : var_width);
				}
			}

		}

		public static void nk_layout_space_begin(nk_context ctx, int fmt, float height, int widget_count)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			nk_panel_layout(ctx, win, (float) (height), (int) (widget_count));
			if ((fmt) == (NK_STATIC)) layout.row.type = (int) (NK_LAYOUT_STATIC_FREE);
			else layout.row.type = (int) (NK_LAYOUT_DYNAMIC_FREE);
			layout.row.ratio = null;
			layout.row.filled = (float) (0);
			layout.row.item_width = (float) (0);
			layout.row.item_offset = (float) (0);
		}

		public static void nk_layout_space_end(nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			layout.row.item_width = (float) (0);
			layout.row.item_height = (float) (0);
			layout.row.item_offset = (float) (0);
			fixed (void* ptr = &layout.row.item)
			{
				nk_zero(ptr, (ulong) (sizeof (nk_rect)));
			}
		}

		public static void nk_layout_space_push(nk_context ctx, nk_rect rect)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			layout.row.item = (nk_rect) (rect);
		}

		public static nk_rect nk_layout_space_bounds(nk_context ctx)
		{
			nk_rect ret = new nk_rect();
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x = (float) (layout.clip.x);
			ret.y = (float) (layout.clip.y);
			ret.w = (float) (layout.clip.w);
			ret.h = (float) (layout.row.height);
			return (nk_rect) (ret);
		}

		public static nk_rect nk_layout_widget_bounds(nk_context ctx)
		{
			nk_rect ret = new nk_rect();
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x = (float) (layout.at_x);
			ret.y = (float) (layout.at_y);
			ret.w = (float) (layout.bounds.w - ((layout.at_x - layout.bounds.x) < (0) ? (0) : (layout.at_x - layout.bounds.x)));
			ret.h = (float) (layout.row.height);
			return (nk_rect) (ret);
		}

		public static nk_vec2 nk_layout_space_to_screen(nk_context ctx, nk_vec2 ret)
		{
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x += (float) (layout.at_x - (float) (layout.offset.x));
			ret.y += (float) (layout.at_y - (float) (layout.offset.y));
			return (nk_vec2) (ret);
		}

		public static nk_vec2 nk_layout_space_to_local(nk_context ctx, nk_vec2 ret)
		{
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x += (float) (-layout.at_x + (float) (layout.offset.x));
			ret.y += (float) (-layout.at_y + (float) (layout.offset.y));
			return (nk_vec2) (ret);
		}

		public static nk_rect nk_layout_space_rect_to_screen(nk_context ctx, nk_rect ret)
		{
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x += (float) (layout.at_x - (float) (layout.offset.x));
			ret.y += (float) (layout.at_y - (float) (layout.offset.y));
			return (nk_rect) (ret);
		}

		public static nk_rect nk_layout_space_rect_to_local(nk_context ctx, nk_rect ret)
		{
			nk_window win;
			nk_panel layout;
			win = ctx.current;
			layout = win.layout;
			ret.x += (float) (-layout.at_x + (float) (layout.offset.x));
			ret.y += (float) (-layout.at_y + (float) (layout.offset.y));
			return (nk_rect) (ret);
		}

		public static void nk_panel_alloc_row(nk_context ctx, nk_window win)
		{
			nk_panel layout = win.layout;
			nk_vec2 spacing = (nk_vec2) (ctx.style.window.spacing);
			float row_height = (float) (layout.row.height - spacing.y);
			nk_panel_layout(ctx, win, (float) (row_height), (int) (layout.row.columns));
		}

		public static void nk_layout_widget_space(nk_rect* bounds, nk_context ctx, nk_window win, int modify)
		{
			nk_panel layout;
			nk_style style;
			nk_vec2 spacing = new nk_vec2();
			nk_vec2 padding = new nk_vec2();
			float item_offset = (float) (0);
			float item_width = (float) (0);
			float item_spacing = (float) (0);
			float panel_space = (float) (0);
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			style = ctx.style;
			spacing = (nk_vec2) (style.window.spacing);
			padding = (nk_vec2) (nk_panel_get_padding(style, (int) (layout.type)));
			panel_space =
				(float)
					(nk_layout_row_calculate_usable_space(ctx.style, (int) (layout.type), (float) (layout.bounds.w),
						(int) (layout.row.columns)));
			switch (layout.row.type)
			{
				case NK_LAYOUT_DYNAMIC_FIXED:
				{
					item_width = (float) (((1.0f) < (panel_space - 1.0f) ? (panel_space - 1.0f) : (1.0f))/(float) (layout.row.columns));
					item_offset = (float) ((float) (layout.row.index)*item_width);
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
				}
					break;
				case NK_LAYOUT_DYNAMIC_ROW:
				{
					item_width = (float) (layout.row.item_width*panel_space);
					item_offset = (float) (layout.row.item_offset);
					item_spacing = (float) (0);
					if ((modify) != 0)
					{
						layout.row.item_offset += (float) (item_width + spacing.x);
						layout.row.filled += (float) (layout.row.item_width);
						layout.row.index = (int) (0);
					}
				}
					break;
				case NK_LAYOUT_DYNAMIC_FREE:
				{
					bounds->x = (float) (layout.at_x + (layout.bounds.w*layout.row.item.x));
					bounds->x -= ((float) (layout.offset.x));
					bounds->y = (float) (layout.at_y + (layout.row.height*layout.row.item.y));
					bounds->y -= ((float) (layout.offset.y));
					bounds->w = (float) (layout.bounds.w*layout.row.item.w);
					bounds->h = (float) (layout.row.height*layout.row.item.h);
					return;
				}
				case NK_LAYOUT_DYNAMIC:
				{
					float ratio;
					ratio =
						(float)
							(((layout.row.ratio[layout.row.index]) < (0)) ? layout.row.item_width : layout.row.ratio[layout.row.index]);
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
					item_width = (float) (ratio*panel_space);
					item_offset = (float) (layout.row.item_offset);
					if ((modify) != 0)
					{
						layout.row.item_offset += (float) (item_width);
						layout.row.filled += (float) (ratio);
					}
				}
					break;
				case NK_LAYOUT_STATIC_FIXED:
				{
					item_width = (float) (layout.row.item_width);
					item_offset = (float) ((float) (layout.row.index)*item_width);
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
				}
					break;
				case NK_LAYOUT_STATIC_ROW:
				{
					item_width = (float) (layout.row.item_width);
					item_offset = (float) (layout.row.item_offset);
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
					if ((modify) != 0) layout.row.item_offset += (float) (item_width);
				}
					break;
				case NK_LAYOUT_STATIC_FREE:
				{
					bounds->x = (float) (layout.at_x + layout.row.item.x);
					bounds->w = (float) (layout.row.item.w);
					if (((bounds->x + bounds->w) > (layout.max_x)) && ((modify) != 0)) layout.max_x = (float) (bounds->x + bounds->w);
					bounds->x -= ((float) (layout.offset.x));
					bounds->y = (float) (layout.at_y + layout.row.item.y);
					bounds->y -= ((float) (layout.offset.y));
					bounds->h = (float) (layout.row.item.h);
					return;
				}
				case NK_LAYOUT_STATIC:
				{
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
					item_width = (float) (layout.row.ratio[layout.row.index]);
					item_offset = (float) (layout.row.item_offset);
					if ((modify) != 0) layout.row.item_offset += (float) (item_width);
				}
					break;
				case NK_LAYOUT_TEMPLATE:
				{
					item_width = (float) (layout.row.templates[layout.row.index]);
					item_offset = (float) (layout.row.item_offset);
					item_spacing = (float) ((float) (layout.row.index)*spacing.x);
					if ((modify) != 0) layout.row.item_offset += (float) (item_width);
				}
					break;
				default:
					;
					break;
			}

			bounds->w = (float) (item_width);
			bounds->h = (float) (layout.row.height - spacing.y);
			bounds->y = (float) (layout.at_y - (float) (layout.offset.y));
			bounds->x = (float) (layout.at_x + item_offset + item_spacing + padding.x);
			if (((bounds->x + bounds->w) > (layout.max_x)) && ((modify) != 0)) layout.max_x = (float) (bounds->x + bounds->w);
			bounds->x -= ((float) (layout.offset.x));
		}

		public static void nk_panel_alloc_space(nk_rect* bounds, nk_context ctx)
		{
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			if ((layout.row.index) >= (layout.row.columns)) nk_panel_alloc_row(ctx, win);
			nk_layout_widget_space(bounds, ctx, win, (int) (nk_true));
			layout.row.index++;
		}

		public static void nk_layout_peek(nk_rect* bounds, nk_context ctx)
		{
			float y;
			int index;
			nk_window win;
			nk_panel layout;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			y = (float) (layout.at_y);
			index = (int) (layout.row.index);
			if ((layout.row.index) >= (layout.row.columns))
			{
				layout.at_y += (float) (layout.row.height);
				layout.row.index = (int) (0);
			}

			nk_layout_widget_space(bounds, ctx, win, (int) (nk_false));
			if (layout.row.index == 0)
			{
				bounds->x -= (float) (layout.row.item_offset);
			}

			layout.at_y = (float) (y);
			layout.row.index = (int) (index);
		}

		public static int nk_tree_state_base(nk_context ctx, int type, nk_image img, char* title, ref int state)
		{
			nk_window win;
			nk_panel layout;
			nk_style style;
			nk_command_buffer _out_;
			nk_input _in_;
			nk_style_button button;
			int symbol;
			float row_height;
			nk_vec2 item_spacing = new nk_vec2();
			nk_rect header = new nk_rect();
			nk_rect sym = new nk_rect();
			nk_text text = new nk_text();
			uint ws = (uint) (0);
			int widget_state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			_out_ = win.buffer;
			style = ctx.style;
			item_spacing = (nk_vec2) (style.window.spacing);
			row_height = (float) (style.font.height + 2*style.tab.padding.y);
			nk_layout_set_min_row_height(ctx, (float) (row_height));
			nk_layout_row_dynamic(ctx, (float) (row_height), (int) (1));
			nk_layout_reset_min_row_height(ctx);
			widget_state = (int) (nk_widget(&header, ctx));
			if ((type) == (NK_TREE_TAB))
			{
				nk_style_item background = style.tab.background;
				if ((background.type) == (NK_STYLE_ITEM_IMAGE))
				{
					nk_draw_image(_out_, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
					text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
				}
				else
				{
					text.background = (nk_color) (background.data.color);
					nk_fill_rect(_out_, (nk_rect) (header), (float) (0), (nk_color) (style.tab.border_color));
					nk_fill_rect(_out_, (nk_rect) (nk_shrink_rect_((nk_rect) (header), (float) (style.tab.border))),
						(float) (style.tab.rounding), (nk_color) (background.data.color));
				}
			}
			else text.background = (nk_color) (style.window.background);
			_in_ = ((layout.flags & NK_WINDOW_ROM) == 0) ? ctx.input : null;
			_in_ = (((_in_) != null) && ((widget_state) == (NK_WIDGET_VALID))) ? ctx.input : null;
			if ((nk_button_behavior(ref ws, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				state = (int) (((state) == (NK_MAXIMIZED)) ? NK_MINIMIZED : NK_MAXIMIZED);
			if ((state) == (NK_MAXIMIZED))
			{
				symbol = (int) (style.tab.sym_maximize);
				if ((type) == (NK_TREE_TAB)) button = style.tab.tab_maximize_button;
				else button = style.tab.node_maximize_button;
			}
			else
			{
				symbol = (int) (style.tab.sym_minimize);
				if ((type) == (NK_TREE_TAB)) button = style.tab.tab_minimize_button;
				else button = style.tab.node_minimize_button;
			}

			{
				sym.w = (float) (sym.h = (float) (style.font.height));
				sym.y = (float) (header.y + style.tab.padding.y);
				sym.x = (float) (header.x + style.tab.padding.x);
				nk_do_button_symbol(ref ws, win.buffer, (nk_rect) (sym), (int) (symbol), (int) (NK_BUTTON_DEFAULT), button, null,
					style.font);
				if ((img) != null)
				{
					sym.x = (float) (sym.x + sym.w + 4*item_spacing.x);
					nk_draw_image(win.buffer, (nk_rect) (sym), img, (nk_color) (nk_white));
					sym.w = (float) (style.font.height + style.tab.spacing.x);
				}
			}

			{
				nk_rect label = new nk_rect();
				header.w = (float) ((header.w) < (sym.w + item_spacing.x) ? (sym.w + item_spacing.x) : (header.w));
				label.x = (float) (sym.x + sym.w + item_spacing.x);
				label.y = (float) (sym.y);
				label.w = (float) (header.w - (sym.w + item_spacing.y + style.tab.indent));
				label.h = (float) (style.font.height);
				text.text = (nk_color) (style.tab.text);
				text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
				nk_widget_text(_out_, (nk_rect) (label), title, (int) (nk_strlen(title)), &text, (uint) (NK_TEXT_LEFT), style.font);
			}

			if ((state) == (NK_MAXIMIZED))
			{
				layout.at_x = (float) (header.x + (float) (layout.offset.x) + style.tab.indent);
				layout.bounds.w = (float) ((layout.bounds.w) < (style.tab.indent) ? (style.tab.indent) : (layout.bounds.w));
				layout.bounds.w -= (float) (style.tab.indent + style.window.padding.x);
				layout.row.tree_depth++;
				return (int) (nk_true);
			}
			else return (int) (nk_false);
		}

		public static int nk_tree_base(nk_context ctx, int type, nk_image img, char* title, int initial_state, char* hash,
			int len, int line)
		{
			nk_window win = ctx.current;
			int title_len = (int) (0);
			uint tree_hash = (uint) (0);
			uint* state = null;
			if (hash == null)
			{
				title_len = (int) (nk_strlen(title));
				tree_hash = (uint) (nk_murmur_hash(title, (int) (title_len), (uint) (line)));
			}
			else tree_hash = (uint) (nk_murmur_hash(hash, (int) (len), (uint) (line)));
			state = nk_find_value(win, (uint) (tree_hash));
			if (state == null)
			{
				state = nk_add_value(ctx, win, (uint) (tree_hash), (uint) (0));
				*state = (uint) (initial_state);
			}

			int kkk = (int) (*state);
			int result = (int) (nk_tree_state_base(ctx, (int) (type), img, title, ref kkk));
			*state = (uint) kkk;
			return result;
		}

		public static int nk_tree_state_push(nk_context ctx, int type, char* title, ref int state)
		{
			return (int) (nk_tree_state_base(ctx, (int) (type), null, title, ref state));
		}

		public static int nk_tree_state_image_push(nk_context ctx, int type, nk_image img, char* title, ref int state)
		{
			return (int) (nk_tree_state_base(ctx, (int) (type), img, title, ref state));
		}

		public static void nk_tree_state_pop(nk_context ctx)
		{
			nk_window win = null;
			nk_panel layout = null;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			layout.at_x -= (float) (ctx.style.tab.indent + ctx.style.window.padding.x);
			layout.bounds.w += (float) (ctx.style.tab.indent + ctx.style.window.padding.x);
			layout.row.tree_depth--;
		}

		public static int nk_tree_push_hashed(nk_context ctx, int type, char* title, int initial_state, char* hash, int len,
			int line)
		{
			return (int) (nk_tree_base(ctx, (int) (type), null, title, (int) (initial_state), hash, (int) (len), (int) (line)));
		}

		public static int nk_tree_image_push_hashed(nk_context ctx, int type, nk_image img, char* title, int initial_state,
			char* hash, int len, int seed)
		{
			return (int) (nk_tree_base(ctx, (int) (type), img, title, (int) (initial_state), hash, (int) (len), (int) (seed)));
		}

		public static void nk_tree_pop(nk_context ctx)
		{
			nk_tree_state_pop(ctx);
		}

		public static nk_rect nk_widget_bounds(nk_context ctx)
		{
			nk_rect bounds = new nk_rect();
			if ((ctx == null) || (ctx.current == null))
				return (nk_rect) (nk_rect_((float) (0), (float) (0), (float) (0), (float) (0)));
			nk_layout_peek(&bounds, ctx);
			return (nk_rect) (bounds);
		}

		public static nk_vec2 nk_widget_position(nk_context ctx)
		{
			nk_rect bounds = new nk_rect();
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_layout_peek(&bounds, ctx);
			return (nk_vec2) (nk_vec2_((float) (bounds.x), (float) (bounds.y)));
		}

		public static nk_vec2 nk_widget_size(nk_context ctx)
		{
			nk_rect bounds = new nk_rect();
			if ((ctx == null) || (ctx.current == null)) return (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
			nk_layout_peek(&bounds, ctx);
			return (nk_vec2) (nk_vec2_((float) (bounds.w), (float) (bounds.h)));
		}

		public static float nk_widget_width(nk_context ctx)
		{
			nk_rect bounds = new nk_rect();
			if ((ctx == null) || (ctx.current == null)) return (float) (0);
			nk_layout_peek(&bounds, ctx);
			return (float) (bounds.w);
		}

		public static float nk_widget_height(nk_context ctx)
		{
			nk_rect bounds = new nk_rect();
			if ((ctx == null) || (ctx.current == null)) return (float) (0);
			nk_layout_peek(&bounds, ctx);
			return (float) (bounds.h);
		}

		public static int nk_widget_is_hovered(nk_context ctx)
		{
			nk_rect c = new nk_rect();
			nk_rect v = new nk_rect();
			nk_rect bounds = new nk_rect();
			if (((ctx == null) || (ctx.current == null)) || (ctx.active != ctx.current)) return (int) (0);
			c = (nk_rect) (ctx.current.layout.clip);
			c.x = ((float) ((int) (c.x)));
			c.y = ((float) ((int) (c.y)));
			c.w = ((float) ((int) (c.w)));
			c.h = ((float) ((int) (c.h)));
			nk_layout_peek(&bounds, ctx);
			nk_unify(ref v, ref c, (float) (bounds.x), (float) (bounds.y), (float) (bounds.x + bounds.w),
				(float) (bounds.y + bounds.h));
			if (
				!(!(((((bounds.x) > (c.x + c.w)) || ((bounds.x + bounds.w) < (c.x))) || ((bounds.y) > (c.y + c.h))) ||
				    ((bounds.y + bounds.h) < (c.y))))) return (int) (0);
			return (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (bounds)));
		}

		public static int nk_widget_is_mouse_clicked(nk_context ctx, int btn)
		{
			nk_rect c = new nk_rect();
			nk_rect v = new nk_rect();
			nk_rect bounds = new nk_rect();
			if (((ctx == null) || (ctx.current == null)) || (ctx.active != ctx.current)) return (int) (0);
			c = (nk_rect) (ctx.current.layout.clip);
			c.x = ((float) ((int) (c.x)));
			c.y = ((float) ((int) (c.y)));
			c.w = ((float) ((int) (c.w)));
			c.h = ((float) ((int) (c.h)));
			nk_layout_peek(&bounds, ctx);
			nk_unify(ref v, ref c, (float) (bounds.x), (float) (bounds.y), (float) (bounds.x + bounds.w),
				(float) (bounds.y + bounds.h));
			if (
				!(!(((((bounds.x) > (c.x + c.w)) || ((bounds.x + bounds.w) < (c.x))) || ((bounds.y) > (c.y + c.h))) ||
				    ((bounds.y + bounds.h) < (c.y))))) return (int) (0);
			return (int) (nk_input_mouse_clicked(ctx.input, (int) (btn), (nk_rect) (bounds)));
		}

		public static int nk_widget_has_mouse_click_down(nk_context ctx, int btn, int down)
		{
			nk_rect c = new nk_rect();
			nk_rect v = new nk_rect();
			nk_rect bounds = new nk_rect();
			if (((ctx == null) || (ctx.current == null)) || (ctx.active != ctx.current)) return (int) (0);
			c = (nk_rect) (ctx.current.layout.clip);
			c.x = ((float) ((int) (c.x)));
			c.y = ((float) ((int) (c.y)));
			c.w = ((float) ((int) (c.w)));
			c.h = ((float) ((int) (c.h)));
			nk_layout_peek(&bounds, ctx);
			nk_unify(ref v, ref c, (float) (bounds.x), (float) (bounds.y), (float) (bounds.x + bounds.w),
				(float) (bounds.y + bounds.h));
			if (
				!(!(((((bounds.x) > (c.x + c.w)) || ((bounds.x + bounds.w) < (c.x))) || ((bounds.y) > (c.y + c.h))) ||
				    ((bounds.y + bounds.h) < (c.y))))) return (int) (0);
			return (int) (nk_input_has_mouse_click_down_in_rect(ctx.input, (int) (btn), (nk_rect) (bounds), (int) (down)));
		}

		public static int nk_widget(nk_rect* bounds, nk_context ctx)
		{
			nk_rect c = new nk_rect();
			nk_rect v = new nk_rect();
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (NK_WIDGET_INVALID);
			nk_panel_alloc_space(bounds, ctx);
			win = ctx.current;
			layout = win.layout;
			_in_ = ctx.input;
			c = (nk_rect) (layout.clip);
			bounds->x = ((float) ((int) (bounds->x)));
			bounds->y = ((float) ((int) (bounds->y)));
			bounds->w = ((float) ((int) (bounds->w)));
			bounds->h = ((float) ((int) (bounds->h)));
			c.x = ((float) ((int) (c.x)));
			c.y = ((float) ((int) (c.y)));
			c.w = ((float) ((int) (c.w)));
			c.h = ((float) ((int) (c.h)));
			nk_unify(ref v, ref c, (float) (bounds->x), (float) (bounds->y), (float) (bounds->x + bounds->w),
				(float) (bounds->y + bounds->h));
			if (
				!(!(((((bounds->x) > (c.x + c.w)) || ((bounds->x + bounds->w) < (c.x))) || ((bounds->y) > (c.y + c.h))) ||
				    ((bounds->y + bounds->h) < (c.y))))) return (int) (NK_WIDGET_INVALID);
			if (
				!((((v.x) <= (_in_.mouse.pos.x)) && ((_in_.mouse.pos.x) < (v.x + v.w))) &&
				  (((v.y) <= (_in_.mouse.pos.y)) && ((_in_.mouse.pos.y) < (v.y + v.h))))) return (int) (NK_WIDGET_ROM);
			return (int) (NK_WIDGET_VALID);
		}

		public static int nk_widget_fitting(nk_rect* bounds, nk_context ctx, nk_vec2 item_padding)
		{
			nk_window win;
			nk_style style;
			nk_panel layout;
			int state;
			nk_vec2 panel_padding = new nk_vec2();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (NK_WIDGET_INVALID);
			win = ctx.current;
			style = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(bounds, ctx));
			panel_padding = (nk_vec2) (nk_panel_get_padding(style, (int) (layout.type)));
			if ((layout.row.index) == (1))
			{
				bounds->w += (float) (panel_padding.x);
				bounds->x -= (float) (panel_padding.x);
			}
			else bounds->x -= (float) (item_padding.x);
			if ((layout.row.index) == (layout.row.columns)) bounds->w += (float) (panel_padding.x);
			else bounds->w += (float) (item_padding.x);
			return (int) (state);
		}

		public static void nk_spacing(nk_context ctx, int cols)
		{
			nk_window win;
			nk_panel layout;
			nk_rect none = new nk_rect();
			int i;
			int index;
			int rows;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			layout = win.layout;
			index = (int) ((layout.row.index + cols)%layout.row.columns);
			rows = (int) ((layout.row.index + cols)/layout.row.columns);
			if ((rows) != 0)
			{
				for (i = (int) (0); (i) < (rows); ++i)
				{
					nk_panel_alloc_row(ctx, win);
				}
				cols = (int) (index);
			}

			if ((layout.row.type != NK_LAYOUT_DYNAMIC_FIXED) && (layout.row.type != NK_LAYOUT_STATIC_FIXED))
			{
				for (i = (int) (0); (i) < (cols); ++i)
				{
					nk_panel_alloc_space(&none, ctx);
				}
			}

			layout.row.index = (int) (index);
		}

		public static void nk_text_colored(nk_context ctx, char* str, int len, uint alignment, nk_color color)
		{
			nk_window win;
			nk_style style;
			nk_vec2 item_padding = new nk_vec2();
			nk_rect bounds = new nk_rect();
			nk_text text = new nk_text();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			style = ctx.style;
			nk_panel_alloc_space(&bounds, ctx);
			item_padding = (nk_vec2) (style.text.padding);
			text.padding.x = (float) (item_padding.x);
			text.padding.y = (float) (item_padding.y);
			text.background = (nk_color) (style.window.background);
			text.text = (nk_color) (color);
			nk_widget_text(win.buffer, (nk_rect) (bounds), str, (int) (len), &text, (uint) (alignment), style.font);
		}

		public static void nk_text_wrap_colored(nk_context ctx, char* str, int len, nk_color color)
		{
			nk_window win;
			nk_style style;
			nk_vec2 item_padding = new nk_vec2();
			nk_rect bounds = new nk_rect();
			nk_text text = new nk_text();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			style = ctx.style;
			nk_panel_alloc_space(&bounds, ctx);
			item_padding = (nk_vec2) (style.text.padding);
			text.padding.x = (float) (item_padding.x);
			text.padding.y = (float) (item_padding.y);
			text.background = (nk_color) (style.window.background);
			text.text = (nk_color) (color);
			nk_widget_text_wrap(win.buffer, (nk_rect) (bounds), str, (int) (len), &text, style.font);
		}

		public static void nk_text_(nk_context ctx, char* str, int len, uint alignment)
		{
			if (ctx == null) return;
			nk_text_colored(ctx, str, (int) (len), (uint) (alignment), (nk_color) (ctx.style.text.color));
		}

		public static void nk_text_wrap(nk_context ctx, char* str, int len)
		{
			if (ctx == null) return;
			nk_text_wrap_colored(ctx, str, (int) (len), (nk_color) (ctx.style.text.color));
		}

		public static void nk_label(nk_context ctx, char* str, uint alignment)
		{
			nk_text_(ctx, str, (int) (nk_strlen(str)), (uint) (alignment));
		}

		public static void nk_label_colored(nk_context ctx, char* str, uint align, nk_color color)
		{
			nk_text_colored(ctx, str, (int) (nk_strlen(str)), (uint) (align), (nk_color) (color));
		}

		public static void nk_label_wrap(nk_context ctx, char* str)
		{
			nk_text_wrap(ctx, str, (int) (nk_strlen(str)));
		}

		public static void nk_label_colored_wrap(nk_context ctx, char* str, nk_color color)
		{
			nk_text_wrap_colored(ctx, str, (int) (nk_strlen(str)), (nk_color) (color));
		}

		public static void nk_image_(nk_context ctx, nk_image img)
		{
			nk_window win;
			nk_rect bounds = new nk_rect();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			win = ctx.current;
			if (nk_widget(&bounds, ctx) == 0) return;
			nk_draw_image(win.buffer, (nk_rect) (bounds), img, (nk_color) (nk_white));
		}

		public static void nk_button_set_behavior(nk_context ctx, int behavior)
		{
			if (ctx == null) return;
			ctx.button_behavior = (int) (behavior);
		}

		public static int nk_button_push_behavior(nk_context ctx, int behavior)
		{
			nk_config_stack_button_behavior button_stack;
			nk_config_stack_button_behavior_element element;
			if (ctx == null) return (int) (0);
			button_stack = ctx.stacks.button_behaviors;
			if ((button_stack.head) >= ((int) ((int) button_stack.elements.Length))) return (int) (0);
			element = button_stack.elements[button_stack.head++];
			element.old_value = (int) (ctx.button_behavior);
			ctx.button_behavior = (int) (behavior);
			return (int) (1);
		}

		public static int nk_button_pop_behavior(nk_context ctx)
		{
			nk_config_stack_button_behavior button_stack;
			nk_config_stack_button_behavior_element element;
			if (ctx == null) return (int) (0);
			button_stack = ctx.stacks.button_behaviors;
			if ((button_stack.head) < (1)) return (int) (0);
			element = button_stack.elements[--button_stack.head];
			ctx.button_behavior = element.old_value;
			return (int) (1);
		}

		public static int nk_button_text_styled(nk_context ctx, nk_style_button style, char* title, int len)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			if ((((style == null) || (ctx == null)) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_button_text(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), title, (int) (len),
						(uint) (style.text_alignment), (int) (ctx.button_behavior), style, _in_, ctx.style.font));
		}

		public static int nk_button_text(nk_context ctx, char* title, int len)
		{
			if (ctx == null) return (int) (0);
			return (int) (nk_button_text_styled(ctx, ctx.style.button, title, (int) (len)));
		}

		public static int nk_button_label_styled(nk_context ctx, nk_style_button style, char* title)
		{
			return (int) (nk_button_text_styled(ctx, style, title, (int) (nk_strlen(title))));
		}

		public static int nk_button_label(nk_context ctx, char* title)
		{
			return (int) (nk_button_text(ctx, title, (int) (nk_strlen(title))));
		}

		public static int nk_button_color(nk_context ctx, nk_color color)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style_button button = new nk_style_button();
			int ret = (int) (0);
			nk_rect bounds = new nk_rect();
			nk_rect content = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			button = (nk_style_button) (ctx.style.button);
			button.normal = (nk_style_item) (nk_style_item_color((nk_color) (color)));
			button.hover = (nk_style_item) (nk_style_item_color((nk_color) (color)));
			button.active = (nk_style_item) (nk_style_item_color((nk_color) (color)));
			ret =
				(int)
					(nk_do_button(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), button, _in_, (int) (ctx.button_behavior),
						&content));
			nk_draw_button(win.buffer, &bounds, (uint) (ctx.last_widget_state), button);
			return (int) (ret);
		}

		public static int nk_button_symbol_styled(nk_context ctx, nk_style_button style, int symbol)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_button_symbol(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (int) (symbol),
						(int) (ctx.button_behavior), style, _in_, ctx.style.font));
		}

		public static int nk_button_symbol(nk_context ctx, int symbol)
		{
			if (ctx == null) return (int) (0);
			return (int) (nk_button_symbol_styled(ctx, ctx.style.button, (int) (symbol)));
		}

		public static int nk_button_image_styled(nk_context ctx, nk_style_button style, nk_image img)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_button_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (nk_image) (img),
						(int) (ctx.button_behavior), style, _in_));
		}

		public static int nk_button_image(nk_context ctx, nk_image img)
		{
			if (ctx == null) return (int) (0);
			return (int) (nk_button_image_styled(ctx, ctx.style.button, (nk_image) (img)));
		}

		public static int nk_button_symbol_text_styled(nk_context ctx, nk_style_button style, int symbol, char* text, int len,
			uint align)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_button_text_symbol(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (int) (symbol), text,
						(int) (len), (uint) (align), (int) (ctx.button_behavior), style, ctx.style.font, _in_));
		}

		public static int nk_button_symbol_text(nk_context ctx, int symbol, char* text, int len, uint align)
		{
			if (ctx == null) return (int) (0);
			return (int) (nk_button_symbol_text_styled(ctx, ctx.style.button, (int) (symbol), text, (int) (len), (uint) (align)));
		}

		public static int nk_button_symbol_label(nk_context ctx, int symbol, char* label, uint align)
		{
			return (int) (nk_button_symbol_text(ctx, (int) (symbol), label, (int) (nk_strlen(label)), (uint) (align)));
		}

		public static int nk_button_symbol_label_styled(nk_context ctx, nk_style_button style, int symbol, char* title,
			uint align)
		{
			return
				(int) (nk_button_symbol_text_styled(ctx, style, (int) (symbol), title, (int) (nk_strlen(title)), (uint) (align)));
		}

		public static int nk_button_image_text_styled(nk_context ctx, nk_style_button style, nk_image img, char* text, int len,
			uint align)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_button_text_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (nk_image) (img), text,
						(int) (len), (uint) (align), (int) (ctx.button_behavior), style, ctx.style.font, _in_));
		}

		public static int nk_button_image_text(nk_context ctx, nk_image img, char* text, int len, uint align)
		{
			return
				(int) (nk_button_image_text_styled(ctx, ctx.style.button, (nk_image) (img), text, (int) (len), (uint) (align)));
		}

		public static int nk_button_image_label(nk_context ctx, nk_image img, char* label, uint align)
		{
			return (int) (nk_button_image_text(ctx, (nk_image) (img), label, (int) (nk_strlen(label)), (uint) (align)));
		}

		public static int nk_button_image_label_styled(nk_context ctx, nk_style_button style, nk_image img, char* label,
			uint text_alignment)
		{
			return
				(int)
					(nk_button_image_text_styled(ctx, style, (nk_image) (img), label, (int) (nk_strlen(label)), (uint) (text_alignment)));
		}

		public static int nk_selectable_text(nk_context ctx, char* str, int len, uint align, ref int value)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style style;
			int state;
			nk_rect bounds = new nk_rect();
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (value == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			style = ctx.style;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_selectable(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), str, (int) (len), (uint) (align),
						ref value, style.selectable, _in_, style.font));
		}

		public static int nk_selectable_image_text(nk_context ctx, nk_image img, char* str, int len, uint align, ref int value)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style style;
			int state;
			nk_rect bounds = new nk_rect();
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (value == null)) return (int) (0);
			win = ctx.current;
			layout = win.layout;
			style = ctx.style;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_selectable_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), str, (int) (len), (uint) (align),
						ref value, img, style.selectable, _in_, style.font));
		}

		public static int nk_select_text(nk_context ctx, char* str, int len, uint align, int value)
		{
			nk_selectable_text(ctx, str, (int) (len), (uint) (align), ref value);
			return (int) (value);
		}

		public static int nk_selectable_label(nk_context ctx, char* str, uint align, ref int value)
		{
			return (int) (nk_selectable_text(ctx, str, (int) (nk_strlen(str)), (uint) (align), ref value));
		}

		public static int nk_selectable_image_label(nk_context ctx, nk_image img, char* str, uint align, ref int value)
		{
			return
				(int) (nk_selectable_image_text(ctx, (nk_image) (img), str, (int) (nk_strlen(str)), (uint) (align), ref value));
		}

		public static int nk_select_label(nk_context ctx, char* str, uint align, int value)
		{
			nk_selectable_text(ctx, str, (int) (nk_strlen(str)), (uint) (align), ref value);
			return (int) (value);
		}

		public static int nk_select_image_label(nk_context ctx, nk_image img, char* str, uint align, int value)
		{
			nk_selectable_image_text(ctx, (nk_image) (img), str, (int) (nk_strlen(str)), (uint) (align), ref value);
			return (int) (value);
		}

		public static int nk_select_image_text(nk_context ctx, nk_image img, char* str, int len, uint align, int value)
		{
			nk_selectable_image_text(ctx, (nk_image) (img), str, (int) (len), (uint) (align), ref value);
			return (int) (value);
		}

		public static int nk_check_text(nk_context ctx, char* text, int len, int active)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style style;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (active);
			win = ctx.current;
			style = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (active);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			nk_do_toggle(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), &active, text, (int) (len),
				(int) (NK_TOGGLE_CHECK), style.checkbox, _in_, style.font);
			return (int) (active);
		}

		public static uint nk_check_flags_text(nk_context ctx, char* text, int len, uint flags, uint value)
		{
			int old_active;
			if ((ctx == null) || (text == null)) return (uint) (flags);
			old_active = ((int) ((flags & value) & value));
			if ((nk_check_text(ctx, text, (int) (len), (int) (old_active))) != 0) flags |= (uint) (value);
			else flags &= (uint) (~value);
			return (uint) (flags);
		}

		public static int nk_checkbox_text(nk_context ctx, char* text, int len, int* active)
		{
			int old_val;
			if (((ctx == null) || (text == null)) || (active == null)) return (int) (0);
			old_val = (int) (*active);
			*active = (int) (nk_check_text(ctx, text, (int) (len), (int) (*active)));
			return (old_val != *active) ? 1 : 0;
		}

		public static int nk_checkbox_flags_text(nk_context ctx, char* text, int len, uint* flags, uint value)
		{
			int active;
			if (((ctx == null) || (text == null)) || (flags == null)) return (int) (0);
			active = ((int) ((*flags & value) & value));
			if ((nk_checkbox_text(ctx, text, (int) (len), &active)) != 0)
			{
				if ((active) != 0) *flags |= (uint) (value);
				else *flags &= (uint) (~value);
				return (int) (1);
			}

			return (int) (0);
		}

		public static int nk_check_label(nk_context ctx, char* label, int active)
		{
			return (int) (nk_check_text(ctx, label, (int) (nk_strlen(label)), (int) (active)));
		}

		public static uint nk_check_flags_label(nk_context ctx, char* label, uint flags, uint value)
		{
			return (uint) (nk_check_flags_text(ctx, label, (int) (nk_strlen(label)), (uint) (flags), (uint) (value)));
		}

		public static int nk_checkbox_label(nk_context ctx, char* label, int* active)
		{
			return (int) (nk_checkbox_text(ctx, label, (int) (nk_strlen(label)), active));
		}

		public static int nk_checkbox_flags_label(nk_context ctx, char* label, uint* flags, uint value)
		{
			return (int) (nk_checkbox_flags_text(ctx, label, (int) (nk_strlen(label)), flags, (uint) (value)));
		}

		public static int nk_option_text(nk_context ctx, char* text, int len, int is_active)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style style;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (is_active);
			win = ctx.current;
			style = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (state);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			nk_do_toggle(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), &is_active, text, (int) (len),
				(int) (NK_TOGGLE_OPTION), style.option, _in_, style.font);
			return (int) (is_active);
		}

		public static int nk_radio_text(nk_context ctx, char* text, int len, int* active)
		{
			int old_value;
			if (((ctx == null) || (text == null)) || (active == null)) return (int) (0);
			old_value = (int) (*active);
			*active = (int) (nk_option_text(ctx, text, (int) (len), (int) (old_value)));
			return (old_value != *active) ? 1 : 0;
		}

		public static int nk_option_label(nk_context ctx, char* label, int active)
		{
			return (int) (nk_option_text(ctx, label, (int) (nk_strlen(label)), (int) (active)));
		}

		public static int nk_radio_label(nk_context ctx, char* label, int* active)
		{
			return (int) (nk_radio_text(ctx, label, (int) (nk_strlen(label)), active));
		}

		public static int nk_slider_float(nk_context ctx, float min_value, ref float value, float max_value, float value_step)
		{
			nk_window win;
			nk_panel layout;
			nk_input _in_;
			nk_style style;
			int ret = (int) (0);
			float old_value;
			nk_rect bounds = new nk_rect();
			int state;
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (value == null))
				return (int) (ret);
			win = ctx.current;
			style = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (ret);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			old_value = (float) (value);
			value =
				(float)
					(nk_do_slider(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (float) (min_value), (float) (old_value),
						(float) (max_value), (float) (value_step), style.slider, _in_, style.font));
			return (((old_value) > (value)) || ((old_value) < (value))) ? 1 : 0;
		}

		public static float nk_slide_float(nk_context ctx, float min, float val, float max, float step)
		{
			nk_slider_float(ctx, (float) (min), ref val, (float) (max), (float) (step));
			return (float) (val);
		}

		public static int nk_slide_int(nk_context ctx, int min, int val, int max, int step)
		{
			float value = (float) (val);
			nk_slider_float(ctx, (float) (min), ref value, (float) (max), (float) (step));
			return (int) (value);
		}

		public static int nk_slider_int(nk_context ctx, int min, ref int val, int max, int step)
		{
			int ret;
			float value = (float) (val);
			ret = (int) (nk_slider_float(ctx, (float) (min), ref value, (float) (max), (float) (step)));
			val = ((int) (value));
			return (int) (ret);
		}

		public static int nk_progress(nk_context ctx, ref ulong cur, ulong max, int is_modifyable)
		{
			nk_window win;
			nk_panel layout;
			nk_style style;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int state;
			ulong old_value;
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null))) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			old_value = (ulong) (cur);
			cur =
				(ulong)
					(nk_do_progress(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (ulong) (cur), (ulong) (max),
						(int) (is_modifyable), style.progress, _in_));
			return (cur != old_value) ? 1 : 0;
		}

		public static ulong nk_prog(nk_context ctx, ref ulong cur, ulong max, int modifyable)
		{
			nk_progress(ctx, ref cur, (ulong) (max), (int) (modifyable));
			return (ulong) (cur);
		}

		public static void nk_edit_focus(nk_context ctx, uint flags)
		{
			uint hash;
			nk_window win;
			if ((ctx == null) || (ctx.current == null)) return;
			win = ctx.current;
			hash = (uint) (win.edit.seq);
			win.edit.active = (int) (nk_true);
			win.edit.name = (uint) (hash);
			if ((flags & NK_EDIT_ALWAYS_INSERT_MODE) != 0) win.edit.mode = (byte) (NK_TEXT_EDIT_MODE_INSERT);
		}

		public static void nk_edit_unfocus(nk_context ctx)
		{
			nk_window win;
			if ((ctx == null) || (ctx.current == null)) return;
			win = ctx.current;
			win.edit.active = (int) (nk_false);
			win.edit.name = (uint) (0);
		}

		public static uint nk_edit_string(nk_context ctx, uint flags, char* memory, ref int len, int max,
			NkPluginFilter filter)
		{
			uint hash;
			uint state;
			nk_text_edit edit;
			nk_window win;
			if (((ctx == null) || (memory == null)) || (len == null)) return (uint) (0);
			filter = (filter == null) ? nk_filter_default : filter;
			win = ctx.current;
			hash = (uint) (win.edit.seq);
			edit = ctx.text_edit;
			nk_textedit_clear_state(ctx.text_edit,
				(int) ((flags & NK_EDIT_MULTILINE) != 0 ? NK_TEXT_EDIT_MULTI_LINE : NK_TEXT_EDIT_SINGLE_LINE), filter);
			if (((win.edit.active) != 0) && ((hash) == (win.edit.name)))
			{
				if ((flags & NK_EDIT_NO_CURSOR) != 0) edit.cursor = (int) (nk_utf_len(memory, (int) (len)));
				else edit.cursor = (int) (win.edit.cursor);
				if ((flags & NK_EDIT_SELECTABLE) == 0)
				{
					edit.select_start = (int) (win.edit.cursor);
					edit.select_end = (int) (win.edit.cursor);
				}
				else
				{
					edit.select_start = (int) (win.edit.sel_start);
					edit.select_end = (int) (win.edit.sel_end);
				}
				edit.mode = (byte) (win.edit.mode);
				edit.scrollbar.x = ((float) (win.edit.scrollbar.x));
				edit.scrollbar.y = ((float) (win.edit.scrollbar.y));
				edit.active = (byte) (nk_true);
			}
			else edit.active = (byte) (nk_false);
			max = (int) ((1) < (max) ? (max) : (1));
			len = (int) ((len) < (max - 1) ? (len) : (max - 1));
			nk_str_init_fixed(edit._string_, memory, (ulong) (max));
			edit._string_.buffer.allocated = ((ulong) (len));
			edit._string_.len = (int) (nk_utf_len(memory, (int) (len)));
			state = (uint) (nk_edit_buffer(ctx, (uint) (flags), edit, filter));
			len = ((int) (edit._string_.buffer.allocated));
			if ((edit.active) != 0)
			{
				win.edit.cursor = (int) (edit.cursor);
				win.edit.sel_start = (int) (edit.select_start);
				win.edit.sel_end = (int) (edit.select_end);
				win.edit.mode = (byte) (edit.mode);
				win.edit.scrollbar.x = ((uint) (edit.scrollbar.x));
				win.edit.scrollbar.y = ((uint) (edit.scrollbar.y));
			}

			return (uint) (state);
		}

		public static uint nk_edit_buffer(nk_context ctx, uint flags, nk_text_edit edit, NkPluginFilter filter)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			int state;
			nk_rect bounds = new nk_rect();
			uint ret_flags = (uint) (0);
			byte prev_state;
			uint hash;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (uint) (0);
			win = ctx.current;
			style = ctx.style;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (uint) (state);
			_in_ = (win.layout.flags & NK_WINDOW_ROM) != 0 ? null : ctx.input;
			hash = (uint) (win.edit.seq++);
			if (((win.edit.active) != 0) && ((hash) == (win.edit.name)))
			{
				if ((flags & NK_EDIT_NO_CURSOR) != 0) edit.cursor = (int) (edit._string_.len);
				if ((flags & NK_EDIT_SELECTABLE) == 0)
				{
					edit.select_start = (int) (edit.cursor);
					edit.select_end = (int) (edit.cursor);
				}
				if ((flags & NK_EDIT_CLIPBOARD) != 0) edit.clip = (nk_clipboard) (ctx.clip);
				edit.active = ((byte) (win.edit.active));
			}
			else edit.active = (byte) (nk_false);
			edit.mode = (byte) (win.edit.mode);
			filter = (filter == null) ? nk_filter_default : filter;
			prev_state = (byte) (edit.active);
			_in_ = (flags & NK_EDIT_READ_ONLY) != 0 ? null : _in_;
			ret_flags =
				(uint)
					(nk_do_edit(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (uint) (flags), filter, edit, style.edit,
						_in_, style.font));
			if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0)
				ctx.style.cursor_active = ctx.style.cursors[NK_CURSOR_TEXT];
			if (((edit.active) != 0) && (prev_state != edit.active))
			{
				win.edit.active = (int) (nk_true);
				win.edit.name = (uint) (hash);
			}
			else if (((prev_state) != 0) && (edit.active == 0))
			{
				win.edit.active = (int) (nk_false);
			}

			return (uint) (ret_flags);
		}

		public static uint nk_edit_string_zero_terminated(nk_context ctx, uint flags, char* buffer, int max,
			NkPluginFilter filter)
		{
			uint result;
			int len = (int) (nk_strlen(buffer));
			result = (uint) (nk_edit_string(ctx, (uint) (flags), buffer, ref len, (int) (max), filter));
			buffer[(((max - 1) < (0) ? (0) : (max - 1)) < (len) ? ((max - 1) < (0) ? (0) : (max - 1)) : (len))] = ('\0');
			return (uint) (result);
		}

		public static nk_property_variant nk_property_variant_int(int value, int min_value, int max_value, int step)
		{
			nk_property_variant result = new nk_property_variant();
			result.kind = (int) (NK_PROPERTY_INT);
			result.value.i = (int) (value);
			result.min_value.i = (int) (min_value);
			result.max_value.i = (int) (max_value);
			result.step.i = (int) (step);
			return (nk_property_variant) (result);
		}

		public static nk_property_variant nk_property_variant_float(float value, float min_value, float max_value, float step)
		{
			nk_property_variant result = new nk_property_variant();
			result.kind = (int) (NK_PROPERTY_FLOAT);
			result.value.f = (float) (value);
			result.min_value.f = (float) (min_value);
			result.max_value.f = (float) (max_value);
			result.step.f = (float) (step);
			return (nk_property_variant) (result);
		}

		public static nk_property_variant nk_property_variant_double(double value, double min_value, double max_value,
			double step)
		{
			nk_property_variant result = new nk_property_variant();
			result.kind = (int) (NK_PROPERTY_DOUBLE);
			result.value.d = (double) (value);
			result.min_value.d = (double) (min_value);
			result.max_value.d = (double) (max_value);
			result.step.d = (double) (step);
			return (nk_property_variant) (result);
		}

		public static void nk_property_int(nk_context ctx, char* name, int min, ref int val, int max, int step,
			float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if ((((ctx == null) || (ctx.current == null)) || (name == null)) || (val == null)) return;
			variant = (nk_property_variant) (nk_property_variant_int((int) (val), (int) (min), (int) (max), (int) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_INT));
			val = (int) (variant.value.i);
		}

		public static void nk_property_float(nk_context ctx, char* name, float min, ref float val, float max, float step,
			float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if ((((ctx == null) || (ctx.current == null)) || (name == null)) || (val == null)) return;
			variant =
				(nk_property_variant) (nk_property_variant_float((float) (val), (float) (min), (float) (max), (float) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_FLOAT));
			val = (float) (variant.value.f);
		}

		public static void nk_property_double(nk_context ctx, char* name, double min, ref double val, double max, double step,
			float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if ((((ctx == null) || (ctx.current == null)) || (name == null)) || (val == null)) return;
			variant =
				(nk_property_variant) (nk_property_variant_double((double) (val), (double) (min), (double) (max), (double) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_FLOAT));
			val = (double) (variant.value.d);
		}

		public static int nk_propertyi(nk_context ctx, char* name, int min, int val, int max, int step, float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if (((ctx == null) || (ctx.current == null)) || (name == null)) return (int) (val);
			variant = (nk_property_variant) (nk_property_variant_int((int) (val), (int) (min), (int) (max), (int) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_INT));
			val = (int) (variant.value.i);
			return (int) (val);
		}

		public static float nk_propertyf(nk_context ctx, char* name, float min, float val, float max, float step,
			float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if (((ctx == null) || (ctx.current == null)) || (name == null)) return (float) (val);
			variant =
				(nk_property_variant) (nk_property_variant_float((float) (val), (float) (min), (float) (max), (float) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_FLOAT));
			val = (float) (variant.value.f);
			return (float) (val);
		}

		public static double nk_propertyd(nk_context ctx, char* name, double min, double val, double max, double step,
			float inc_per_pixel)
		{
			nk_property_variant variant = new nk_property_variant();
			if (((ctx == null) || (ctx.current == null)) || (name == null)) return (double) (val);
			variant =
				(nk_property_variant) (nk_property_variant_double((double) (val), (double) (min), (double) (max), (double) (step)));
			nk_property_(ctx, name, &variant, (float) (inc_per_pixel), (int) (NK_FILTER_FLOAT));
			val = (double) (variant.value.d);
			return (double) (val);
		}

		public static int nk_color_pick(nk_context ctx, nk_colorf* color, int fmt)
		{
			nk_window win;
			nk_panel layout;
			nk_style config;
			nk_input _in_;
			int state;
			nk_rect bounds = new nk_rect();
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (color == null)) return (int) (0);
			win = ctx.current;
			config = ctx.style;
			layout = win.layout;
			state = (int) (nk_widget(&bounds, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			return
				(int)
					(nk_do_color_picker(ref ctx.last_widget_state, win.buffer, color, (int) (fmt), (nk_rect) (bounds),
						(nk_vec2) (nk_vec2_((float) (0), (float) (0))), _in_, config.font));
		}

		public static nk_colorf nk_color_picker(nk_context ctx, nk_colorf color, int fmt)
		{
			nk_color_pick(ctx, &color, (int) (fmt));
			return (nk_colorf) (color);
		}

		public static int nk_chart_begin_colored(nk_context ctx, int type, nk_color color, nk_color highlight, int count,
			float min_value, float max_value)
		{
			nk_window win;
			nk_chart chart;
			nk_style config;
			nk_style_chart style;
			nk_style_item background;
			nk_rect bounds = new nk_rect();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			if (nk_widget(&bounds, ctx) == 0)
			{
				chart = ctx.current.layout.chart;
				return (int) (0);
			}

			win = ctx.current;
			config = ctx.style;
			chart = win.layout.chart;
			style = config.chart;

			chart.x = (float) (bounds.x + style.padding.x);
			chart.y = (float) (bounds.y + style.padding.y);
			chart.w = (float) (bounds.w - 2*style.padding.x);
			chart.h = (float) (bounds.h - 2*style.padding.y);
			chart.w = (float) ((chart.w) < (2*style.padding.x) ? (2*style.padding.x) : (chart.w));
			chart.h = (float) ((chart.h) < (2*style.padding.y) ? (2*style.padding.y) : (chart.h));
			{
				nk_chart_slot slot = chart.slots[chart.slot++];
				slot.type = (int) (type);
				slot.count = (int) (count);
				slot.color = (nk_color) (color);
				slot.highlight = (nk_color) (highlight);
				slot.min = (float) ((min_value) < (max_value) ? (min_value) : (max_value));
				slot.max = (float) ((min_value) < (max_value) ? (max_value) : (min_value));
				slot.range = (float) (slot.max - slot.min);
			}

			background = style.background;
			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(win.buffer, (nk_rect) (bounds), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				nk_fill_rect(win.buffer, (nk_rect) (bounds), (float) (style.rounding), (nk_color) (style.border_color));
				nk_fill_rect(win.buffer, (nk_rect) (nk_shrink_rect_((nk_rect) (bounds), (float) (style.border))),
					(float) (style.rounding), (nk_color) (style.background.data.color));
			}

			return (int) (1);
		}

		public static int nk_chart_begin(nk_context ctx, int type, int count, float min_value, float max_value)
		{
			return
				(int)
					(nk_chart_begin_colored(ctx, (int) (type), (nk_color) (ctx.style.chart.color),
						(nk_color) (ctx.style.chart.selected_color), (int) (count), (float) (min_value), (float) (max_value)));
		}

		public static void nk_chart_add_slot_colored(nk_context ctx, int type, nk_color color, nk_color highlight, int count,
			float min_value, float max_value)
		{
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			if ((ctx.current.layout.chart.slot) >= (4)) return;
			{
				nk_chart chart = ctx.current.layout.chart;
				nk_chart_slot slot = chart.slots[chart.slot++];
				slot.type = (int) (type);
				slot.count = (int) (count);
				slot.color = (nk_color) (color);
				slot.highlight = (nk_color) (highlight);
				slot.min = (float) ((min_value) < (max_value) ? (min_value) : (max_value));
				slot.max = (float) ((min_value) < (max_value) ? (max_value) : (min_value));
				slot.range = (float) (slot.max - slot.min);
			}

		}

		public static void nk_chart_add_slot(nk_context ctx, int type, int count, float min_value, float max_value)
		{
			nk_chart_add_slot_colored(ctx, (int) (type), (nk_color) (ctx.style.chart.color),
				(nk_color) (ctx.style.chart.selected_color), (int) (count), (float) (min_value), (float) (max_value));
		}

		public static uint nk_chart_push_line(nk_context ctx, nk_window win, nk_chart g, float value, int slot)
		{
			nk_panel layout = win.layout;
			nk_input i = ctx.input;
			nk_command_buffer _out_ = win.buffer;
			uint ret = (uint) (0);
			nk_vec2 cur = new nk_vec2();
			nk_rect bounds = new nk_rect();
			nk_color color = new nk_color();
			float step;
			float range;
			float ratio;
			step = (float) (g.w/(float) (g.slots[slot].count));
			range = (float) (g.slots[slot].max - g.slots[slot].min);
			ratio = (float) ((value - g.slots[slot].min)/range);
			if ((g.slots[slot].index) == (0))
			{
				g.slots[slot].last.x = (float) (g.x);
				g.slots[slot].last.y = (float) ((g.y + g.h) - ratio*g.h);
				bounds.x = (float) (g.slots[slot].last.x - 2);
				bounds.y = (float) (g.slots[slot].last.y - 2);
				bounds.w = (float) (bounds.h = (float) (4));
				color = (nk_color) (g.slots[slot].color);
				if (((layout.flags & NK_WINDOW_ROM) == 0) &&
				    ((((g.slots[slot].last.x - 3) <= (i.mouse.pos.x)) && ((i.mouse.pos.x) < (g.slots[slot].last.x - 3 + 6))) &&
				     (((g.slots[slot].last.y - 3) <= (i.mouse.pos.y)) && ((i.mouse.pos.y) < (g.slots[slot].last.y - 3 + 6)))))
				{
					ret = (uint) ((nk_input_is_mouse_hovering_rect(i, (nk_rect) (bounds))) != 0 ? NK_CHART_HOVERING : 0);
					ret |=
						(uint)
							((((i.mouse.buttons[NK_BUTTON_LEFT].down) != 0) && ((i.mouse.buttons[NK_BUTTON_LEFT].clicked) != 0))
								? NK_CHART_CLICKED
								: 0);
					color = (nk_color) (g.slots[slot].highlight);
				}
				nk_fill_rect(_out_, (nk_rect) (bounds), (float) (0), (nk_color) (color));
				g.slots[slot].index += (int) (1);
				return (uint) (ret);
			}

			color = (nk_color) (g.slots[slot].color);
			cur.x = (float) (g.x + (step*(float) (g.slots[slot].index)));
			cur.y = (float) ((g.y + g.h) - (ratio*g.h));
			nk_stroke_line(_out_, (float) (g.slots[slot].last.x), (float) (g.slots[slot].last.y), (float) (cur.x),
				(float) (cur.y), (float) (1.0f), (nk_color) (color));
			bounds.x = (float) (cur.x - 3);
			bounds.y = (float) (cur.y - 3);
			bounds.w = (float) (bounds.h = (float) (6));
			if ((layout.flags & NK_WINDOW_ROM) == 0)
			{
				if ((nk_input_is_mouse_hovering_rect(i, (nk_rect) (bounds))) != 0)
				{
					ret = (uint) (NK_CHART_HOVERING);
					ret |=
						(uint)
							(((i.mouse.buttons[NK_BUTTON_LEFT].down == 0) && ((i.mouse.buttons[NK_BUTTON_LEFT].clicked) != 0))
								? NK_CHART_CLICKED
								: 0);
					color = (nk_color) (g.slots[slot].highlight);
				}
			}

			nk_fill_rect(_out_, (nk_rect) (nk_rect_((float) (cur.x - 2), (float) (cur.y - 2), (float) (4), (float) (4))),
				(float) (0), (nk_color) (color));
			g.slots[slot].last.x = (float) (cur.x);
			g.slots[slot].last.y = (float) (cur.y);
			g.slots[slot].index += (int) (1);
			return (uint) (ret);
		}

		public static uint nk_chart_push_column(nk_context ctx, nk_window win, nk_chart chart, float value, int slot)
		{
			nk_command_buffer _out_ = win.buffer;
			nk_input _in_ = ctx.input;
			nk_panel layout = win.layout;
			float ratio;
			uint ret = (uint) (0);
			nk_color color = new nk_color();
			nk_rect item = new nk_rect();
			if ((chart.slots[slot].index) >= (chart.slots[slot].count)) return (uint) (nk_false);
			if ((chart.slots[slot].count) != 0)
			{
				float padding = (float) (chart.slots[slot].count - 1);
				item.w = (float) ((chart.w - padding)/(float) (chart.slots[slot].count));
			}

			color = (nk_color) (chart.slots[slot].color);
			item.h =
				(float)
					(chart.h*
					 (((value/chart.slots[slot].range) < (0)) ? -(value/chart.slots[slot].range) : (value/chart.slots[slot].range)));
			if ((value) >= (0))
			{
				ratio =
					(float)
						((value + (((chart.slots[slot].min) < (0)) ? -(chart.slots[slot].min) : (chart.slots[slot].min)))/
						 (((chart.slots[slot].range) < (0)) ? -(chart.slots[slot].range) : (chart.slots[slot].range)));
				item.y = (float) ((chart.y + chart.h) - chart.h*ratio);
			}
			else
			{
				ratio = (float) ((value - chart.slots[slot].max)/chart.slots[slot].range);
				item.y = (float) (chart.y + (chart.h*(((ratio) < (0)) ? -(ratio) : (ratio))) - item.h);
			}

			item.x = (float) (chart.x + ((float) (chart.slots[slot].index)*item.w));
			item.x = (float) (item.x + ((float) (chart.slots[slot].index)));
			if (((layout.flags & NK_WINDOW_ROM) == 0) &&
			    ((((item.x) <= (_in_.mouse.pos.x)) && ((_in_.mouse.pos.x) < (item.x + item.w))) &&
			     (((item.y) <= (_in_.mouse.pos.y)) && ((_in_.mouse.pos.y) < (item.y + item.h)))))
			{
				ret = (uint) (NK_CHART_HOVERING);
				ret |=
					(uint)
						(((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->down == 0) &&
						  ((((nk_mouse_button*) _in_.mouse.buttons + NK_BUTTON_LEFT)->clicked) != 0))
							? NK_CHART_CLICKED
							: 0);
				color = (nk_color) (chart.slots[slot].highlight);
			}

			nk_fill_rect(_out_, (nk_rect) (item), (float) (0), (nk_color) (color));
			chart.slots[slot].index += (int) (1);
			return (uint) (ret);
		}

		public static uint nk_chart_push_slot(nk_context ctx, float value, int slot)
		{
			uint flags;
			nk_window win;
			if (((ctx == null) || (ctx.current == null)) || ((slot) >= (4))) return (uint) (nk_false);
			if ((slot) >= (ctx.current.layout.chart.slot)) return (uint) (nk_false);
			win = ctx.current;
			if ((win.layout.chart.slot) < (slot)) return (uint) (nk_false);
			switch (win.layout.chart.slots[slot].type)
			{
				case NK_CHART_LINES:
					flags = (uint) (nk_chart_push_line(ctx, win, win.layout.chart, (float) (value), (int) (slot)));
					break;
				case NK_CHART_COLUMN:
					flags = (uint) (nk_chart_push_column(ctx, win, win.layout.chart, (float) (value), (int) (slot)));
					break;
				default:
				case NK_CHART_MAX:
					flags = (uint) (0);
					break;
			}

			return (uint) (flags);
		}

		public static uint nk_chart_push(nk_context ctx, float value)
		{
			return (uint) (nk_chart_push_slot(ctx, (float) (value), (int) (0)));
		}

		public static void nk_chart_end(nk_context ctx)
		{
			nk_window win;
			nk_chart chart;
			if ((ctx == null) || (ctx.current == null)) return;
			win = ctx.current;
			chart = win.layout.chart;

			return;
		}

		public static void nk_plot(nk_context ctx, int type, float* values, int count, int offset)
		{
			int i = (int) (0);
			float min_value;
			float max_value;
			if (((ctx == null) || (values == null)) || (count == 0)) return;
			min_value = (float) (values[offset]);
			max_value = (float) (values[offset]);
			for (i = (int) (0); (i) < (count); ++i)
			{
				min_value = (float) ((values[i + offset]) < (min_value) ? (values[i + offset]) : (min_value));
				max_value = (float) ((values[i + offset]) < (max_value) ? (max_value) : (values[i + offset]));
			}
			if ((nk_chart_begin(ctx, (int) (type), (int) (count), (float) (min_value), (float) (max_value))) != 0)
			{
				for (i = (int) (0); (i) < (count); ++i)
				{
					nk_chart_push(ctx, (float) (values[i + offset]));
				}
				nk_chart_end(ctx);
			}

		}

		public static void nk_plot_function(nk_context ctx, int type, void* userdata, NkFloatValueGetter value_getter,
			int count, int offset)
		{
			int i = (int) (0);
			float min_value;
			float max_value;
			if (((ctx == null) || (value_getter == null)) || (count == 0)) return;
			max_value = (float) (min_value = (float) (value_getter(userdata, (int) (offset))));
			for (i = (int) (0); (i) < (count); ++i)
			{
				float value = (float) (value_getter(userdata, (int) (i + offset)));
				min_value = (float) ((value) < (min_value) ? (value) : (min_value));
				max_value = (float) ((value) < (max_value) ? (max_value) : (value));
			}
			if ((nk_chart_begin(ctx, (int) (type), (int) (count), (float) (min_value), (float) (max_value))) != 0)
			{
				for (i = (int) (0); (i) < (count); ++i)
				{
					nk_chart_push(ctx, (float) (value_getter(userdata, (int) (i + offset))));
				}
				nk_chart_end(ctx);
			}

		}

		public static int nk_group_scrolled_offset_begin(nk_context ctx, nk_scroll offset, char* title, uint flags)
		{
			nk_rect bounds = new nk_rect();
			nk_window panel = new nk_window();
			nk_window win;
			win = ctx.current;
			nk_panel_alloc_space(&bounds, ctx);
			{
				if (
					(!(!(((((bounds.x) > (win.layout.clip.x + win.layout.clip.w)) || ((bounds.x + bounds.w) < (win.layout.clip.x))) ||
					      ((bounds.y) > (win.layout.clip.y + win.layout.clip.h))) || ((bounds.y + bounds.h) < (win.layout.clip.y))))) &&
					((flags & NK_WINDOW_MOVABLE) == 0))
				{
					return (int) (0);
				}
			}

			if ((win.flags & NK_WINDOW_ROM) != 0) flags |= (uint) (NK_WINDOW_ROM);

			panel.bounds = (nk_rect) (bounds);
			panel.flags = (uint) (flags);
			panel.scrollbar.x = offset.x;
			panel.scrollbar.y = offset.y;
			panel.buffer = (nk_command_buffer) (win.buffer);
			panel.layout = (nk_panel) (nk_create_panel(ctx));
			ctx.current = panel;
			nk_panel_begin(ctx, (flags & NK_WINDOW_TITLE) != 0 ? title : null, (int) (NK_PANEL_GROUP));
			win.buffer = (nk_command_buffer) (panel.buffer);
			win.buffer.clip = (nk_rect) (panel.layout.clip);
			panel.layout.offset = offset;

			panel.layout.parent = win.layout;
			win.layout = panel.layout;
			ctx.current = win;
			if (((panel.layout.flags & NK_WINDOW_CLOSED) != 0) || ((panel.layout.flags & NK_WINDOW_MINIMIZED) != 0))
			{
				uint f = (uint) (panel.layout.flags);
				nk_group_scrolled_end(ctx);
				if ((f & NK_WINDOW_CLOSED) != 0) return (int) (NK_WINDOW_CLOSED);
				if ((f & NK_WINDOW_MINIMIZED) != 0) return (int) (NK_WINDOW_MINIMIZED);
			}

			return (int) (1);
		}

		public static void nk_group_scrolled_end(nk_context ctx)
		{
			nk_window win;
			nk_panel parent;
			nk_panel g;
			nk_rect clip = new nk_rect();
			nk_window pan = new nk_window();
			nk_vec2 panel_padding = new nk_vec2();
			if ((ctx == null) || (ctx.current == null)) return;
			win = ctx.current;
			g = win.layout;
			parent = g.parent;

			panel_padding = (nk_vec2) (nk_panel_get_padding(ctx.style, (int) (NK_PANEL_GROUP)));
			pan.bounds.y = (float) (g.bounds.y - (g.header_height + g.menu.h));
			pan.bounds.x = (float) (g.bounds.x - panel_padding.x);
			pan.bounds.w = (float) (g.bounds.w + 2*panel_padding.x);
			pan.bounds.h = (float) (g.bounds.h + g.header_height + g.menu.h);
			if ((g.flags & NK_WINDOW_BORDER) != 0)
			{
				pan.bounds.x -= (float) (g.border);
				pan.bounds.y -= (float) (g.border);
				pan.bounds.w += (float) (2*g.border);
				pan.bounds.h += (float) (2*g.border);
			}

			if ((g.flags & NK_WINDOW_NO_SCROLLBAR) == 0)
			{
				pan.bounds.w += (float) (ctx.style.window.scrollbar_size.x);
				pan.bounds.h += (float) (ctx.style.window.scrollbar_size.y);
			}

			pan.scrollbar.x = (uint) (g.offset.x);
			pan.scrollbar.y = (uint) (g.offset.y);
			pan.flags = (uint) (g.flags);
			pan.buffer = (nk_command_buffer) (win.buffer);
			pan.layout = g;
			pan.parent = win;
			ctx.current = pan;
			nk_unify(ref clip, ref parent.clip, (float) (pan.bounds.x), (float) (pan.bounds.y),
				(float) (pan.bounds.x + pan.bounds.w), (float) (pan.bounds.y + pan.bounds.h + panel_padding.x));
			nk_push_scissor(pan.buffer, (nk_rect) (clip));
			nk_end(ctx);
			win.buffer = (nk_command_buffer) (pan.buffer);
			nk_push_scissor(win.buffer, (nk_rect) (parent.clip));
			ctx.current = win;
			win.layout = parent;
			g.bounds = (nk_rect) (pan.bounds);
			return;
		}

		public static int nk_group_scrolled_begin(nk_context ctx, nk_scroll scroll, char* title, uint flags)
		{
			return (int) (nk_group_scrolled_offset_begin(ctx, scroll, title, (uint) (flags)));
		}

		public static int nk_group_begin_titled(nk_context ctx, char* id, char* title, uint flags)
		{
			int id_len;
			uint id_hash;
			nk_window win;
			uint* x_offset;
			uint* y_offset;
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (id == null)) return (int) (0);
			win = ctx.current;
			id_len = (int) (nk_strlen(id));
			id_hash = (uint) (nk_murmur_hash(id, (int) (id_len), (uint) (NK_PANEL_GROUP)));
			x_offset = nk_find_value(win, (uint) (id_hash));
			if (x_offset == null)
			{
				x_offset = nk_add_value(ctx, win, (uint) (id_hash), (uint) (0));
				y_offset = nk_add_value(ctx, win, (uint) (id_hash + 1), (uint) (0));
				if ((x_offset == null) || (y_offset == null)) return (int) (0);
				*x_offset = (uint) (*y_offset = (uint) (0));
			}
			else y_offset = nk_find_value(win, (uint) (id_hash + 1));
			return
				(int) (nk_group_scrolled_offset_begin(ctx, new nk_scroll {x = *x_offset, y = *y_offset}, title, (uint) (flags)));
		}

		public static int nk_group_begin(nk_context ctx, char* title, uint flags)
		{
			return (int) (nk_group_begin_titled(ctx, title, title, (uint) (flags)));
		}

		public static void nk_group_end(nk_context ctx)
		{
			nk_group_scrolled_end(ctx);
		}

		public static int nk_list_view_begin(nk_context ctx, nk_list_view view, char* title, uint flags, int row_height,
			int row_count)
		{
			int title_len;
			uint title_hash;
			uint* x_offset;
			uint* y_offset;
			int result;
			nk_window win;
			nk_panel layout;
			nk_style style;
			nk_vec2 item_spacing = new nk_vec2();
			if (((ctx == null) || (view == null)) || (title == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			item_spacing = (nk_vec2) (style.window.spacing);
			row_height += (int) ((0) < ((int) (item_spacing.y)) ? ((int) (item_spacing.y)) : (0));
			title_len = (int) (nk_strlen(title));
			title_hash = (uint) (nk_murmur_hash(title, (int) (title_len), (uint) (NK_PANEL_GROUP)));
			x_offset = nk_find_value(win, (uint) (title_hash));
			if (x_offset == null)
			{
				x_offset = nk_add_value(ctx, win, (uint) (title_hash), (uint) (0));
				y_offset = nk_add_value(ctx, win, (uint) (title_hash + 1), (uint) (0));
				if ((x_offset == null) || (y_offset == null)) return (int) (0);
				*x_offset = (uint) (*y_offset = (uint) (0));
			}
			else y_offset = nk_find_value(win, (uint) (title_hash + 1));
			view.scroll_value = *y_offset;
			view.scroll_pointer = y_offset;
			*y_offset = (uint) (0);
			result =
				(int) (nk_group_scrolled_offset_begin(ctx, new nk_scroll {x = *x_offset, y = *y_offset}, title, (uint) (flags)));
			win = ctx.current;
			layout = win.layout;
			view.total_height = (int) (row_height*((row_count) < (1) ? (1) : (row_count)));
			view.begin =
				((int)
					(((float) (view.scroll_value)/(float) (row_height)) < (0.0f)
						? (0.0f)
						: ((float) (view.scroll_value)/(float) (row_height))));
			view.count =
				(int)
					((nk_iceilf((float) ((layout.clip.h)/(float) (row_height)))) < (0)
						? (0)
						: (nk_iceilf((float) ((layout.clip.h)/(float) (row_height)))));
			view.end = (int) (view.begin + view.count);
			view.ctx = ctx;
			return (int) (result);
		}

		public static void nk_list_view_end(nk_list_view view)
		{
			nk_context ctx;
			nk_window win;
			nk_panel layout;
			if ((view == null) || (view.ctx == null)) return;
			ctx = view.ctx;
			win = ctx.current;
			layout = win.layout;
			layout.at_y = (float) (layout.bounds.y + (float) (view.total_height));
			*view.scroll_pointer = (uint) (*view.scroll_pointer + view.scroll_value);
			nk_group_end(view.ctx);
		}

		public static int nk_popup_begin(nk_context ctx, int type, char* title, uint flags, nk_rect rect)
		{
			nk_window popup;
			nk_window win;
			nk_panel panel;
			int title_len;
			uint title_hash;
			ulong allocated;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			panel = win.layout;
			title_len = (int) (nk_strlen(title));
			title_hash = (uint) (nk_murmur_hash(title, (int) (title_len), (uint) (NK_PANEL_POPUP)));
			popup = win.popup.win;
			if (popup == null)
			{
				popup = (nk_window) (nk_create_window(ctx));
				popup.parent = win;
				win.popup.win = popup;
				win.popup.active = (int) (0);
				win.popup.type = (int) (NK_PANEL_POPUP);
			}

			if (win.popup.name != title_hash)
			{
				if (win.popup.active == 0)
				{
					win.popup.name = (uint) (title_hash);
					win.popup.active = (int) (1);
					win.popup.type = (int) (NK_PANEL_POPUP);
				}
				else return (int) (0);
			}

			ctx.current = popup;
			rect.x += (float) (win.layout.clip.x);
			rect.y += (float) (win.layout.clip.y);
			popup.parent = win;
			popup.bounds = (nk_rect) (rect);
			popup.seq = (uint) (ctx.seq);
			popup.layout = (nk_panel) (nk_create_panel(ctx));
			popup.flags = (uint) (flags);
			popup.flags |= (uint) (NK_WINDOW_BORDER);
			if ((type) == (NK_POPUP_DYNAMIC)) popup.flags |= (uint) (NK_WINDOW_DYNAMIC);
			popup.buffer = (nk_command_buffer) (win.buffer);
			nk_start_popup(ctx, win);
			allocated = (ulong) (ctx.memory.allocated);
			nk_push_scissor(popup.buffer, (nk_rect) (nk_null_rect));
			if ((nk_panel_begin(ctx, title, (int) (NK_PANEL_POPUP))) != 0)
			{
				nk_panel root;
				root = win.layout;
				while ((root) != null)
				{
					root.flags |= (uint) (NK_WINDOW_ROM);
					root.flags &= (uint) (~(uint) (NK_WINDOW_REMOVE_ROM));
					root = root.parent;
				}
				win.popup.active = (int) (1);
				popup.layout.offset = popup.scrollbar;
				popup.layout.parent = win.layout;
				return (int) (1);
			}
			else
			{
				nk_panel root;
				root = win.layout;
				while ((root) != null)
				{
					root.flags |= (uint) (NK_WINDOW_REMOVE_ROM);
					root = root.parent;
				}
				win.popup.buf.active = (int) (0);
				win.popup.active = (int) (0);
				ctx.memory.allocated = (ulong) (allocated);
				ctx.current = win;
				nk_free_panel(ctx, popup.layout);
				popup.layout = null;
				return (int) (0);
			}

		}

		public static int nk_nonblock_begin(nk_context ctx, uint flags, nk_rect body, nk_rect header, int panel_type)
		{
			nk_window popup;
			nk_window win;
			nk_panel panel;
			int is_active = (int) (nk_true);
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			panel = win.layout;
			popup = win.popup.win;
			if (popup == null)
			{
				popup = (nk_window) (nk_create_window(ctx));
				popup.parent = win;
				win.popup.win = popup;
				win.popup.type = (int) (panel_type);
				nk_command_buffer_init(popup.buffer, (int) (NK_CLIPPING_ON));
			}
			else
			{
				int pressed;
				int in_body;
				int in_header;
				pressed = (int) (nk_input_is_mouse_pressed(ctx.input, (int) (NK_BUTTON_LEFT)));
				in_body = (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (body)));
				in_header = (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (header)));
				if (((pressed) != 0) && ((in_body == 0) || ((in_header) != 0))) is_active = (int) (nk_false);
			}

			win.popup.header = (nk_rect) (header);
			if (is_active == 0)
			{
				nk_panel root = win.layout;
				while ((root) != null)
				{
					root.flags |= (uint) (NK_WINDOW_REMOVE_ROM);
					root = root.parent;
				}
				return (int) (is_active);
			}

			popup.bounds = (nk_rect) (body);
			popup.parent = win;
			popup.layout = (nk_panel) (nk_create_panel(ctx));
			popup.flags = (uint) (flags);
			popup.flags |= (uint) (NK_WINDOW_BORDER);
			popup.flags |= (uint) (NK_WINDOW_DYNAMIC);
			popup.seq = (uint) (ctx.seq);
			win.popup.active = (int) (1);
			nk_start_popup(ctx, win);
			popup.buffer = (nk_command_buffer) (win.buffer);
			nk_push_scissor(popup.buffer, (nk_rect) (nk_null_rect));
			ctx.current = popup;
			nk_panel_begin(ctx, null, (int) (panel_type));
			win.buffer = (nk_command_buffer) (popup.buffer);
			popup.layout.parent = win.layout;
			popup.layout.offset = popup.scrollbar;

			{
				nk_panel root;
				root = win.layout;
				while ((root) != null)
				{
					root.flags |= (uint) (NK_WINDOW_ROM);
					root = root.parent;
				}
			}

			return (int) (is_active);
		}

		public static void nk_popup_close(nk_context ctx)
		{
			nk_window popup;
			if ((ctx == null) || (ctx.current == null)) return;
			popup = ctx.current;
			popup.flags |= (uint) (NK_WINDOW_HIDDEN);
		}

		public static void nk_popup_end(nk_context ctx)
		{
			nk_window win;
			nk_window popup;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			popup = ctx.current;
			if (popup.parent == null) return;
			win = popup.parent;
			if ((popup.flags & NK_WINDOW_HIDDEN) != 0)
			{
				nk_panel root;
				root = win.layout;
				while ((root) != null)
				{
					root.flags |= (uint) (NK_WINDOW_REMOVE_ROM);
					root = root.parent;
				}
				win.popup.active = (int) (0);
			}

			nk_push_scissor(popup.buffer, (nk_rect) (nk_null_rect));
			nk_end(ctx);
			win.buffer = (nk_command_buffer) (popup.buffer);
			nk_finish_popup(ctx, win);
			ctx.current = win;
			nk_push_scissor(win.buffer, (nk_rect) (win.layout.clip));
		}

		public static int nk_tooltip_begin(nk_context ctx, float width)
		{
			int x;
			int y;
			int w;
			int h;
			nk_window win;
			nk_input _in_;
			nk_rect bounds = new nk_rect();
			int ret;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			_in_ = ctx.input;
			if (((win.popup.win) != null) && ((win.popup.type & NK_PANEL_SET_NONBLOCK) != 0)) return (int) (0);
			w = (int) (nk_iceilf((float) (width)));
			h = (int) (nk_iceilf((float) (nk_null_rect.h)));
			x = (int) (nk_ifloorf((float) (_in_.mouse.pos.x + 1)) - (int) (win.layout.clip.x));
			y = (int) (nk_ifloorf((float) (_in_.mouse.pos.y + 1)) - (int) (win.layout.clip.y));
			bounds.x = ((float) (x));
			bounds.y = ((float) (y));
			bounds.w = ((float) (w));
			bounds.h = ((float) (h));
			ret =
				(int)
					(nk_popup_begin(ctx, (int) (NK_POPUP_DYNAMIC), "__##Tooltip##__",
						(uint) (NK_WINDOW_NO_SCROLLBAR | NK_WINDOW_BORDER), (nk_rect) (bounds)));
			if ((ret) != 0) win.layout.flags &= (uint) (~(uint) (NK_WINDOW_ROM));
			win.popup.type = (int) (NK_PANEL_TOOLTIP);
			ctx.current.layout.type = (int) (NK_PANEL_TOOLTIP);
			return (int) (ret);
		}

		public static void nk_tooltip_end(nk_context ctx)
		{
			if ((ctx == null) || (ctx.current == null)) return;
			ctx.current.seq--;
			nk_popup_close(ctx);
			nk_popup_end(ctx);
		}

		public static void nk_tooltip(nk_context ctx, char* text)
		{
			nk_style style;
			nk_vec2 padding = new nk_vec2();
			int text_len;
			float text_width;
			float text_height;
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (text == null)) return;
			style = ctx.style;
			padding = (nk_vec2) (style.window.padding);
			text_len = (int) (nk_strlen(text));
			text_width =
				(float) (style.font.width((nk_handle) (style.font.userdata), (float) (style.font.height), text, (int) (text_len)));
			text_width += (float) (4*padding.x);
			text_height = (float) (style.font.height + 2*padding.y);
			if ((nk_tooltip_begin(ctx, (float) (text_width))) != 0)
			{
				nk_layout_row_dynamic(ctx, (float) (text_height), (int) (1));
				nk_text_(ctx, text, (int) (text_len), (uint) (NK_TEXT_LEFT));
				nk_tooltip_end(ctx);
			}

		}

		public static int nk_contextual_begin(nk_context ctx, uint flags, nk_vec2 size, nk_rect trigger_bounds)
		{
			nk_window win;
			nk_window popup;
			nk_rect body = new nk_rect();
			nk_rect null_rect = new nk_rect();
			int is_clicked = (int) (0);
			int is_active = (int) (0);
			int is_open = (int) (0);
			int ret = (int) (0);
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			++win.popup.con_count;
			popup = win.popup.win;
			is_open = (int) (((popup) != null) && ((win.popup.type) == (NK_PANEL_CONTEXTUAL)) ? 1 : 0);
			is_clicked = (int) (nk_input_mouse_clicked(ctx.input, (int) (NK_BUTTON_RIGHT), (nk_rect) (trigger_bounds)));
			if (((win.popup.active_con) != 0) && (win.popup.con_count != win.popup.active_con)) return (int) (0);
			if (((((is_clicked) != 0) && ((is_open) != 0)) && (is_active == 0)) ||
			    (((is_open == 0) && (is_active == 0)) && (is_clicked == 0))) return (int) (0);
			win.popup.active_con = (uint) (win.popup.con_count);
			if ((is_clicked) != 0)
			{
				body.x = (float) (ctx.input.mouse.pos.x);
				body.y = (float) (ctx.input.mouse.pos.y);
			}
			else
			{
				body.x = (float) (popup.bounds.x);
				body.y = (float) (popup.bounds.y);
			}

			body.w = (float) (size.x);
			body.h = (float) (size.y);
			ret =
				(int)
					(nk_nonblock_begin(ctx, (uint) (flags | NK_WINDOW_NO_SCROLLBAR), (nk_rect) (body), (nk_rect) (null_rect),
						(int) (NK_PANEL_CONTEXTUAL)));
			if ((ret) != 0) win.popup.type = (int) (NK_PANEL_CONTEXTUAL);
			else
			{
				win.popup.active_con = (uint) (0);
				if ((win.popup.win) != null) win.popup.win.flags = (uint) (0);
			}

			return (int) (ret);
		}

		public static int nk_contextual_item_text(nk_context ctx, char* text, int len, uint alignment)
		{
			nk_window win;
			nk_input _in_;
			nk_style style;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			state = (int) (nk_widget_fitting(&bounds, ctx, (nk_vec2) (style.contextual_button.padding)));
			if (state == 0) return (int) (nk_false);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), text, (int) (len), (uint) (alignment),
					(int) (NK_BUTTON_DEFAULT), style.contextual_button, _in_, style.font)) != 0)
			{
				nk_contextual_close(ctx);
				return (int) (nk_true);
			}

			return (int) (nk_false);
		}

		public static int nk_contextual_item_label(nk_context ctx, char* label, uint align)
		{
			return (int) (nk_contextual_item_text(ctx, label, (int) (nk_strlen(label)), (uint) (align)));
		}

		public static int nk_contextual_item_image_text(nk_context ctx, nk_image img, char* text, int len, uint align)
		{
			nk_window win;
			nk_input _in_;
			nk_style style;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			state = (int) (nk_widget_fitting(&bounds, ctx, (nk_vec2) (style.contextual_button.padding)));
			if (state == 0) return (int) (nk_false);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (nk_image) (img), text,
					(int) (len), (uint) (align), (int) (NK_BUTTON_DEFAULT), style.contextual_button, style.font, _in_)) != 0)
			{
				nk_contextual_close(ctx);
				return (int) (nk_true);
			}

			return (int) (nk_false);
		}

		public static int nk_contextual_item_image_label(nk_context ctx, nk_image img, char* label, uint align)
		{
			return (int) (nk_contextual_item_image_text(ctx, (nk_image) (img), label, (int) (nk_strlen(label)), (uint) (align)));
		}

		public static int nk_contextual_item_symbol_text(nk_context ctx, int symbol, char* text, int len, uint align)
		{
			nk_window win;
			nk_input _in_;
			nk_style style;
			nk_rect bounds = new nk_rect();
			int state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			state = (int) (nk_widget_fitting(&bounds, ctx, (nk_vec2) (style.contextual_button.padding)));
			if (state == 0) return (int) (nk_false);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text_symbol(ref ctx.last_widget_state, win.buffer, (nk_rect) (bounds), (int) (symbol), text,
					(int) (len), (uint) (align), (int) (NK_BUTTON_DEFAULT), style.contextual_button, style.font, _in_)) != 0)
			{
				nk_contextual_close(ctx);
				return (int) (nk_true);
			}

			return (int) (nk_false);
		}

		public static int nk_contextual_item_symbol_label(nk_context ctx, int symbol, char* text, uint align)
		{
			return (int) (nk_contextual_item_symbol_text(ctx, (int) (symbol), text, (int) (nk_strlen(text)), (uint) (align)));
		}

		public static void nk_contextual_close(nk_context ctx)
		{
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return;
			nk_popup_close(ctx);
		}

		public static void nk_contextual_end(nk_context ctx)
		{
			nk_window popup;
			nk_panel panel;
			if ((ctx == null) || (ctx.current == null)) return;
			popup = ctx.current;
			panel = popup.layout;
			if ((panel.flags & NK_WINDOW_DYNAMIC) != 0)
			{
				nk_rect body = new nk_rect();
				if ((panel.at_y) < (panel.bounds.y + panel.bounds.h))
				{
					nk_vec2 padding = (nk_vec2) (nk_panel_get_padding(ctx.style, (int) (panel.type)));
					body = (nk_rect) (panel.bounds);
					body.y = (float) (panel.at_y + panel.footer_height + panel.border + padding.y + panel.row.height);
					body.h = (float) ((panel.bounds.y + panel.bounds.h) - body.y);
				}
				{
					int pressed = (int) (nk_input_is_mouse_pressed(ctx.input, (int) (NK_BUTTON_LEFT)));
					int in_body = (int) (nk_input_is_mouse_hovering_rect(ctx.input, (nk_rect) (body)));
					if (((pressed) != 0) && ((in_body) != 0)) popup.flags |= (uint) (NK_WINDOW_HIDDEN);
				}
			}

			if ((popup.flags & NK_WINDOW_HIDDEN) != 0) popup.seq = (uint) (0);
			nk_popup_end(ctx);
			return;
		}

		public static int nk_combo_begin(nk_context ctx, nk_window win, nk_vec2 size, int is_clicked, nk_rect header)
		{
			nk_window popup;
			int is_open = (int) (0);
			int is_active = (int) (0);
			nk_rect body = new nk_rect();
			uint hash;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			popup = win.popup.win;
			body.x = (float) (header.x);
			body.w = (float) (size.x);
			body.y = (float) (header.y + header.h - ctx.style.window.combo_border);
			body.h = (float) (size.y);
			hash = (uint) (win.popup.combo_count++);
			is_open = (int) ((popup != null) ? nk_true : nk_false);
			is_active =
				(int) ((((popup) != null) && ((win.popup.name) == (hash))) && ((win.popup.type) == (NK_PANEL_COMBO)) ? 1 : 0);
			if ((((((is_clicked) != 0) && ((is_open) != 0)) && (is_active == 0)) || (((is_open) != 0) && (is_active == 0))) ||
			    (((is_open == 0) && (is_active == 0)) && (is_clicked == 0))) return (int) (0);
			if (
				nk_nonblock_begin(ctx, (uint) (0), (nk_rect) (body),
					(nk_rect)
						((((is_clicked) != 0) && ((is_open) != 0)) ? nk_rect_((float) (0), (float) (0), (float) (0), (float) (0)) : header),
					(int) (NK_PANEL_COMBO)) == 0) return (int) (0);
			win.popup.type = (int) (NK_PANEL_COMBO);
			win.popup.name = (uint) (hash);
			return (int) (1);
		}

		public static int nk_combo_begin_text(nk_context ctx, char* selected, int len, nk_vec2 size)
		{
			nk_input _in_;
			nk_window win;
			nk_style style;
			int s;
			int is_clicked = (int) (nk_false);
			nk_rect header = new nk_rect();
			nk_style_item background;
			nk_text text = new nk_text();
			if ((((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) || (selected == null))
				return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if ((s) == (NK_WIDGET_INVALID)) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.combo.active;
				text.text = (nk_color) (style.combo.label_active);
			}
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.combo.hover;
				text.text = (nk_color) (style.combo.label_hover);
			}
			else
			{
				background = style.combo.normal;
				text.text = (nk_color) (style.combo.label_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				text.background = (nk_color) (background.data.color);
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect label = new nk_rect();
				nk_rect button = new nk_rect();
				nk_rect content = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.x);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
				label.x = (float) (header.x + style.combo.content_padding.x);
				label.y = (float) (header.y + style.combo.content_padding.y);
				label.w = (float) (button.x - (style.combo.content_padding.x + style.combo.spacing.x) - label.x);
				label.h = (float) (header.h - 2*style.combo.content_padding.y);
				nk_widget_text(win.buffer, (nk_rect) (label), selected, (int) (len), &text, (uint) (NK_TEXT_LEFT), ctx.style.font);
				nk_draw_button_symbol(win.buffer, &button, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_label(nk_context ctx, char* selected, nk_vec2 size)
		{
			return (int) (nk_combo_begin_text(ctx, selected, (int) (nk_strlen(selected)), (nk_vec2) (size)));
		}

		public static int nk_combo_begin_color(nk_context ctx, nk_color color, nk_vec2 size)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			int s;
			nk_style_item background;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if ((s) == (NK_WIDGET_INVALID)) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0) background = style.combo.active;
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) background = style.combo.hover;
			else background = style.combo.normal;
			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect content = new nk_rect();
				nk_rect button = new nk_rect();
				nk_rect bounds = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.x);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				bounds.h = (float) (header.h - 4*style.combo.content_padding.y);
				bounds.y = (float) (header.y + 2*style.combo.content_padding.y);
				bounds.x = (float) (header.x + 2*style.combo.content_padding.x);
				bounds.w = (float) ((button.x - (style.combo.content_padding.x + style.combo.spacing.x)) - bounds.x);
				nk_fill_rect(win.buffer, (nk_rect) (bounds), (float) (0), (nk_color) (color));
				nk_draw_button_symbol(win.buffer, &button, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_symbol(nk_context ctx, int symbol, nk_vec2 size)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			int s;
			nk_style_item background;
			nk_color sym_background = new nk_color();
			nk_color symbol_color = new nk_color();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if ((s) == (NK_WIDGET_INVALID)) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.combo.active;
				symbol_color = (nk_color) (style.combo.symbol_active);
			}
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.combo.hover;
				symbol_color = (nk_color) (style.combo.symbol_hover);
			}
			else
			{
				background = style.combo.normal;
				symbol_color = (nk_color) (style.combo.symbol_hover);
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				sym_background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				sym_background = (nk_color) (background.data.color);
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect bounds = new nk_rect();
				nk_rect content = new nk_rect();
				nk_rect button = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.y);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				bounds.h = (float) (header.h - 2*style.combo.content_padding.y);
				bounds.y = (float) (header.y + style.combo.content_padding.y);
				bounds.x = (float) (header.x + style.combo.content_padding.x);
				bounds.w = (float) ((button.x - style.combo.content_padding.y) - bounds.x);
				nk_draw_symbol(win.buffer, (int) (symbol), (nk_rect) (bounds), (nk_color) (sym_background),
					(nk_color) (symbol_color), (float) (1.0f), style.font);
				nk_draw_button_symbol(win.buffer, &bounds, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_symbol_text(nk_context ctx, char* selected, int len, int symbol, nk_vec2 size)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			int s;
			nk_style_item background;
			nk_color symbol_color = new nk_color();
			nk_text text = new nk_text();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if (s == 0) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.combo.active;
				symbol_color = (nk_color) (style.combo.symbol_active);
				text.text = (nk_color) (style.combo.label_active);
			}
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.combo.hover;
				symbol_color = (nk_color) (style.combo.symbol_hover);
				text.text = (nk_color) (style.combo.label_hover);
			}
			else
			{
				background = style.combo.normal;
				symbol_color = (nk_color) (style.combo.symbol_normal);
				text.text = (nk_color) (style.combo.label_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				text.background = (nk_color) (background.data.color);
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect content = new nk_rect();
				nk_rect button = new nk_rect();
				nk_rect label = new nk_rect();
				nk_rect image = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.x);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				nk_draw_button_symbol(win.buffer, &button, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
				image.x = (float) (header.x + style.combo.content_padding.x);
				image.y = (float) (header.y + style.combo.content_padding.y);
				image.h = (float) (header.h - 2*style.combo.content_padding.y);
				image.w = (float) (image.h);
				nk_draw_symbol(win.buffer, (int) (symbol), (nk_rect) (image), (nk_color) (text.background),
					(nk_color) (symbol_color), (float) (1.0f), style.font);
				text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
				label.x = (float) (image.x + image.w + style.combo.spacing.x + style.combo.content_padding.x);
				label.y = (float) (header.y + style.combo.content_padding.y);
				label.w = (float) ((button.x - style.combo.content_padding.x) - label.x);
				label.h = (float) (header.h - 2*style.combo.content_padding.y);
				nk_widget_text(win.buffer, (nk_rect) (label), selected, (int) (len), &text, (uint) (NK_TEXT_LEFT), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_image(nk_context ctx, nk_image img, nk_vec2 size)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			int s;
			nk_style_item background;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if ((s) == (NK_WIDGET_INVALID)) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0) background = style.combo.active;
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) background = style.combo.hover;
			else background = style.combo.normal;
			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect bounds = new nk_rect();
				nk_rect content = new nk_rect();
				nk_rect button = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.y);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				bounds.h = (float) (header.h - 2*style.combo.content_padding.y);
				bounds.y = (float) (header.y + style.combo.content_padding.y);
				bounds.x = (float) (header.x + style.combo.content_padding.x);
				bounds.w = (float) ((button.x - style.combo.content_padding.y) - bounds.x);
				nk_draw_image(win.buffer, (nk_rect) (bounds), img, (nk_color) (nk_white));
				nk_draw_button_symbol(win.buffer, &bounds, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_image_text(nk_context ctx, char* selected, int len, nk_image img, nk_vec2 size)
		{
			nk_window win;
			nk_style style;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			int s;
			nk_style_item background;
			nk_text text = new nk_text();
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			style = ctx.style;
			s = (int) (nk_widget(&header, ctx));
			if (s == 0) return (int) (0);
			_in_ = (((win.layout.flags & NK_WINDOW_ROM) != 0) || ((s) == (NK_WIDGET_ROM))) ? null : ctx.input;
			if ((nk_button_behavior(ref ctx.last_widget_state, (nk_rect) (header), _in_, (int) (NK_BUTTON_DEFAULT))) != 0)
				is_clicked = (int) (nk_true);
			if ((ctx.last_widget_state & NK_WIDGET_STATE_ACTIVED) != 0)
			{
				background = style.combo.active;
				text.text = (nk_color) (style.combo.label_active);
			}
			else if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0)
			{
				background = style.combo.hover;
				text.text = (nk_color) (style.combo.label_hover);
			}
			else
			{
				background = style.combo.normal;
				text.text = (nk_color) (style.combo.label_normal);
			}

			if ((background.type) == (NK_STYLE_ITEM_IMAGE))
			{
				text.background = (nk_color) (nk_rgba((int) (0), (int) (0), (int) (0), (int) (0)));
				nk_draw_image(win.buffer, (nk_rect) (header), background.data.image, (nk_color) (nk_white));
			}
			else
			{
				text.background = (nk_color) (background.data.color);
				nk_fill_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (nk_color) (background.data.color));
				nk_stroke_rect(win.buffer, (nk_rect) (header), (float) (style.combo.rounding), (float) (style.combo.border),
					(nk_color) (style.combo.border_color));
			}

			{
				nk_rect content = new nk_rect();
				nk_rect button = new nk_rect();
				nk_rect label = new nk_rect();
				nk_rect image = new nk_rect();
				int sym;
				if ((ctx.last_widget_state & NK_WIDGET_STATE_HOVER) != 0) sym = (int) (style.combo.sym_hover);
				else if ((is_clicked) != 0) sym = (int) (style.combo.sym_active);
				else sym = (int) (style.combo.sym_normal);
				button.w = (float) (header.h - 2*style.combo.button_padding.y);
				button.x = (float) ((header.x + header.w - header.h) - style.combo.button_padding.x);
				button.y = (float) (header.y + style.combo.button_padding.y);
				button.h = (float) (button.w);
				content.x = (float) (button.x + style.combo.button.padding.x);
				content.y = (float) (button.y + style.combo.button.padding.y);
				content.w = (float) (button.w - 2*style.combo.button.padding.x);
				content.h = (float) (button.h - 2*style.combo.button.padding.y);
				nk_draw_button_symbol(win.buffer, &button, &content, (uint) (ctx.last_widget_state), ctx.style.combo.button,
					(int) (sym), style.font);
				image.x = (float) (header.x + style.combo.content_padding.x);
				image.y = (float) (header.y + style.combo.content_padding.y);
				image.h = (float) (header.h - 2*style.combo.content_padding.y);
				image.w = (float) (image.h);
				nk_draw_image(win.buffer, (nk_rect) (image), img, (nk_color) (nk_white));
				text.padding = (nk_vec2) (nk_vec2_((float) (0), (float) (0)));
				label.x = (float) (image.x + image.w + style.combo.spacing.x + style.combo.content_padding.x);
				label.y = (float) (header.y + style.combo.content_padding.y);
				label.w = (float) ((button.x - style.combo.content_padding.x) - label.x);
				label.h = (float) (header.h - 2*style.combo.content_padding.y);
				nk_widget_text(win.buffer, (nk_rect) (label), selected, (int) (len), &text, (uint) (NK_TEXT_LEFT), style.font);
			}

			return (int) (nk_combo_begin(ctx, win, (nk_vec2) (size), (int) (is_clicked), (nk_rect) (header)));
		}

		public static int nk_combo_begin_symbol_label(nk_context ctx, char* selected, int type, nk_vec2 size)
		{
			return (int) (nk_combo_begin_symbol_text(ctx, selected, (int) (nk_strlen(selected)), (int) (type), (nk_vec2) (size)));
		}

		public static int nk_combo_begin_image_label(nk_context ctx, char* selected, nk_image img, nk_vec2 size)
		{
			return
				(int) (nk_combo_begin_image_text(ctx, selected, (int) (nk_strlen(selected)), (nk_image) (img), (nk_vec2) (size)));
		}

		public static int nk_combo_item_text(nk_context ctx, char* text, int len, uint align)
		{
			return (int) (nk_contextual_item_text(ctx, text, (int) (len), (uint) (align)));
		}

		public static int nk_combo_item_label(nk_context ctx, char* label, uint align)
		{
			return (int) (nk_contextual_item_label(ctx, label, (uint) (align)));
		}

		public static int nk_combo_item_image_text(nk_context ctx, nk_image img, char* text, int len, uint alignment)
		{
			return (int) (nk_contextual_item_image_text(ctx, (nk_image) (img), text, (int) (len), (uint) (alignment)));
		}

		public static int nk_combo_item_image_label(nk_context ctx, nk_image img, char* text, uint alignment)
		{
			return (int) (nk_contextual_item_image_label(ctx, (nk_image) (img), text, (uint) (alignment)));
		}

		public static int nk_combo_item_symbol_text(nk_context ctx, int sym, char* text, int len, uint alignment)
		{
			return (int) (nk_contextual_item_symbol_text(ctx, (int) (sym), text, (int) (len), (uint) (alignment)));
		}

		public static int nk_combo_item_symbol_label(nk_context ctx, int sym, char* label, uint alignment)
		{
			return (int) (nk_contextual_item_symbol_label(ctx, (int) (sym), label, (uint) (alignment)));
		}

		public static void nk_combo_end(nk_context ctx)
		{
			nk_contextual_end(ctx);
		}

		public static void nk_combo_close(nk_context ctx)
		{
			nk_contextual_close(ctx);
		}

		public static int nk_combo(nk_context ctx, char** items, int count, int selected, int item_height, nk_vec2 size)
		{
			int i = (int) (0);
			int max_height;
			nk_vec2 item_spacing = new nk_vec2();
			nk_vec2 window_padding = new nk_vec2();
			if (((ctx == null) || (items == null)) || (count == 0)) return (int) (selected);
			item_spacing = (nk_vec2) (ctx.style.window.spacing);
			window_padding = (nk_vec2) (nk_panel_get_padding(ctx.style, (int) (ctx.current.layout.type)));
			max_height = (int) (count*item_height + count*(int) (item_spacing.y));
			max_height += (int) ((int) (item_spacing.y)*2 + (int) (window_padding.y)*2);
			size.y = (float) ((size.y) < ((float) (max_height)) ? (size.y) : ((float) (max_height)));
			if ((nk_combo_begin_label(ctx, items[selected], (nk_vec2) (size))) != 0)
			{
				nk_layout_row_dynamic(ctx, (float) (item_height), (int) (1));
				for (i = (int) (0); (i) < (count); ++i)
				{
					if ((nk_combo_item_label(ctx, items[i], (uint) (NK_TEXT_LEFT))) != 0) selected = (int) (i);
				}
				nk_combo_end(ctx);
			}

			return (int) (selected);
		}

		public static int nk_combo_separator(nk_context ctx, char* items_separated_by_separator, int separator, int selected,
			int count, int item_height, nk_vec2 size)
		{
			int i;
			int max_height;
			nk_vec2 item_spacing = new nk_vec2();
			nk_vec2 window_padding = new nk_vec2();
			char* current_item;
			char* iter;
			;
			int length = (int) (0);
			if ((ctx == null) || (items_separated_by_separator == null)) return (int) (selected);
			item_spacing = (nk_vec2) (ctx.style.window.spacing);
			window_padding = (nk_vec2) (nk_panel_get_padding(ctx.style, (int) (ctx.current.layout.type)));
			max_height = (int) (count*item_height + count*(int) (item_spacing.y));
			max_height += (int) ((int) (item_spacing.y)*2 + (int) (window_padding.y)*2);
			size.y = (float) ((size.y) < ((float) (max_height)) ? (size.y) : ((float) (max_height)));
			current_item = items_separated_by_separator;
			for (i = (int) (0); (i) < (count); ++i)
			{
				iter = current_item;
				while (((*iter) != 0) && (*iter != separator))
				{
					iter++;
				}
				length = ((int) (iter - current_item));
				if ((i) == (selected)) break;
				current_item = iter + 1;
			}
			if ((nk_combo_begin_text(ctx, current_item, (int) (length), (nk_vec2) (size))) != 0)
			{
				current_item = items_separated_by_separator;
				nk_layout_row_dynamic(ctx, (float) (item_height), (int) (1));
				for (i = (int) (0); (i) < (count); ++i)
				{
					iter = current_item;
					while (((*iter) != 0) && (*iter != separator))
					{
						iter++;
					}
					length = ((int) (iter - current_item));
					if ((nk_combo_item_text(ctx, current_item, (int) (length), (uint) (NK_TEXT_LEFT))) != 0) selected = (int) (i);
					current_item = current_item + length + 1;
				}
				nk_combo_end(ctx);
			}

			return (int) (selected);
		}

		public static int nk_combo_string(nk_context ctx, char* items_separated_by_zeros, int selected, int count,
			int item_height, nk_vec2 size)
		{
			return
				(int)
					(nk_combo_separator(ctx, items_separated_by_zeros, (int) ('\0'), (int) (selected), (int) (count),
						(int) (item_height), (nk_vec2) (size)));
		}

		public static int nk_combo_callback(nk_context ctx, NkComboCallback item_getter, void* userdata, int selected,
			int count, int item_height, nk_vec2 size)
		{
			int i;
			int max_height;
			nk_vec2 item_spacing = new nk_vec2();
			nk_vec2 window_padding = new nk_vec2();
			char* item;
			if ((ctx == null) || (item_getter == null)) return (int) (selected);
			item_spacing = (nk_vec2) (ctx.style.window.spacing);
			window_padding = (nk_vec2) (nk_panel_get_padding(ctx.style, (int) (ctx.current.layout.type)));
			max_height = (int) (count*item_height + count*(int) (item_spacing.y));
			max_height += (int) ((int) (item_spacing.y)*2 + (int) (window_padding.y)*2);
			size.y = (float) ((size.y) < ((float) (max_height)) ? (size.y) : ((float) (max_height)));
			item_getter(userdata, (int) (selected), &item);
			if ((nk_combo_begin_label(ctx, item, (nk_vec2) (size))) != 0)
			{
				nk_layout_row_dynamic(ctx, (float) (item_height), (int) (1));
				for (i = (int) (0); (i) < (count); ++i)
				{
					item_getter(userdata, (int) (i), &item);
					if ((nk_combo_item_label(ctx, item, (uint) (NK_TEXT_LEFT))) != 0) selected = (int) (i);
				}
				nk_combo_end(ctx);
			}

			return (int) (selected);
		}

		public static void nk_combobox(nk_context ctx, char** items, int count, int* selected, int item_height, nk_vec2 size)
		{
			*selected = (int) (nk_combo(ctx, items, (int) (count), (int) (*selected), (int) (item_height), (nk_vec2) (size)));
		}

		public static void nk_combobox_string(nk_context ctx, char* items_separated_by_zeros, int* selected, int count,
			int item_height, nk_vec2 size)
		{
			*selected =
				(int)
					(nk_combo_string(ctx, items_separated_by_zeros, (int) (*selected), (int) (count), (int) (item_height),
						(nk_vec2) (size)));
		}

		public static void nk_combobox_separator(nk_context ctx, char* items_separated_by_separator, int separator,
			int* selected, int count, int item_height, nk_vec2 size)
		{
			*selected =
				(int)
					(nk_combo_separator(ctx, items_separated_by_separator, (int) (separator), (int) (*selected), (int) (count),
						(int) (item_height), (nk_vec2) (size)));
		}

		public static void nk_combobox_callback(nk_context ctx, NkComboCallback item_getter, void* userdata, int* selected,
			int count, int item_height, nk_vec2 size)
		{
			*selected =
				(int)
					(nk_combo_callback(ctx, item_getter, userdata, (int) (*selected), (int) (count), (int) (item_height),
						(nk_vec2) (size)));
		}

		public static int nk_menu_begin(nk_context ctx, nk_window win, char* id, int is_clicked, nk_rect header, nk_vec2 size)
		{
			int is_open = (int) (0);
			int is_active = (int) (0);
			nk_rect body = new nk_rect();
			nk_window popup;
			uint hash = (uint) (nk_murmur_hash(id, (int) (nk_strlen(id)), (uint) (NK_PANEL_MENU)));
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			body.x = (float) (header.x);
			body.w = (float) (size.x);
			body.y = (float) (header.y + header.h);
			body.h = (float) (size.y);
			popup = win.popup.win;
			is_open = (int) (popup != null ? nk_true : nk_false);
			is_active =
				(int) ((((popup) != null) && ((win.popup.name) == (hash))) && ((win.popup.type) == (NK_PANEL_MENU)) ? 1 : 0);
			if ((((((is_clicked) != 0) && ((is_open) != 0)) && (is_active == 0)) || (((is_open) != 0) && (is_active == 0))) ||
			    (((is_open == 0) && (is_active == 0)) && (is_clicked == 0))) return (int) (0);
			if (
				nk_nonblock_begin(ctx, (uint) (NK_WINDOW_NO_SCROLLBAR), (nk_rect) (body), (nk_rect) (header), (int) (NK_PANEL_MENU)) ==
				0) return (int) (0);
			win.popup.type = (int) (NK_PANEL_MENU);
			win.popup.name = (uint) (hash);
			return (int) (1);
		}

		public static int nk_menu_begin_text(nk_context ctx, char* title, int len, uint align, nk_vec2 size)
		{
			nk_window win;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			uint state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			state = (uint) (nk_widget(&header, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text(ref ctx.last_widget_state, win.buffer, (nk_rect) (header), title, (int) (len), (uint) (align),
					(int) (NK_BUTTON_DEFAULT), ctx.style.menu_button, _in_, ctx.style.font)) != 0) is_clicked = (int) (nk_true);
			return (int) (nk_menu_begin(ctx, win, title, (int) (is_clicked), (nk_rect) (header), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_label(nk_context ctx, char* text, uint align, nk_vec2 size)
		{
			return (int) (nk_menu_begin_text(ctx, text, (int) (nk_strlen(text)), (uint) (align), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_image(nk_context ctx, char* id, nk_image img, nk_vec2 size)
		{
			nk_window win;
			nk_rect header = new nk_rect();
			nk_input _in_;
			int is_clicked = (int) (nk_false);
			uint state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			state = (uint) (nk_widget(&header, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (header), (nk_image) (img),
					(int) (NK_BUTTON_DEFAULT), ctx.style.menu_button, _in_)) != 0) is_clicked = (int) (nk_true);
			return (int) (nk_menu_begin(ctx, win, id, (int) (is_clicked), (nk_rect) (header), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_symbol(nk_context ctx, char* id, int sym, nk_vec2 size)
		{
			nk_window win;
			nk_input _in_;
			nk_rect header = new nk_rect();
			int is_clicked = (int) (nk_false);
			uint state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			state = (uint) (nk_widget(&header, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_symbol(ref ctx.last_widget_state, win.buffer, (nk_rect) (header), (int) (sym),
					(int) (NK_BUTTON_DEFAULT), ctx.style.menu_button, _in_, ctx.style.font)) != 0) is_clicked = (int) (nk_true);
			return (int) (nk_menu_begin(ctx, win, id, (int) (is_clicked), (nk_rect) (header), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_image_text(nk_context ctx, char* title, int len, uint align, nk_image img,
			nk_vec2 size)
		{
			nk_window win;
			nk_rect header = new nk_rect();
			nk_input _in_;
			int is_clicked = (int) (nk_false);
			uint state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			state = (uint) (nk_widget(&header, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text_image(ref ctx.last_widget_state, win.buffer, (nk_rect) (header), (nk_image) (img), title,
					(int) (len), (uint) (align), (int) (NK_BUTTON_DEFAULT), ctx.style.menu_button, ctx.style.font, _in_)) != 0)
				is_clicked = (int) (nk_true);
			return (int) (nk_menu_begin(ctx, win, title, (int) (is_clicked), (nk_rect) (header), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_image_label(nk_context ctx, char* title, uint align, nk_image img, nk_vec2 size)
		{
			return
				(int)
					(nk_menu_begin_image_text(ctx, title, (int) (nk_strlen(title)), (uint) (align), (nk_image) (img), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_symbol_text(nk_context ctx, char* title, int len, uint align, int sym, nk_vec2 size)
		{
			nk_window win;
			nk_rect header = new nk_rect();
			nk_input _in_;
			int is_clicked = (int) (nk_false);
			uint state;
			if (((ctx == null) || (ctx.current == null)) || (ctx.current.layout == null)) return (int) (0);
			win = ctx.current;
			state = (uint) (nk_widget(&header, ctx));
			if (state == 0) return (int) (0);
			_in_ = (((state) == (NK_WIDGET_ROM)) || ((win.layout.flags & NK_WINDOW_ROM) != 0)) ? null : ctx.input;
			if (
				(nk_do_button_text_symbol(ref ctx.last_widget_state, win.buffer, (nk_rect) (header), (int) (sym), title, (int) (len),
					(uint) (align), (int) (NK_BUTTON_DEFAULT), ctx.style.menu_button, ctx.style.font, _in_)) != 0)
				is_clicked = (int) (nk_true);
			return (int) (nk_menu_begin(ctx, win, title, (int) (is_clicked), (nk_rect) (header), (nk_vec2) (size)));
		}

		public static int nk_menu_begin_symbol_label(nk_context ctx, char* title, uint align, int sym, nk_vec2 size)
		{
			return
				(int)
					(nk_menu_begin_symbol_text(ctx, title, (int) (nk_strlen(title)), (uint) (align), (int) (sym), (nk_vec2) (size)));
		}

		public static int nk_menu_item_text(nk_context ctx, char* title, int len, uint align)
		{
			return (int) (nk_contextual_item_text(ctx, title, (int) (len), (uint) (align)));
		}

		public static int nk_menu_item_label(nk_context ctx, char* label, uint align)
		{
			return (int) (nk_contextual_item_label(ctx, label, (uint) (align)));
		}

		public static int nk_menu_item_image_label(nk_context ctx, nk_image img, char* label, uint align)
		{
			return (int) (nk_contextual_item_image_label(ctx, (nk_image) (img), label, (uint) (align)));
		}

		public static int nk_menu_item_image_text(nk_context ctx, nk_image img, char* text, int len, uint align)
		{
			return (int) (nk_contextual_item_image_text(ctx, (nk_image) (img), text, (int) (len), (uint) (align)));
		}

		public static int nk_menu_item_symbol_text(nk_context ctx, int sym, char* text, int len, uint align)
		{
			return (int) (nk_contextual_item_symbol_text(ctx, (int) (sym), text, (int) (len), (uint) (align)));
		}

		public static int nk_menu_item_symbol_label(nk_context ctx, int sym, char* label, uint align)
		{
			return (int) (nk_contextual_item_symbol_label(ctx, (int) (sym), label, (uint) (align)));
		}

		public static void nk_menu_close(nk_context ctx)
		{
			nk_contextual_close(ctx);
		}

		public static void nk_menu_end(nk_context ctx)
		{
			nk_contextual_end(ctx);
		}
	}
}