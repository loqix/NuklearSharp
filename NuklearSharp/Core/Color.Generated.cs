// Generated by Sichem at 2/7/2018 4:58:56 PM

using System;
using System.Runtime.InteropServices;

namespace NuklearSharp
{
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct Color
	{
		public byte r;
		public byte g;
		public byte b;
		public byte a;

		public static void HexRgba(char* output, Color col)
		{
			output[0] = ((char) (((col.r & 0xF0) >> 4) <= 9 ? '0' + ((col.r & 0xF0) >> 4) : 'A' - 10 + ((col.r & 0xF0) >> 4)));
			output[1] = ((char) ((col.r & 0x0F) <= 9 ? '0' + (col.r & 0x0F) : 'A' - 10 + (col.r & 0x0F)));
			output[2] = ((char) (((col.g & 0xF0) >> 4) <= 9 ? '0' + ((col.g & 0xF0) >> 4) : 'A' - 10 + ((col.g & 0xF0) >> 4)));
			output[3] = ((char) ((col.g & 0x0F) <= 9 ? '0' + (col.g & 0x0F) : 'A' - 10 + (col.g & 0x0F)));
			output[4] = ((char) (((col.b & 0xF0) >> 4) <= 9 ? '0' + ((col.b & 0xF0) >> 4) : 'A' - 10 + ((col.b & 0xF0) >> 4)));
			output[5] = ((char) ((col.b & 0x0F) <= 9 ? '0' + (col.b & 0x0F) : 'A' - 10 + (col.b & 0x0F)));
			output[6] = ((char) (((col.a & 0xF0) >> 4) <= 9 ? '0' + ((col.a & 0xF0) >> 4) : 'A' - 10 + ((col.a & 0xF0) >> 4)));
			output[7] = ((char) ((col.a & 0x0F) <= 9 ? '0' + (col.a & 0x0F) : 'A' - 10 + (col.a & 0x0F)));
			output[8] = ('\0');
		}

		public static void HexRgb(char* output, Color col)
		{
			output[0] = ((char) (((col.r & 0xF0) >> 4) <= 9 ? '0' + ((col.r & 0xF0) >> 4) : 'A' - 10 + ((col.r & 0xF0) >> 4)));
			output[1] = ((char) ((col.r & 0x0F) <= 9 ? '0' + (col.r & 0x0F) : 'A' - 10 + (col.r & 0x0F)));
			output[2] = ((char) (((col.g & 0xF0) >> 4) <= 9 ? '0' + ((col.g & 0xF0) >> 4) : 'A' - 10 + ((col.g & 0xF0) >> 4)));
			output[3] = ((char) ((col.g & 0x0F) <= 9 ? '0' + (col.g & 0x0F) : 'A' - 10 + (col.g & 0x0F)));
			output[4] = ((char) (((col.b & 0xF0) >> 4) <= 9 ? '0' + ((col.b & 0xF0) >> 4) : 'A' - 10 + ((col.b & 0xF0) >> 4)));
			output[5] = ((char) ((col.b & 0x0F) <= 9 ? '0' + (col.b & 0x0F) : 'A' - 10 + (col.b & 0x0F)));
			output[6] = ('\0');
		}

		public uint U32()
		{
			uint _out_ = (uint) (this.r);
			_out_ |= (uint) ((uint) (this.g) << 8);
			_out_ |= (uint) ((uint) (this.b) << 16);
			_out_ |= (uint) ((uint) (this.a) << 24);
			return (uint) (_out_);
		}

		public void F(float* r, float* g, float* b, float* a)
		{
			float s = (float) (1.0f/255.0f);
			*r = (float) ((float) (this.r)*s);
			*g = (float) ((float) (this.g)*s);
			*b = (float) ((float) (this.b)*s);
			*a = (float) ((float) (this.a)*s);
		}

		public void Fv(float* c)
		{
			this.F(&c[0], &c[1], &c[2], &c[3]);
		}

		public Colorf Cf()
		{
			Colorf o = new Colorf();
			this.F(&o.r, &o.g, &o.b, &o.a);
			return (Colorf) (o);
		}

		public void D(double* r, double* g, double* b, double* a)
		{
			double s = (double) (1.0/255.0);
			*r = (double) ((double) (this.r)*s);
			*g = (double) ((double) (this.g)*s);
			*b = (double) ((double) (this.b)*s);
			*a = (double) ((double) (this.a)*s);
		}

		public void Dv(double* c)
		{
			this.D(&c[0], &c[1], &c[2], &c[3]);
		}

		public void HsvF(float* out_h, float* out_s, float* out_v)
		{
			float a;
			this.HsvaF(out_h, out_s, out_v, &a);
		}

		public void HsvFv(float* _out_)
		{
			float a;
			this.HsvaF(&_out_[0], &_out_[1], &_out_[2], &a);
		}

		public void HsvaF(float* out_h, float* out_s, float* out_v, float* out_a)
		{
			Colorf col = new Colorf();
			this.F(&col.r, &col.g, &col.b, &col.a);
			col.HsvaF(out_h, out_s, out_v, out_a);
		}

		public void HsvaFv(float* _out_)
		{
			this.HsvaF(&_out_[0], &_out_[1], &_out_[2], &_out_[3]);
		}

		public void HsvaI(int* out_h, int* out_s, int* out_v, int* out_a)
		{
			float h;
			float s;
			float v;
			float a;
			this.HsvaF(&h, &s, &v, &a);
			*out_h = (int) ((byte) (h*255.0f));
			*out_s = (int) ((byte) (s*255.0f));
			*out_v = (int) ((byte) (v*255.0f));
			*out_a = (int) ((byte) (a*255.0f));
		}

		public void HsvaIv(int* _out_)
		{
			this.HsvaI(&_out_[0], &_out_[1], &_out_[2], &_out_[3]);
		}

		public void HsvaBv(byte* _out_)
		{
			int* tmp = stackalloc int[4];
			this.HsvaI(&tmp[0], &tmp[1], &tmp[2], &tmp[3]);
			_out_[0] = ((byte) (tmp[0]));
			_out_[1] = ((byte) (tmp[1]));
			_out_[2] = ((byte) (tmp[2]));
			_out_[3] = ((byte) (tmp[3]));
		}

		public void HsvaB(byte* h, byte* s, byte* v, byte* a)
		{
			int* tmp = stackalloc int[4];
			this.HsvaI(&tmp[0], &tmp[1], &tmp[2], &tmp[3]);
			*h = ((byte) (tmp[0]));
			*s = ((byte) (tmp[1]));
			*v = ((byte) (tmp[2]));
			*a = ((byte) (tmp[3]));
		}

		public void HsvI(int* out_h, int* out_s, int* out_v)
		{
			int a;
			this.HsvaI(out_h, out_s, out_v, &a);
		}

		public void HsvB(byte* out_h, byte* out_s, byte* out_v)
		{
			int* tmp = stackalloc int[4];
			this.HsvaI(&tmp[0], &tmp[1], &tmp[2], &tmp[3]);
			*out_h = ((byte) (tmp[0]));
			*out_s = ((byte) (tmp[1]));
			*out_v = ((byte) (tmp[2]));
		}

		public void HsvIv(int* _out_)
		{
			this.HsvI(&_out_[0], &_out_[1], &_out_[2]);
		}

		public void HsvBv(byte* _out_)
		{
			int* tmp = stackalloc int[4];
			this.HsvI(&tmp[0], &tmp[1], &tmp[2]);
			_out_[0] = ((byte) (tmp[0]));
			_out_[1] = ((byte) (tmp[1]));
			_out_[2] = ((byte) (tmp[2]));
		}

		public StyleItem StyleItemColor()
		{
			StyleItem i = new StyleItem();
			i.type = (int) (Nuklear.NK_STYLE_ITEM_COLOR);
			i.data.color = (Color) (this);
			return (StyleItem) (i);
		}
	}
}